
bin/SparkFun_Edge_Project_Template.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 e5 ce 00 00 dd ce 00 00 81 c2 00 00     ................
    c010:	81 c2 00 00 81 c2 00 00 81 c2 00 00 00 00 00 00     ................
	...
    c02c:	e1 ce 00 00 e1 ce 00 00 00 00 00 00 e1 ce 00 00     ................
    c03c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c04c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c05c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c06c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c07c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c08c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c09c:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c0ac:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c0bc:	e1 ce 00 00 e1 ce 00 00 e1 ce 00 00 e1 ce 00 00     ................
    c0cc:	e1 ce 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1a0:	b510      	push	{r4, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
{
    c1a4:	b082      	sub	sp, #8
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	4608      	mov	r0, r1
    c1a8:	f000 ffbe 	bl	d128 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	4828      	ldr	r0, [pc, #160]	; (c250 <main+0xb0>)
    c1ae:	f000 ff87 	bl	d0c0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b2:	f000 ffaf 	bl	d114 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1b6:	f000 feed 	bl	cf94 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1ba:	f000 ff53 	bl	d064 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1be:	4b25      	ldr	r3, [pc, #148]	; (c254 <main+0xb4>)
    c1c0:	681c      	ldr	r4, [r3, #0]
    c1c2:	202e      	movs	r0, #46	; 0x2e
    c1c4:	4621      	mov	r1, r4
    c1c6:	f001 f84b 	bl	d260 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1ca:	4621      	mov	r1, r4
    c1cc:	2025      	movs	r0, #37	; 0x25
    c1ce:	f001 f847 	bl	d260 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1d2:	4621      	mov	r1, r4
    c1d4:	202c      	movs	r0, #44	; 0x2c
    c1d6:	f001 f843 	bl	d260 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1da:	4621      	mov	r1, r4
    c1dc:	202f      	movs	r0, #47	; 0x2f
    c1de:	f001 f83f 	bl	d260 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c1e2:	4b1d      	ldr	r3, [pc, #116]	; (c258 <main+0xb8>)
    c1e4:	200e      	movs	r0, #14
    c1e6:	6819      	ldr	r1, [r3, #0]
    c1e8:	f001 f83a 	bl	d260 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1ec:	4b1b      	ldr	r3, [pc, #108]	; (c25c <main+0xbc>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1f6:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1f8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c1fc:	601c      	str	r4, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1fe:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c200:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c202:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c204:	f000 fe64 	bl	ced0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Project Template\n");
    c208:	4815      	ldr	r0, [pc, #84]	; (c260 <main+0xc0>)
    c20a:	f000 fe45 	bl	ce98 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c20e:	4a15      	ldr	r2, [pc, #84]	; (c264 <main+0xc4>)
    c210:	4915      	ldr	r1, [pc, #84]	; (c268 <main+0xc8>)
    c212:	4816      	ldr	r0, [pc, #88]	; (c26c <main+0xcc>)
    c214:	f000 fe40 	bl	ce98 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Edge Debug Output (UART)\r\n");
    c218:	4815      	ldr	r0, [pc, #84]	; (c270 <main+0xd0>)
    c21a:	f000 fe3d 	bl	ce98 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, World!\r\n");  // Sting_print has less overhead than printf (and less risky behavior since no varargs)
    c21e:	4815      	ldr	r0, [pc, #84]	; (c274 <main+0xd4>)
    c220:	f000 fe94 	bl	cf4c <am_bsp_uart_string_print>
    uint32_t pin14Val = 0; // Default to 0 to illustrate pull-up on hardware
    c224:	2400      	movs	r4, #0
    am_bsp_uart_string_print("This project is meant to serve as a template for making your own apps as a makefile project\r\n");  
    c226:	4814      	ldr	r0, [pc, #80]	; (c278 <main+0xd8>)
    c228:	f000 fe90 	bl	cf4c <am_bsp_uart_string_print>
    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c22c:	aa01      	add	r2, sp, #4
    c22e:	4621      	mov	r1, r4
    c230:	200e      	movs	r0, #14
    uint32_t pin14Val = 0; // Default to 0 to illustrate pull-up on hardware
    c232:	9401      	str	r4, [sp, #4]
    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c234:	f001 f954 	bl	d4e0 <am_hal_gpio_state_read>
    am_util_stdio_printf("Value on button 14 is: %d\r\n", pin14Val);
    c238:	9901      	ldr	r1, [sp, #4]
    c23a:	4810      	ldr	r0, [pc, #64]	; (c27c <main+0xdc>)
    c23c:	f000 fe2c 	bl	ce98 <am_util_stdio_printf>
    am_bsp_debug_printf_disable();
    c240:	f000 feda 	bl	cff8 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c244:	2001      	movs	r0, #1
    c246:	f001 fb73 	bl	d930 <am_hal_sysctrl_sleep>
}
    c24a:	4620      	mov	r0, r4
    c24c:	b002      	add	sp, #8
    c24e:	bd10      	pop	{r4, pc}
    c250:	0000e410 	.word	0x0000e410
    c254:	0000e584 	.word	0x0000e584
    c258:	0000e414 	.word	0x0000e414
    c25c:	40010094 	.word	0x40010094
    c260:	0000e2cc 	.word	0x0000e2cc
    c264:	0000e2ec 	.word	0x0000e2ec
    c268:	0000e2f8 	.word	0x0000e2f8
    c26c:	0000e304 	.word	0x0000e304
    c270:	0000e31c 	.word	0x0000e31c
    c274:	0000e340 	.word	0x0000e340
    c278:	0000e350 	.word	0x0000e350
    c27c:	0000e3b0 	.word	0x0000e3b0

0000c280 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c280:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c282:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c286:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c288:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c28c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c290:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c294:	f000 f806 	bl	c2a4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c298:	bd01      	pop	{r0, pc}
    c29a:	bf00      	nop

0000c29c <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c29c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c29e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c2a0:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c2a2:	4770      	bx	lr

0000c2a4 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c2a4:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2a6:	2300      	movs	r3, #0
{
    c2a8:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2aa:	e9cd 3300 	strd	r3, r3, [sp]
    c2ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c2b2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2b6:	4a27      	ldr	r2, [pc, #156]	; (c354 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c2b8:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2ba:	6813      	ldr	r3, [r2, #0]
    c2bc:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c2be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c2cc:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c2d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2d2:	0c1b      	lsrs	r3, r3, #16
    c2d4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2d8:	6913      	ldr	r3, [r2, #16]
    c2da:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2dc:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c2e0:	0792      	lsls	r2, r2, #30
{
    c2e2:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2e4:	d430      	bmi.n	c348 <am_util_faultisr_collect_data+0xa4>
    c2e6:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2ea:	4619      	mov	r1, r3
    c2ec:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2ee:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2f0:	f7ff ffd4 	bl	c29c <getStackedReg>
    c2f4:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2f6:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2f8:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2fa:	f7ff ffcf 	bl	c29c <getStackedReg>
    c2fe:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c300:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c302:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c304:	f7ff ffca 	bl	c29c <getStackedReg>
    c308:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c30a:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c30c:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c30e:	f7ff ffc5 	bl	c29c <getStackedReg>
    c312:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c314:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c316:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c318:	f7ff ffc0 	bl	c29c <getStackedReg>
    c31c:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c31e:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c320:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c322:	f7ff ffbb 	bl	c29c <getStackedReg>
    c326:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c328:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c32a:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c32c:	f7ff ffb6 	bl	c29c <getStackedReg>
    c330:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c332:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c334:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c336:	f7ff ffb1 	bl	c29c <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c33a:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c33c:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c33e:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c340:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c342:	f001 f9a9 	bl	d698 <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c346:	e7fe      	b.n	c346 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c348:	4601      	mov	r1, r0
    c34a:	2006      	movs	r0, #6
    c34c:	f7ff ffa6 	bl	c29c <getStackedReg>
    c350:	4602      	mov	r2, r0
    c352:	e7ca      	b.n	c2ea <am_util_faultisr_collect_data+0x46>
    c354:	e000ed28 	.word	0xe000ed28

0000c358 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c358:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c35a:	460d      	mov	r5, r1
    c35c:	2600      	movs	r6, #0
    c35e:	ea55 0306 	orrs.w	r3, r5, r6
    c362:	d046      	beq.n	c3f2 <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c364:	0842      	lsrs	r2, r0, #1
    c366:	0883      	lsrs	r3, r0, #2
    c368:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c36c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c370:	18d2      	adds	r2, r2, r3
    c372:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c376:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c37a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c37e:	0914      	lsrs	r4, r2, #4
    c380:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c384:	1912      	adds	r2, r2, r4
    c386:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c38a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c38e:	0a14      	lsrs	r4, r2, #8
    c390:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c394:	1912      	adds	r2, r2, r4
    c396:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c39a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c39e:	0c14      	lsrs	r4, r2, #16
    c3a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c3a4:	1912      	adds	r2, r2, r4
    c3a6:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c3aa:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c3ae:	18d2      	adds	r2, r2, r3
    c3b0:	4634      	mov	r4, r6
    c3b2:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c3b6:	08d3      	lsrs	r3, r2, #3
    c3b8:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c3bc:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c3be:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c3c0:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c3c4:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c3c8:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c3ca:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c3ce:	18e4      	adds	r4, r4, r3
    c3d0:	eb42 0505 	adc.w	r5, r2, r5
    c3d4:	1924      	adds	r4, r4, r4
    c3d6:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c3d8:	1b00      	subs	r0, r0, r4
    c3da:	eb61 0105 	sbc.w	r1, r1, r5
    c3de:	0900      	lsrs	r0, r0, #4
    c3e0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c3e4:	18c0      	adds	r0, r0, r3
    c3e6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c3ea:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c3ee:	bc70      	pop	{r4, r5, r6}
    c3f0:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c3f2:	0883      	lsrs	r3, r0, #2
    c3f4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c3f8:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c3fc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c400:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c404:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c406:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c408:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c40c:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c410:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c414:	2100      	movs	r1, #0
}
    c416:	bc70      	pop	{r4, r5, r6}
    c418:	4770      	bx	lr
    c41a:	bf00      	nop

0000c41c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c420:	b08b      	sub	sp, #44	; 0x2c
    c422:	f10d 080c 	add.w	r8, sp, #12
    c426:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c428:	f04f 0b00 	mov.w	fp, #0
    c42c:	e049      	b.n	c4c2 <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c42e:	eb12 020e 	adds.w	r2, r2, lr
    c432:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c436:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c43a:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c43e:	eb12 020e 	adds.w	r2, r2, lr
    c442:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c446:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c44a:	0a13      	lsrs	r3, r2, #8
    c44c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c450:	18d2      	adds	r2, r2, r3
    c452:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c456:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c45a:	0c13      	lsrs	r3, r2, #16
    c45c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c460:	18d2      	adds	r2, r2, r3
    c462:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c466:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c46a:	1912      	adds	r2, r2, r4
    c46c:	463b      	mov	r3, r7
    c46e:	eb44 0303 	adc.w	r3, r4, r3
    c472:	461c      	mov	r4, r3
        q64 >>= 3;
    c474:	08d3      	lsrs	r3, r2, #3
    c476:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c47a:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c47c:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c47e:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c482:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c486:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c488:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c48c:	18e4      	adds	r4, r4, r3
    c48e:	eb42 0505 	adc.w	r5, r2, r5
    c492:	1924      	adds	r4, r4, r4
    c494:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c496:	1b00      	subs	r0, r0, r4
    c498:	eb61 0105 	sbc.w	r1, r1, r5
    c49c:	0900      	lsrs	r0, r0, #4
    c49e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c4a2:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c4a4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c4a8:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c4ac:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c4b0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c4b4:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c4b8:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c4bc:	f108 0801 	add.w	r8, r8, #1
{
    c4c0:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4c2:	0883      	lsrs	r3, r0, #2
    c4c4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c4c8:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c4cc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c4d0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c4d4:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c4d6:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4da:	1d83      	adds	r3, r0, #6
    c4dc:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c4e0:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c4e4:	2700      	movs	r7, #0
    c4e6:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c4e8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4ec:	0842      	lsrs	r2, r0, #1
    c4ee:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c4f2:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c4f6:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4f8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c4fc:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c500:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c504:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c508:	9700      	str	r7, [sp, #0]
    c50a:	f10b 0901 	add.w	r9, fp, #1
    c50e:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c510:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c514:	d18b      	bne.n	c42e <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c516:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c51a:	4618      	mov	r0, r3
    c51c:	2100      	movs	r1, #0
    } while ( ui64Val );
    c51e:	2b00      	cmp	r3, #0
    c520:	d1cc      	bne.n	c4bc <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c522:	9a01      	ldr	r2, [sp, #4]
    c524:	b172      	cbz	r2, c544 <uint64_to_str+0x128>
    c526:	ab03      	add	r3, sp, #12
    c528:	444b      	add	r3, r9
    c52a:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c52c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c530:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c534:	a903      	add	r1, sp, #12
    c536:	4299      	cmp	r1, r3
    c538:	d1f8      	bne.n	c52c <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c53a:	9b01      	ldr	r3, [sp, #4]
    c53c:	445b      	add	r3, fp
    c53e:	461a      	mov	r2, r3
    c540:	2300      	movs	r3, #0
    c542:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c544:	4648      	mov	r0, r9
    c546:	b00b      	add	sp, #44	; 0x2c
    c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c54c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c54c:	4b01      	ldr	r3, [pc, #4]	; (c554 <am_util_stdio_printf_init+0x8>)
    c54e:	6018      	str	r0, [r3, #0]
}
    c550:	4770      	bx	lr
    c552:	bf00      	nop
    c554:	10001134 	.word	0x10001134

0000c558 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c55c:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c55e:	780b      	ldrb	r3, [r1, #0]
{
    c560:	9200      	str	r2, [sp, #0]
    c562:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c564:	2b00      	cmp	r3, #0
    c566:	f000 8355 	beq.w	cc14 <am_util_stdio_vsprintf+0x6bc>
    c56a:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c56c:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c570:	2b25      	cmp	r3, #37	; 0x25
    c572:	f10a 0701 	add.w	r7, sl, #1
    c576:	d018      	beq.n	c5aa <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c578:	f10b 0201 	add.w	r2, fp, #1
    c57c:	2c00      	cmp	r4, #0
    c57e:	f000 8092 	beq.w	c6a6 <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c582:	2b0a      	cmp	r3, #10
    c584:	f104 0101 	add.w	r1, r4, #1
    c588:	f000 808f 	beq.w	c6aa <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c58c:	7023      	strb	r3, [r4, #0]
    c58e:	4693      	mov	fp, r2
    c590:	460c      	mov	r4, r1
            }

            ++pcFmt;
    c592:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    c594:	f89a 3000 	ldrb.w	r3, [sl]
    c598:	2b00      	cmp	r3, #0
    c59a:	d1e9      	bne.n	c570 <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c59c:	b10c      	cbz	r4, c5a2 <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    c59e:	2300      	movs	r3, #0
    c5a0:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    c5a2:	4658      	mov	r0, fp
    c5a4:	b009      	add	sp, #36	; 0x24
    c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c5aa:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c5ae:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    c5b0:	bf03      	ittte	eq
    c5b2:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    c5b6:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    c5ba:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    c5bc:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    c5be:	2a2d      	cmp	r2, #45	; 0x2d
    c5c0:	f000 8083 	beq.w	c6ca <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c5c8:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5ca:	2909      	cmp	r1, #9
    bool bNeg = false;
    c5cc:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    c5ce:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5d0:	f200 8085 	bhi.w	c6de <am_util_stdio_vsprintf+0x186>
    c5d4:	3501      	adds	r5, #1
    c5d6:	1aed      	subs	r5, r5, r3
    c5d8:	2100      	movs	r1, #0
        ui32Val *= 10;
    c5da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c5de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c5e2:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c5ea:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c5ee:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c5f0:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5f4:	d9f1      	bls.n	c5da <am_util_stdio_vsprintf+0x82>
    c5f6:	f817 200e 	ldrb.w	r2, [r7, lr]
    c5fa:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    c5fe:	f1bc 0f00 	cmp.w	ip, #0
    c602:	d000      	beq.n	c606 <am_util_stdio_vsprintf+0xae>
    c604:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c606:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c608:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c60a:	f103 0a01 	add.w	sl, r3, #1
    c60e:	f000 81ca 	beq.w	c9a6 <am_util_stdio_vsprintf+0x44e>
    c612:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    c616:	2a2e      	cmp	r2, #46	; 0x2e
    c618:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    c61c:	f000 815c 	beq.w	c8d8 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    c620:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    c622:	2a6c      	cmp	r2, #108	; 0x6c
    c624:	d105      	bne.n	c632 <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c626:	785a      	ldrb	r2, [r3, #1]
    c628:	2a6c      	cmp	r2, #108	; 0x6c
    c62a:	f000 820a 	beq.w	ca42 <am_util_stdio_vsprintf+0x4ea>
    c62e:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    c632:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    c636:	2b32      	cmp	r3, #50	; 0x32
    c638:	f200 8141 	bhi.w	c8be <am_util_stdio_vsprintf+0x366>
    c63c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c640:	013f005b 	.word	0x013f005b
    c644:	013f013f 	.word	0x013f013f
    c648:	013f013f 	.word	0x013f013f
    c64c:	013f013f 	.word	0x013f013f
    c650:	013f013f 	.word	0x013f013f
    c654:	013f013f 	.word	0x013f013f
    c658:	013f013f 	.word	0x013f013f
    c65c:	013f013f 	.word	0x013f013f
    c660:	013f013f 	.word	0x013f013f
    c664:	013f00d6 	.word	0x013f00d6
    c668:	013f013f 	.word	0x013f013f
    c66c:	013f013f 	.word	0x013f013f
    c670:	013f013f 	.word	0x013f013f
    c674:	013f013f 	.word	0x013f013f
    c678:	0051013f 	.word	0x0051013f
    c67c:	013f00ed 	.word	0x013f00ed
    c680:	013f005b 	.word	0x013f005b
    c684:	00ed013f 	.word	0x00ed013f
    c688:	013f013f 	.word	0x013f013f
    c68c:	013f013f 	.word	0x013f013f
    c690:	013f013f 	.word	0x013f013f
    c694:	013f013f 	.word	0x013f013f
    c698:	01b3013f 	.word	0x01b3013f
    c69c:	00d9013f 	.word	0x00d9013f
    c6a0:	013f013f 	.word	0x013f013f
    c6a4:	00bc      	.short	0x00bc
    c6a6:	4693      	mov	fp, r2
    c6a8:	e773      	b.n	c592 <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c6aa:	48ce      	ldr	r0, [pc, #824]	; (c9e4 <am_util_stdio_vsprintf+0x48c>)
    c6ac:	7800      	ldrb	r0, [r0, #0]
    c6ae:	2800      	cmp	r0, #0
    c6b0:	f43f af6c 	beq.w	c58c <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c6b4:	4620      	mov	r0, r4
    c6b6:	230d      	movs	r3, #13
    c6b8:	f800 3b02 	strb.w	r3, [r0], #2
    c6bc:	460c      	mov	r4, r1
    c6be:	f89a 3000 	ldrb.w	r3, [sl]
    c6c2:	f10b 0202 	add.w	r2, fp, #2
    c6c6:	4601      	mov	r1, r0
    c6c8:	e760      	b.n	c58c <am_util_stdio_vsprintf+0x34>
        pcStr++;
    c6ca:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    c6d0:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6d2:	2909      	cmp	r1, #9
        bNeg = true;
    c6d4:	46ac      	mov	ip, r5
        pcStr++;
    c6d6:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6da:	f67f af7b 	bls.w	c5d4 <am_util_stdio_vsprintf+0x7c>
    c6de:	2100      	movs	r1, #0
    c6e0:	e78d      	b.n	c5fe <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6e2:	9a00      	ldr	r2, [sp, #0]
    c6e4:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c6e6:	b114      	cbz	r4, c6ee <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6e8:	6812      	ldr	r2, [r2, #0]
    c6ea:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c6ee:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6f2:	9300      	str	r3, [sp, #0]
                break;
    c6f4:	e74e      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    c6f6:	2c00      	cmp	r4, #0
    c6f8:	f43f af4c 	beq.w	c594 <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    c6fc:	9b00      	ldr	r3, [sp, #0]
    c6fe:	3307      	adds	r3, #7
    c700:	f023 0307 	bic.w	r3, r3, #7
    c704:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    c708:	9300      	str	r3, [sp, #0]
    c70a:	f7ff fcf9 	bl	c100 <__aeabi_d2f>
    c70e:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c712:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c716:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c71c:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    c71e:	f000 8372 	beq.w	ce06 <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c722:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c726:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c72a:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c72c:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c72e:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c732:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c736:	f300 8387 	bgt.w	ce48 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    c73a:	f112 0f17 	cmn.w	r2, #23
    c73e:	f2c0 8381 	blt.w	ce44 <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    c742:	2a16      	cmp	r2, #22
    c744:	f104 0601 	add.w	r6, r4, #1
    c748:	f340 82a1 	ble.w	cc8e <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    c74c:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c74e:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c750:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c754:	f2c0 82e6 	blt.w	cd24 <am_util_stdio_vsprintf+0x7cc>
    c758:	46a0      	mov	r8, r4
    i32FracPart = 0;
    c75a:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    c75c:	2800      	cmp	r0, #0
    c75e:	f000 8350 	beq.w	ce02 <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    c762:	f300 82a3 	bgt.w	ccac <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    c766:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    c768:	232d      	movs	r3, #45	; 0x2d
    c76a:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    c76e:	4632      	mov	r2, r6
    c770:	17c1      	asrs	r1, r0, #31
    c772:	f7ff fe53 	bl	c41c <uint64_to_str>
            *pcBuf++ = '-';
    c776:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    c778:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    c77a:	f898 3000 	ldrb.w	r3, [r8]
    c77e:	b90b      	cbnz	r3, c784 <am_util_stdio_vsprintf+0x22c>
    c780:	e380      	b.n	ce84 <am_util_stdio_vsprintf+0x92c>
    c782:	46b0      	mov	r8, r6
    c784:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    c788:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    c78c:	2b00      	cmp	r3, #0
    c78e:	d1f8      	bne.n	c782 <am_util_stdio_vsprintf+0x22a>
    c790:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    c794:	232e      	movs	r3, #46	; 0x2e
    c796:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    c798:	2d00      	cmp	r5, #0
    c79a:	f040 82e5 	bne.w	cd68 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    c79e:	1cb1      	adds	r1, r6, #2
    c7a0:	2330      	movs	r3, #48	; 0x30
    c7a2:	1b08      	subs	r0, r1, r4
    c7a4:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    c7a6:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c7a8:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    c7aa:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    c7ac:	f2c0 8310 	blt.w	cdd0 <am_util_stdio_vsprintf+0x878>
    c7b0:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    c7b2:	449b      	add	fp, r3
                    pcBuf += iVal;
    c7b4:	441c      	add	r4, r3
    c7b6:	e6ed      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    c7b8:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    c7bc:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7be:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c7c2:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7c4:	2300      	movs	r3, #0
                if ( iWidth )
    c7c6:	2900      	cmp	r1, #0
    c7c8:	f040 81d5 	bne.w	cb76 <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    c7cc:	ea52 0103 	orrs.w	r1, r2, r3
    c7d0:	f040 80ac 	bne.w	c92c <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    c7d4:	2c00      	cmp	r4, #0
    c7d6:	d07b      	beq.n	c8d0 <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    c7d8:	4623      	mov	r3, r4
    c7da:	2230      	movs	r2, #48	; 0x30
    c7dc:	f803 2b01 	strb.w	r2, [r3], #1
    c7e0:	2001      	movs	r0, #1
    c7e2:	461c      	mov	r4, r3
        *pcBuf = 0;
    c7e4:	2200      	movs	r2, #0
    c7e6:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    c7e8:	4483      	add	fp, r0
                break;
    c7ea:	e6d3      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    c7ec:	f04f 0900 	mov.w	r9, #0
    c7f0:	e7e4      	b.n	c7bc <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    c7f2:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7f4:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c7f8:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7fa:	4690      	mov	r8, r2
    c7fc:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    c800:	2900      	cmp	r1, #0
    c802:	f040 8213 	bne.w	cc2c <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c806:	4640      	mov	r0, r8
    c808:	4649      	mov	r1, r9
    c80a:	4622      	mov	r2, r4
    c80c:	f7ff fe06 	bl	c41c <uint64_to_str>
                if ( pcBuf )
    c810:	2c00      	cmp	r4, #0
    c812:	d05e      	beq.n	c8d2 <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    c814:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    c816:	4483      	add	fp, r0
                break;
    c818:	e6bc      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    c81a:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c81c:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    c820:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c822:	4690      	mov	r8, r2
    c824:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    c828:	f1b8 0f00 	cmp.w	r8, #0
    c82c:	f179 0300 	sbcs.w	r3, r9, #0
    c830:	f2c0 8178 	blt.w	cb24 <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    c834:	2900      	cmp	r1, #0
    c836:	d039      	beq.n	c8ac <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    c838:	ea58 0309 	orrs.w	r3, r8, r9
    c83c:	bf0c      	ite	eq
    c83e:	2701      	moveq	r7, #1
    c840:	2700      	movne	r7, #0
    while ( ui64Val )
    c842:	ea58 0309 	orrs.w	r3, r8, r9
    c846:	f000 8317 	beq.w	ce78 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    c84a:	2300      	movs	r3, #0
    c84c:	9301      	str	r3, [sp, #4]
    c84e:	4640      	mov	r0, r8
    c850:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    c852:	f7ff fd81 	bl	c358 <divu64_10>
    while ( ui64Val )
    c856:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    c85a:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    c85e:	d1f8      	bne.n	c852 <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    c860:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    c862:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    c864:	b123      	cbz	r3, c870 <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    c866:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    c868:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    c86c:	f000 8253 	beq.w	cd16 <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    c870:	2d00      	cmp	r5, #0
    c872:	f340 82c4 	ble.w	cdfe <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    c876:	1e6b      	subs	r3, r5, #1
    c878:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    c87a:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    c87c:	463d      	mov	r5, r7
    c87e:	1e58      	subs	r0, r3, #1
    c880:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    c882:	2f00      	cmp	r7, #0
    c884:	f000 8168 	beq.w	cb58 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    c888:	f805 6b01 	strb.w	r6, [r5], #1
    c88c:	4684      	mov	ip, r0
    c88e:	462f      	mov	r7, r5
    c890:	4618      	mov	r0, r3
    c892:	460a      	mov	r2, r1
    c894:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    c896:	2800      	cmp	r0, #0
    c898:	d1f0      	bne.n	c87c <am_util_stdio_vsprintf+0x324>
    c89a:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    c89c:	2c00      	cmp	r4, #0
    c89e:	f000 829f 	beq.w	cde0 <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c8a2:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    c8a4:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	f040 81b6 	bne.w	cc18 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c8ac:	4640      	mov	r0, r8
    c8ae:	4649      	mov	r1, r9
    c8b0:	4622      	mov	r2, r4
    c8b2:	f7ff fdb3 	bl	c41c <uint64_to_str>
                if ( pcBuf )
    c8b6:	2c00      	cmp	r4, #0
    c8b8:	d096      	beq.n	c7e8 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    c8ba:	4404      	add	r4, r0
    c8bc:	e7ab      	b.n	c816 <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    c8be:	b10c      	cbz	r4, c8c4 <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    c8c0:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c8c4:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c8c8:	e664      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    c8ca:	ea52 0103 	orrs.w	r1, r2, r3
    c8ce:	d12d      	bne.n	c92c <am_util_stdio_vsprintf+0x3d4>
    c8d0:	2001      	movs	r0, #1
                if ( pcBuf )
    c8d2:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    c8d4:	4483      	add	fp, r0
                break;
    c8d6:	e65d      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    c8d8:	785a      	ldrb	r2, [r3, #1]
    c8da:	2a2d      	cmp	r2, #45	; 0x2d
    c8dc:	f000 818e 	beq.w	cbfc <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c8e4:	2b09      	cmp	r3, #9
    c8e6:	f200 8298 	bhi.w	ce1a <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    c8ea:	2000      	movs	r0, #0
    bool bNeg = false;
    c8ec:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8ee:	46d6      	mov	lr, sl
    c8f0:	4653      	mov	r3, sl
    c8f2:	3001      	adds	r0, #1
    c8f4:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    c8f8:	2700      	movs	r7, #0
        ui32Val *= 10;
    c8fa:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    c8fe:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    c902:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c906:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c90a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c90e:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c910:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c914:	d9f1      	bls.n	c8fa <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    c916:	f1b8 0f00 	cmp.w	r8, #0
    c91a:	d000      	beq.n	c91e <am_util_stdio_vsprintf+0x3c6>
    c91c:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    c91e:	eb0a 030c 	add.w	r3, sl, ip
    c922:	f81a 200c 	ldrb.w	r2, [sl, ip]
    c926:	f103 0a01 	add.w	sl, r3, #1
    c92a:	e67a      	b.n	c622 <am_util_stdio_vsprintf+0xca>
    c92c:	f1b9 0f00 	cmp.w	r9, #0
    c930:	bf14      	ite	ne
    c932:	2627      	movne	r6, #39	; 0x27
    c934:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    c936:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    c93a:	2700      	movs	r7, #0
    c93c:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    c93e:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    c940:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    c944:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    c946:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    c948:	ea4f 1913 	mov.w	r9, r3, lsr #4
    c94c:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    c950:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c954:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    c958:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    c95c:	d908      	bls.n	c970 <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    c95e:	462a      	mov	r2, r5
    c960:	464b      	mov	r3, r9
    while ( ui64Val )
    c962:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    c966:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    c96a:	d00a      	beq.n	c982 <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    c96c:	4627      	mov	r7, r4
    c96e:	e7e6      	b.n	c93e <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    c970:	462a      	mov	r2, r5
    c972:	464b      	mov	r3, r9
    while ( ui64Val )
    c974:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    c978:	f107 0401 	add.w	r4, r7, #1
    c97c:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    c980:	d1f4      	bne.n	c96c <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    c982:	4626      	mov	r6, r4
    c984:	9c01      	ldr	r4, [sp, #4]
    c986:	4630      	mov	r0, r6
    c988:	2c00      	cmp	r4, #0
    c98a:	d0a2      	beq.n	c8d2 <am_util_stdio_vsprintf+0x37a>
    c98c:	ab03      	add	r3, sp, #12
    c98e:	4433      	add	r3, r6
    c990:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    c992:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c996:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    c99a:	a903      	add	r1, sp, #12
    c99c:	428b      	cmp	r3, r1
    c99e:	d1f8      	bne.n	c992 <am_util_stdio_vsprintf+0x43a>
    c9a0:	4434      	add	r4, r6
    c9a2:	4623      	mov	r3, r4
    c9a4:	e71e      	b.n	c7e4 <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    c9a6:	f8dd c000 	ldr.w	ip, [sp]
    c9aa:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	f000 8181 	beq.w	ccb6 <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    c9b4:	4618      	mov	r0, r3
    c9b6:	f810 1b01 	ldrb.w	r1, [r0], #1
    c9ba:	2900      	cmp	r1, #0
    c9bc:	f000 8231 	beq.w	ce22 <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    c9c0:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    c9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    c9c6:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    c9c8:	2a00      	cmp	r2, #0
    c9ca:	d1fa      	bne.n	c9c2 <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    c9cc:	2d00      	cmp	r5, #0
    c9ce:	dd02      	ble.n	c9d6 <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    c9d0:	42bd      	cmp	r5, r7
    c9d2:	f200 819c 	bhi.w	cd0e <am_util_stdio_vsprintf+0x7b6>
    c9d6:	f1c3 0801 	rsb	r8, r3, #1
    c9da:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    c9de:	4622      	mov	r2, r4
    c9e0:	e003      	b.n	c9ea <am_util_stdio_vsprintf+0x492>
    c9e2:	bf00      	nop
    c9e4:	10001020 	.word	0x10001020
                        *pcBuf++ = *pcStr;
    c9e8:	4622      	mov	r2, r4
    c9ea:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    c9ee:	2c00      	cmp	r4, #0
    c9f0:	f000 80b8 	beq.w	cb64 <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    c9f4:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    c9f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    c9fa:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    c9fc:	2900      	cmp	r1, #0
    c9fe:	d1f3      	bne.n	c9e8 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    ca00:	46f3      	mov	fp, lr
                if ( iWidth )
    ca02:	b1dd      	cbz	r5, ca3c <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    ca04:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    ca06:	42bd      	cmp	r5, r7
    ca08:	d918      	bls.n	ca3c <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    ca0a:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    ca0c:	2d00      	cmp	r5, #0
    ca0e:	f340 8217 	ble.w	ce40 <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    ca12:	1e6b      	subs	r3, r5, #1
    ca14:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    ca16:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    ca18:	463d      	mov	r5, r7
    ca1a:	1c51      	adds	r1, r2, #1
    ca1c:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    ca1e:	2f00      	cmp	r7, #0
    ca20:	f000 80e3 	beq.w	cbea <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    ca24:	f805 6b01 	strb.w	r6, [r5], #1
    ca28:	4686      	mov	lr, r0
    ca2a:	4618      	mov	r0, r3
    ca2c:	462f      	mov	r7, r5
    ca2e:	460a      	mov	r2, r1
    ca30:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    ca32:	2800      	cmp	r0, #0
    ca34:	d1f0      	bne.n	ca18 <am_util_stdio_vsprintf+0x4c0>
    ca36:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    ca38:	b104      	cbz	r4, ca3c <am_util_stdio_vsprintf+0x4e4>
    ca3a:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    ca3c:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    ca40:	e5a8      	b.n	c594 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    ca42:	789a      	ldrb	r2, [r3, #2]
    ca44:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    ca48:	f103 0a03 	add.w	sl, r3, #3
    ca4c:	2832      	cmp	r0, #50	; 0x32
    ca4e:	f63f af36 	bhi.w	c8be <am_util_stdio_vsprintf+0x366>
    ca52:	a301      	add	r3, pc, #4	; (adr r3, ca58 <am_util_stdio_vsprintf+0x500>)
    ca54:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    ca58:	0000c6f7 	.word	0x0000c6f7
    ca5c:	0000c8bf 	.word	0x0000c8bf
    ca60:	0000c8bf 	.word	0x0000c8bf
    ca64:	0000c8bf 	.word	0x0000c8bf
    ca68:	0000c8bf 	.word	0x0000c8bf
    ca6c:	0000c8bf 	.word	0x0000c8bf
    ca70:	0000c8bf 	.word	0x0000c8bf
    ca74:	0000c8bf 	.word	0x0000c8bf
    ca78:	0000c8bf 	.word	0x0000c8bf
    ca7c:	0000c8bf 	.word	0x0000c8bf
    ca80:	0000c8bf 	.word	0x0000c8bf
    ca84:	0000c8bf 	.word	0x0000c8bf
    ca88:	0000c8bf 	.word	0x0000c8bf
    ca8c:	0000c8bf 	.word	0x0000c8bf
    ca90:	0000c8bf 	.word	0x0000c8bf
    ca94:	0000c8bf 	.word	0x0000c8bf
    ca98:	0000c8bf 	.word	0x0000c8bf
    ca9c:	0000c8bf 	.word	0x0000c8bf
    caa0:	0000cd09 	.word	0x0000cd09
    caa4:	0000c8bf 	.word	0x0000c8bf
    caa8:	0000c8bf 	.word	0x0000c8bf
    caac:	0000c8bf 	.word	0x0000c8bf
    cab0:	0000c8bf 	.word	0x0000c8bf
    cab4:	0000c8bf 	.word	0x0000c8bf
    cab8:	0000c8bf 	.word	0x0000c8bf
    cabc:	0000c8bf 	.word	0x0000c8bf
    cac0:	0000c8bf 	.word	0x0000c8bf
    cac4:	0000c8bf 	.word	0x0000c8bf
    cac8:	0000c8bf 	.word	0x0000c8bf
    cacc:	0000c6e3 	.word	0x0000c6e3
    cad0:	0000cb49 	.word	0x0000cb49
    cad4:	0000c8bf 	.word	0x0000c8bf
    cad8:	0000c6f7 	.word	0x0000c6f7
    cadc:	0000c8bf 	.word	0x0000c8bf
    cae0:	0000c8bf 	.word	0x0000c8bf
    cae4:	0000cb49 	.word	0x0000cb49
    cae8:	0000c8bf 	.word	0x0000c8bf
    caec:	0000c8bf 	.word	0x0000c8bf
    caf0:	0000c8bf 	.word	0x0000c8bf
    caf4:	0000c8bf 	.word	0x0000c8bf
    caf8:	0000c8bf 	.word	0x0000c8bf
    cafc:	0000c8bf 	.word	0x0000c8bf
    cb00:	0000c8bf 	.word	0x0000c8bf
    cb04:	0000c8bf 	.word	0x0000c8bf
    cb08:	0000c8bf 	.word	0x0000c8bf
    cb0c:	0000c9a7 	.word	0x0000c9a7
    cb10:	0000c8bf 	.word	0x0000c8bf
    cb14:	0000cb39 	.word	0x0000cb39
    cb18:	0000c8bf 	.word	0x0000c8bf
    cb1c:	0000c8bf 	.word	0x0000c8bf
    cb20:	0000ccf3 	.word	0x0000ccf3
                    ui64Val = -i64Val;          // Get absolute value
    cb24:	f1d8 0800 	rsbs	r8, r8, #0
    cb28:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cb2c:	2900      	cmp	r1, #0
    cb2e:	d076      	beq.n	cc1e <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cb30:	2301      	movs	r3, #1
    cb32:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cb34:	2700      	movs	r7, #0
    cb36:	e68a      	b.n	c84e <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cb38:	9b00      	ldr	r3, [sp, #0]
    cb3a:	3307      	adds	r3, #7
    cb3c:	f023 0307 	bic.w	r3, r3, #7
    cb40:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cb44:	9300      	str	r3, [sp, #0]
    cb46:	e65b      	b.n	c800 <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cb48:	9b00      	ldr	r3, [sp, #0]
    cb4a:	3307      	adds	r3, #7
    cb4c:	f023 0307 	bic.w	r3, r3, #7
    cb50:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cb54:	9300      	str	r3, [sp, #0]
    cb56:	e667      	b.n	c828 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cb58:	2b00      	cmp	r3, #0
    cb5a:	f000 815b 	beq.w	ce14 <am_util_stdio_vsprintf+0x8bc>
    cb5e:	3b02      	subs	r3, #2
    cb60:	3202      	adds	r2, #2
    cb62:	e698      	b.n	c896 <am_util_stdio_vsprintf+0x33e>
    cb64:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cb68:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cb6a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cb6e:	2900      	cmp	r1, #0
    cb70:	d1fa      	bne.n	cb68 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cb72:	4683      	mov	fp, r0
    cb74:	e745      	b.n	ca02 <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cb76:	ea52 0103 	orrs.w	r1, r2, r3
    cb7a:	bf0c      	ite	eq
    cb7c:	f04f 0c01 	moveq.w	ip, #1
    cb80:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    cb84:	ea52 0103 	orrs.w	r1, r2, r3
    cb88:	d00d      	beq.n	cba6 <am_util_stdio_vsprintf+0x64e>
    cb8a:	4610      	mov	r0, r2
    cb8c:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cb8e:	0907      	lsrs	r7, r0, #4
    cb90:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    cb94:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cb98:	4638      	mov	r0, r7
    cb9a:	4671      	mov	r1, lr
    while ( ui64Val )
    cb9c:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    cba0:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    cba4:	d1f3      	bne.n	cb8e <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    cba6:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    cbaa:	2900      	cmp	r1, #0
    cbac:	f340 8125 	ble.w	cdfa <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    cbb0:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    cbb2:	2000      	movs	r0, #0
    cbb4:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    cbb6:	46ac      	mov	ip, r5
    cbb8:	1e4f      	subs	r7, r1, #1
    cbba:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    cbbe:	b175      	cbz	r5, cbde <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    cbc0:	f80c 6b01 	strb.w	r6, [ip], #1
    cbc4:	46b8      	mov	r8, r7
    cbc6:	4665      	mov	r5, ip
    cbc8:	460f      	mov	r7, r1
    cbca:	4670      	mov	r0, lr
    cbcc:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    cbce:	2f00      	cmp	r7, #0
    cbd0:	d1f1      	bne.n	cbb6 <am_util_stdio_vsprintf+0x65e>
    cbd2:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cbd4:	2c00      	cmp	r4, #0
    cbd6:	f43f ae78 	beq.w	c8ca <am_util_stdio_vsprintf+0x372>
    cbda:	4404      	add	r4, r0
                    iWidth = 0;
    cbdc:	e5f6      	b.n	c7cc <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    cbde:	2900      	cmp	r1, #0
    cbe0:	f000 8115 	beq.w	ce0e <am_util_stdio_vsprintf+0x8b6>
    cbe4:	3902      	subs	r1, #2
    cbe6:	3002      	adds	r0, #2
    cbe8:	e7f1      	b.n	cbce <am_util_stdio_vsprintf+0x676>
    cbea:	2b00      	cmp	r3, #0
    cbec:	f000 8136 	beq.w	ce5c <am_util_stdio_vsprintf+0x904>
    cbf0:	3b02      	subs	r3, #2
    cbf2:	3202      	adds	r2, #2
    cbf4:	2800      	cmp	r0, #0
    cbf6:	f47f af0f 	bne.w	ca18 <am_util_stdio_vsprintf+0x4c0>
    cbfa:	e71c      	b.n	ca36 <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    cbfc:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cbfe:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cc02:	2809      	cmp	r0, #9
        pcStr++;
    cc04:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc08:	f200 8124 	bhi.w	ce54 <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    cc0c:	2001      	movs	r0, #1
        bNeg = true;
    cc0e:	4680      	mov	r8, r0
        pcStr++;
    cc10:	469e      	mov	lr, r3
    cc12:	e66e      	b.n	c8f2 <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc14:	469b      	mov	fp, r3
    cc16:	e4c1      	b.n	c59c <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cc18:	2e20      	cmp	r6, #32
    cc1a:	f47f ae47 	bne.w	c8ac <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    cc1e:	b114      	cbz	r4, cc26 <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    cc20:	232d      	movs	r3, #45	; 0x2d
    cc22:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    cc26:	f10b 0b01 	add.w	fp, fp, #1
    cc2a:	e63f      	b.n	c8ac <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    cc2c:	ea58 0309 	orrs.w	r3, r8, r9
    cc30:	bf0c      	ite	eq
    cc32:	2701      	moveq	r7, #1
    cc34:	2700      	movne	r7, #0
    while ( ui64Val )
    cc36:	ea58 0309 	orrs.w	r3, r8, r9
    cc3a:	d008      	beq.n	cc4e <am_util_stdio_vsprintf+0x6f6>
    cc3c:	4640      	mov	r0, r8
    cc3e:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    cc40:	f7ff fb8a 	bl	c358 <divu64_10>
    while ( ui64Val )
    cc44:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cc48:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    cc4c:	d1f8      	bne.n	cc40 <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    cc4e:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    cc50:	2b00      	cmp	r3, #0
    cc52:	f340 80f3 	ble.w	ce3c <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    cc56:	3b01      	subs	r3, #1
    cc58:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    cc5a:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cc5c:	4628      	mov	r0, r5
    cc5e:	1c51      	adds	r1, r2, #1
    cc60:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    cc62:	b16d      	cbz	r5, cc80 <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    cc64:	f800 6b01 	strb.w	r6, [r0], #1
    cc68:	460a      	mov	r2, r1
    cc6a:	4605      	mov	r5, r0
    cc6c:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cc6e:	463b      	mov	r3, r7
    cc70:	2900      	cmp	r1, #0
    cc72:	d1f3      	bne.n	cc5c <am_util_stdio_vsprintf+0x704>
    cc74:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    cc76:	2c00      	cmp	r4, #0
    cc78:	f000 80da 	beq.w	ce30 <am_util_stdio_vsprintf+0x8d8>
    cc7c:	4414      	add	r4, r2
                    iWidth = 0;
    cc7e:	e5c2      	b.n	c806 <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    cc80:	2b00      	cmp	r3, #0
    cc82:	f000 80ee 	beq.w	ce62 <am_util_stdio_vsprintf+0x90a>
    cc86:	4639      	mov	r1, r7
    cc88:	3202      	adds	r2, #2
    cc8a:	1e9f      	subs	r7, r3, #2
    cc8c:	e7ef      	b.n	cc6e <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    cc8e:	2a00      	cmp	r2, #0
    cc90:	db50      	blt.n	cd34 <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc92:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    cc96:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    cc9a:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    cc9e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cca0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    cca4:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    cca8:	db3d      	blt.n	cd26 <am_util_stdio_vsprintf+0x7ce>
    ccaa:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    ccac:	4642      	mov	r2, r8
    ccae:	17c1      	asrs	r1, r0, #31
    ccb0:	f7ff fbb4 	bl	c41c <uint64_to_str>
    ccb4:	e561      	b.n	c77a <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    ccb6:	2d00      	cmp	r5, #0
    ccb8:	dd49      	ble.n	cd4e <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    ccba:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    ccbc:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    ccbe:	2200      	movs	r2, #0
    ccc0:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    ccc2:	4608      	mov	r0, r1
    ccc4:	f105 3eff 	add.w	lr, r5, #4294967295
    ccc8:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    cccc:	2900      	cmp	r1, #0
    ccce:	d044      	beq.n	cd5a <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    ccd0:	f800 6b01 	strb.w	r6, [r0], #1
    ccd4:	4642      	mov	r2, r8
    ccd6:	4601      	mov	r1, r0
    ccd8:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    ccda:	4675      	mov	r5, lr
    ccdc:	2800      	cmp	r0, #0
    ccde:	d1f0      	bne.n	ccc2 <am_util_stdio_vsprintf+0x76a>
    cce0:	7819      	ldrb	r1, [r3, #0]
    cce2:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    cce4:	b104      	cbz	r4, cce8 <am_util_stdio_vsprintf+0x790>
    cce6:	4414      	add	r4, r2
                        iWidth = 0;
    cce8:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    ccea:	2900      	cmp	r1, #0
    ccec:	f47f ae73 	bne.w	c9d6 <am_util_stdio_vsprintf+0x47e>
    ccf0:	e6a4      	b.n	ca3c <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    ccf2:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ccf6:	9b00      	ldr	r3, [sp, #0]
    ccf8:	3307      	adds	r3, #7
    ccfa:	f023 0307 	bic.w	r3, r3, #7
    ccfe:	4618      	mov	r0, r3
    cd00:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    cd04:	9000      	str	r0, [sp, #0]
    cd06:	e55e      	b.n	c7c6 <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    cd08:	f04f 0900 	mov.w	r9, #0
    cd0c:	e7f3      	b.n	ccf6 <am_util_stdio_vsprintf+0x79e>
    cd0e:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cd10:	2d00      	cmp	r5, #0
    cd12:	dde7      	ble.n	cce4 <am_util_stdio_vsprintf+0x78c>
    cd14:	e7d2      	b.n	ccbc <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    cd16:	b114      	cbz	r4, cd1e <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    cd18:	232d      	movs	r3, #45	; 0x2d
    cd1a:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    cd1e:	f10b 0b01 	add.w	fp, fp, #1
    cd22:	e5a5      	b.n	c870 <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    cd24:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    cd26:	4623      	mov	r3, r4
    cd28:	222d      	movs	r2, #45	; 0x2d
    cd2a:	f803 2b02 	strb.w	r2, [r3], #2
    cd2e:	46b0      	mov	r8, r6
    cd30:	461e      	mov	r6, r3
    cd32:	e513      	b.n	c75c <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cd34:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    cd36:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cd38:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    cd3c:	f104 0202 	add.w	r2, r4, #2
    cd40:	f2c0 8092 	blt.w	ce68 <am_util_stdio_vsprintf+0x910>
    cd44:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    cd46:	2330      	movs	r3, #48	; 0x30
    cd48:	f888 3000 	strb.w	r3, [r8]
    cd4c:	e522      	b.n	c794 <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    cd4e:	7819      	ldrb	r1, [r3, #0]
    cd50:	b909      	cbnz	r1, cd56 <am_util_stdio_vsprintf+0x7fe>
    cd52:	460f      	mov	r7, r1
    cd54:	e655      	b.n	ca02 <am_util_stdio_vsprintf+0x4aa>
    cd56:	461f      	mov	r7, r3
    cd58:	e63d      	b.n	c9d6 <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    cd5a:	2d00      	cmp	r5, #0
    cd5c:	d076      	beq.n	ce4c <am_util_stdio_vsprintf+0x8f4>
    cd5e:	4670      	mov	r0, lr
    cd60:	3202      	adds	r2, #2
    cd62:	f1a5 0e02 	sub.w	lr, r5, #2
    cd66:	e7b8      	b.n	ccda <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd68:	1b10      	subs	r0, r2, r4
    cd6a:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd6e:	429f      	cmp	r7, r3
    cd70:	bfa8      	it	ge
    cd72:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    cd74:	2f00      	cmp	r7, #0
    cd76:	f340 8083 	ble.w	ce80 <am_util_stdio_vsprintf+0x928>
    cd7a:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    cd7c:	4610      	mov	r0, r2
            i32FracPart *= 10;
    cd7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cd82:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd84:	162b      	asrs	r3, r5, #24
    cd86:	3330      	adds	r3, #48	; 0x30
    cd88:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    cd8c:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    cd8e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cd92:	d1f4      	bne.n	cd7e <am_util_stdio_vsprintf+0x826>
    cd94:	3f01      	subs	r7, #1
    cd96:	19d6      	adds	r6, r2, r7
    cd98:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cd9e:	f345 52c7 	sbfx	r2, r5, #23, #8
    cda2:	2a04      	cmp	r2, #4
    cda4:	f77f acff 	ble.w	c7a6 <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    cda8:	42a6      	cmp	r6, r4
    cdaa:	f4ff acfc 	bcc.w	c7a6 <am_util_stdio_vsprintf+0x24e>
    cdae:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    cdb0:	2630      	movs	r6, #48	; 0x30
    cdb2:	e003      	b.n	cdbc <am_util_stdio_vsprintf+0x864>
    cdb4:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    cdb6:	429c      	cmp	r4, r3
    cdb8:	f63f acf5 	bhi.w	c7a6 <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    cdbc:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    cdbe:	f813 2901 	ldrb.w	r2, [r3], #-1
    cdc2:	2a2e      	cmp	r2, #46	; 0x2e
    cdc4:	d0f7      	beq.n	cdb6 <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    cdc6:	2a39      	cmp	r2, #57	; 0x39
    cdc8:	d0f4      	beq.n	cdb4 <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    cdca:	3201      	adds	r2, #1
    cdcc:	702a      	strb	r2, [r5, #0]
                    break;
    cdce:	e4ea      	b.n	c7a6 <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cdd0:	1c43      	adds	r3, r0, #1
    cdd2:	d037      	beq.n	ce44 <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cdd4:	3002      	adds	r0, #2
    cdd6:	d037      	beq.n	ce48 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cdd8:	4b2c      	ldr	r3, [pc, #176]	; (ce8c <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cdda:	6023      	str	r3, [r4, #0]
    cddc:	2303      	movs	r3, #3
    cdde:	e4e8      	b.n	c7b2 <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cde0:	9b01      	ldr	r3, [sp, #4]
    cde2:	b113      	cbz	r3, cdea <am_util_stdio_vsprintf+0x892>
    cde4:	2e20      	cmp	r6, #32
    cde6:	f43f af1e 	beq.w	cc26 <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdea:	4640      	mov	r0, r8
    cdec:	4649      	mov	r1, r9
    cdee:	4622      	mov	r2, r4
    cdf0:	f7ff fb14 	bl	c41c <uint64_to_str>
                ui32CharCnt += iVal;
    cdf4:	4483      	add	fp, r0
                break;
    cdf6:	f7ff bbcd 	b.w	c594 <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    cdfa:	2000      	movs	r0, #0
    cdfc:	e6ea      	b.n	cbd4 <am_util_stdio_vsprintf+0x67c>
    cdfe:	2200      	movs	r2, #0
    ce00:	e54c      	b.n	c89c <am_util_stdio_vsprintf+0x344>
    ce02:	1c72      	adds	r2, r6, #1
    ce04:	e79f      	b.n	cd46 <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ce06:	4b22      	ldr	r3, [pc, #136]	; (ce90 <am_util_stdio_vsprintf+0x938>)
    ce08:	6023      	str	r3, [r4, #0]
    ce0a:	2303      	movs	r3, #3
    ce0c:	e4d1      	b.n	c7b2 <am_util_stdio_vsprintf+0x25a>
    ce0e:	4670      	mov	r0, lr
    ce10:	44f3      	add	fp, lr
    ce12:	e6df      	b.n	cbd4 <am_util_stdio_vsprintf+0x67c>
    ce14:	460a      	mov	r2, r1
    ce16:	448b      	add	fp, r1
    ce18:	e540      	b.n	c89c <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    ce1a:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce1e:	4667      	mov	r7, ip
    ce20:	e57d      	b.n	c91e <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    ce22:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    ce24:	bfc8      	it	gt
    ce26:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    ce28:	f73f af48 	bgt.w	ccbc <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    ce2c:	460f      	mov	r7, r1
    ce2e:	e5e8      	b.n	ca02 <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce30:	4622      	mov	r2, r4
    ce32:	4640      	mov	r0, r8
    ce34:	4649      	mov	r1, r9
    ce36:	f7ff faf1 	bl	c41c <uint64_to_str>
                if ( pcBuf )
    ce3a:	e54a      	b.n	c8d2 <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    ce3c:	2200      	movs	r2, #0
    ce3e:	e71a      	b.n	cc76 <am_util_stdio_vsprintf+0x71e>
    ce40:	2200      	movs	r2, #0
    ce42:	e5f9      	b.n	ca38 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    ce44:	4b12      	ldr	r3, [pc, #72]	; (ce90 <am_util_stdio_vsprintf+0x938>)
    ce46:	e7c8      	b.n	cdda <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    ce48:	4b12      	ldr	r3, [pc, #72]	; (ce94 <am_util_stdio_vsprintf+0x93c>)
    ce4a:	e7c6      	b.n	cdda <am_util_stdio_vsprintf+0x882>
    ce4c:	4642      	mov	r2, r8
    ce4e:	44c3      	add	fp, r8
    ce50:	7819      	ldrb	r1, [r3, #0]
    ce52:	e747      	b.n	cce4 <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    ce54:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce58:	2700      	movs	r7, #0
    ce5a:	e55f      	b.n	c91c <am_util_stdio_vsprintf+0x3c4>
    ce5c:	460a      	mov	r2, r1
    ce5e:	448b      	add	fp, r1
    ce60:	e5ea      	b.n	ca38 <am_util_stdio_vsprintf+0x4e0>
    ce62:	460a      	mov	r2, r1
    ce64:	448b      	add	fp, r1
    ce66:	e706      	b.n	cc76 <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    ce68:	4623      	mov	r3, r4
    ce6a:	212d      	movs	r1, #45	; 0x2d
    ce6c:	f803 1b03 	strb.w	r1, [r3], #3
    ce70:	46b0      	mov	r8, r6
    ce72:	4616      	mov	r6, r2
    ce74:	461a      	mov	r2, r3
    ce76:	e766      	b.n	cd46 <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    ce78:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    ce7a:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    ce7c:	9301      	str	r3, [sp, #4]
    ce7e:	e4f7      	b.n	c870 <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    ce80:	4611      	mov	r1, r2
    ce82:	e78a      	b.n	cd9a <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    ce84:	4632      	mov	r2, r6
    ce86:	4646      	mov	r6, r8
    ce88:	e484      	b.n	c794 <am_util_stdio_vsprintf+0x23c>
    ce8a:	bf00      	nop
    ce8c:	003f2e3f 	.word	0x003f2e3f
    ce90:	00302e30 	.word	0x00302e30
    ce94:	00232e23 	.word	0x00232e23

0000ce98 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    ce98:	b40f      	push	{r0, r1, r2, r3}
    ce9a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    ce9c:	4d0a      	ldr	r5, [pc, #40]	; (cec8 <am_util_stdio_printf+0x30>)
    ce9e:	682c      	ldr	r4, [r5, #0]
{
    cea0:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    cea2:	b154      	cbz	r4, ceba <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    cea4:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cea6:	461a      	mov	r2, r3
    cea8:	9906      	ldr	r1, [sp, #24]
    ceaa:	4808      	ldr	r0, [pc, #32]	; (cecc <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    ceac:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ceae:	f7ff fb53 	bl	c558 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    ceb2:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ceb4:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    ceb6:	4805      	ldr	r0, [pc, #20]	; (cecc <am_util_stdio_printf+0x34>)
    ceb8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    ceba:	4620      	mov	r0, r4
    cebc:	b003      	add	sp, #12
    cebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cec2:	b004      	add	sp, #16
    cec4:	4770      	bx	lr
    cec6:	bf00      	nop
    cec8:	10001134 	.word	0x10001134
    cecc:	10001024 	.word	0x10001024

0000ced0 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    ced0:	4801      	ldr	r0, [pc, #4]	; (ced8 <am_util_stdio_terminal_clear+0x8>)
    ced2:	f7ff bfe1 	b.w	ce98 <am_util_stdio_printf>
    ced6:	bf00      	nop
    ced8:	0000e3cc 	.word	0x0000e3cc

0000cedc <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cedc:	e7fe      	b.n	cedc <NMI_Handler>
    cede:	bf00      	nop

0000cee0 <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cee0:	e7fe      	b.n	cee0 <DebugMon_Handler>
    cee2:	bf00      	nop

0000cee4 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    cee4:	4811      	ldr	r0, [pc, #68]	; (cf2c <zero_loop+0x12>)
    cee6:	4912      	ldr	r1, [pc, #72]	; (cf30 <zero_loop+0x16>)
    cee8:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    ceea:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    ceee:	4811      	ldr	r0, [pc, #68]	; (cf34 <zero_loop+0x1a>)
    cef0:	6801      	ldr	r1, [r0, #0]
    cef2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cef6:	6001      	str	r1, [r0, #0]
    cef8:	f3bf 8f4f 	dsb	sy
    cefc:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    cf00:	480d      	ldr	r0, [pc, #52]	; (cf38 <zero_loop+0x1e>)
    cf02:	490e      	ldr	r1, [pc, #56]	; (cf3c <zero_loop+0x22>)
    cf04:	4a0e      	ldr	r2, [pc, #56]	; (cf40 <zero_loop+0x26>)

0000cf06 <copy_loop>:
    cf06:	f850 3b04 	ldr.w	r3, [r0], #4
    cf0a:	f841 3b04 	str.w	r3, [r1], #4
    cf0e:	4291      	cmp	r1, r2
    cf10:	dbf9      	blt.n	cf06 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    cf12:	480c      	ldr	r0, [pc, #48]	; (cf44 <zero_loop+0x2a>)
    cf14:	490c      	ldr	r1, [pc, #48]	; (cf48 <zero_loop+0x2e>)
    cf16:	f04f 0200 	mov.w	r2, #0

0000cf1a <zero_loop>:
    cf1a:	4288      	cmp	r0, r1
    cf1c:	bfb8      	it	lt
    cf1e:	f840 2b04 	strlt.w	r2, [r0], #4
    cf22:	dbfa      	blt.n	cf1a <zero_loop>
    main();
    cf24:	f7ff f93c 	bl	c1a0 <main>
    __asm("    bkpt     ");
    cf28:	be00      	bkpt	0x0000
}
    cf2a:	0000      	.short	0x0000
    cf2c:	e000ed08 	.word	0xe000ed08
    cf30:	0000c000 	.word	0x0000c000
    cf34:	e000ed88 	.word	0xe000ed88
    cf38:	0000e6bc 	.word	0x0000e6bc
    cf3c:	10001000 	.word	0x10001000
    cf40:	10001020 	.word	0x10001020
    cf44:	10001020 	.word	0x10001020
    cf48:	10001200 	.word	0x10001200

0000cf4c <am_bsp_uart_string_print>:
    cf4c:	b510      	push	{r4, lr}
    cf4e:	b086      	sub	sp, #24
    cf50:	7804      	ldrb	r4, [r0, #0]
    cf52:	2300      	movs	r3, #0
    cf54:	9300      	str	r3, [sp, #0]
    cf56:	b13c      	cbz	r4, cf68 <am_bsp_uart_string_print+0x1c>
    cf58:	4603      	mov	r3, r0
    cf5a:	f1c0 0201 	rsb	r2, r0, #1
    cf5e:	18d4      	adds	r4, r2, r3
    cf60:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cf64:	2900      	cmp	r1, #0
    cf66:	d1fa      	bne.n	cf5e <am_bsp_uart_string_print+0x12>
    cf68:	4b09      	ldr	r3, [pc, #36]	; (cf90 <am_bsp_uart_string_print+0x44>)
    cf6a:	9002      	str	r0, [sp, #8]
    cf6c:	2200      	movs	r2, #0
    cf6e:	6818      	ldr	r0, [r3, #0]
    cf70:	9403      	str	r4, [sp, #12]
    cf72:	f04f 33ff 	mov.w	r3, #4294967295
    cf76:	a901      	add	r1, sp, #4
    cf78:	9304      	str	r3, [sp, #16]
    cf7a:	9201      	str	r2, [sp, #4]
    cf7c:	f8cd d014 	str.w	sp, [sp, #20]
    cf80:	f000 febc 	bl	dcfc <am_hal_uart_transfer>
    cf84:	9b00      	ldr	r3, [sp, #0]
    cf86:	42a3      	cmp	r3, r4
    cf88:	d000      	beq.n	cf8c <am_bsp_uart_string_print+0x40>
    cf8a:	e7fe      	b.n	cf8a <am_bsp_uart_string_print+0x3e>
    cf8c:	b006      	add	sp, #24
    cf8e:	bd10      	pop	{r4, pc}
    cf90:	10001124 	.word	0x10001124

0000cf94 <am_bsp_low_power_init>:
    cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf96:	f000 fb29 	bl	d5ec <am_hal_itm_disable>
    cf9a:	2000      	movs	r0, #0
    cf9c:	f7ff fad6 	bl	c54c <am_util_stdio_printf_init>
    cfa0:	4b12      	ldr	r3, [pc, #72]	; (cfec <am_bsp_low_power_init+0x58>)
    cfa2:	4f13      	ldr	r7, [pc, #76]	; (cff0 <am_bsp_low_power_init+0x5c>)
    cfa4:	6819      	ldr	r1, [r3, #0]
    cfa6:	2021      	movs	r0, #33	; 0x21
    cfa8:	f000 f95a 	bl	d260 <am_hal_gpio_pinconfig>
    cfac:	f000 fc60 	bl	d870 <am_hal_pwrctrl_low_power_init>
    cfb0:	2001      	movs	r0, #1
    cfb2:	f000 fca7 	bl	d904 <am_hal_rtc_osc_select>
    cfb6:	2100      	movs	r1, #0
    cfb8:	2003      	movs	r0, #3
    cfba:	f000 f8b5 	bl	d128 <am_hal_clkgen_control>
    cfbe:	f000 fcad 	bl	d91c <am_hal_rtc_osc_disable>
    cfc2:	4b0c      	ldr	r3, [pc, #48]	; (cff4 <am_bsp_low_power_init+0x60>)
    cfc4:	681e      	ldr	r6, [r3, #0]
    cfc6:	2400      	movs	r4, #0
    cfc8:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    cfcc:	4631      	mov	r1, r6
    cfce:	4628      	mov	r0, r5
    cfd0:	f000 f946 	bl	d260 <am_hal_gpio_pinconfig>
    cfd4:	2103      	movs	r1, #3
    cfd6:	4628      	mov	r0, r5
    cfd8:	f000 fab6 	bl	d548 <am_hal_gpio_state_write>
    cfdc:	3401      	adds	r4, #1
    cfde:	4628      	mov	r0, r5
    cfe0:	2100      	movs	r1, #0
    cfe2:	f000 fab1 	bl	d548 <am_hal_gpio_state_write>
    cfe6:	2c04      	cmp	r4, #4
    cfe8:	d1ee      	bne.n	cfc8 <am_bsp_low_power_init+0x34>
    cfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfec:	0000e548 	.word	0x0000e548
    cff0:	10001000 	.word	0x10001000
    cff4:	0000e54c 	.word	0x0000e54c

0000cff8 <am_bsp_debug_printf_disable>:
    cff8:	b538      	push	{r3, r4, r5, lr}
    cffa:	4b17      	ldr	r3, [pc, #92]	; (d058 <am_bsp_debug_printf_disable+0x60>)
    cffc:	681c      	ldr	r4, [r3, #0]
    cffe:	2c01      	cmp	r4, #1
    d000:	d002      	beq.n	d008 <am_bsp_debug_printf_disable+0x10>
    d002:	2c02      	cmp	r4, #2
    d004:	d00c      	beq.n	d020 <am_bsp_debug_printf_disable+0x28>
    d006:	bd38      	pop	{r3, r4, r5, pc}
    d008:	f000 faf0 	bl	d5ec <am_hal_itm_disable>
    d00c:	2000      	movs	r0, #0
    d00e:	f7ff fa9d 	bl	c54c <am_util_stdio_printf_init>
    d012:	4b12      	ldr	r3, [pc, #72]	; (d05c <am_bsp_debug_printf_disable+0x64>)
    d014:	2021      	movs	r0, #33	; 0x21
    d016:	6819      	ldr	r1, [r3, #0]
    d018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d01c:	f000 b920 	b.w	d260 <am_hal_gpio_pinconfig>
    d020:	4d0f      	ldr	r5, [pc, #60]	; (d060 <am_bsp_debug_printf_disable+0x68>)
    d022:	6828      	ldr	r0, [r5, #0]
    d024:	f001 f8a4 	bl	e170 <am_hal_uart_tx_flush>
    d028:	2000      	movs	r0, #0
    d02a:	f7ff fa8f 	bl	c54c <am_util_stdio_printf_init>
    d02e:	4621      	mov	r1, r4
    d030:	2200      	movs	r2, #0
    d032:	6828      	ldr	r0, [r5, #0]
    d034:	f000 fce4 	bl	da00 <am_hal_uart_power_control>
    d038:	6828      	ldr	r0, [r5, #0]
    d03a:	f000 fccd 	bl	d9d8 <am_hal_uart_deinitialize>
    d03e:	4b07      	ldr	r3, [pc, #28]	; (d05c <am_bsp_debug_printf_disable+0x64>)
    d040:	681c      	ldr	r4, [r3, #0]
    d042:	2030      	movs	r0, #48	; 0x30
    d044:	4621      	mov	r1, r4
    d046:	f000 f90b 	bl	d260 <am_hal_gpio_pinconfig>
    d04a:	4621      	mov	r1, r4
    d04c:	2031      	movs	r0, #49	; 0x31
    d04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d052:	f000 b905 	b.w	d260 <am_hal_gpio_pinconfig>
    d056:	bf00      	nop
    d058:	10001128 	.word	0x10001128
    d05c:	0000e548 	.word	0x0000e548
    d060:	10001124 	.word	0x10001124

0000d064 <am_bsp_uart_printf_enable>:
    d064:	b510      	push	{r4, lr}
    d066:	4c10      	ldr	r4, [pc, #64]	; (d0a8 <am_bsp_uart_printf_enable+0x44>)
    d068:	4b10      	ldr	r3, [pc, #64]	; (d0ac <am_bsp_uart_printf_enable+0x48>)
    d06a:	4621      	mov	r1, r4
    d06c:	2202      	movs	r2, #2
    d06e:	2000      	movs	r0, #0
    d070:	601a      	str	r2, [r3, #0]
    d072:	f000 fc89 	bl	d988 <am_hal_uart_initialize>
    d076:	2200      	movs	r2, #0
    d078:	4611      	mov	r1, r2
    d07a:	6820      	ldr	r0, [r4, #0]
    d07c:	f000 fcc0 	bl	da00 <am_hal_uart_power_control>
    d080:	6820      	ldr	r0, [r4, #0]
    d082:	490b      	ldr	r1, [pc, #44]	; (d0b0 <am_bsp_uart_printf_enable+0x4c>)
    d084:	f000 fd2e 	bl	dae4 <am_hal_uart_configure>
    d088:	4b0a      	ldr	r3, [pc, #40]	; (d0b4 <am_bsp_uart_printf_enable+0x50>)
    d08a:	2030      	movs	r0, #48	; 0x30
    d08c:	6819      	ldr	r1, [r3, #0]
    d08e:	f000 f8e7 	bl	d260 <am_hal_gpio_pinconfig>
    d092:	4b09      	ldr	r3, [pc, #36]	; (d0b8 <am_bsp_uart_printf_enable+0x54>)
    d094:	2031      	movs	r0, #49	; 0x31
    d096:	6819      	ldr	r1, [r3, #0]
    d098:	f000 f8e2 	bl	d260 <am_hal_gpio_pinconfig>
    d09c:	4807      	ldr	r0, [pc, #28]	; (d0bc <am_bsp_uart_printf_enable+0x58>)
    d09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0a2:	f7ff ba53 	b.w	c54c <am_util_stdio_printf_init>
    d0a6:	bf00      	nop
    d0a8:	10001124 	.word	0x10001124
    d0ac:	10001128 	.word	0x10001128
    d0b0:	0000e3e0 	.word	0x0000e3e0
    d0b4:	0000e40c 	.word	0x0000e40c
    d0b8:	0000e408 	.word	0x0000e408
    d0bc:	0000cf4d 	.word	0x0000cf4d

0000d0c0 <am_hal_cachectrl_config>:
    d0c0:	b530      	push	{r4, r5, lr}
    d0c2:	b083      	sub	sp, #12
    d0c4:	4605      	mov	r5, r0
    d0c6:	f000 fa89 	bl	d5dc <am_hal_interrupt_master_disable>
    d0ca:	4c11      	ldr	r4, [pc, #68]	; (d110 <am_hal_cachectrl_config+0x50>)
    d0cc:	9001      	str	r0, [sp, #4]
    d0ce:	6823      	ldr	r3, [r4, #0]
    d0d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d0d4:	6023      	str	r3, [r4, #0]
    d0d6:	9801      	ldr	r0, [sp, #4]
    d0d8:	f000 fa84 	bl	d5e4 <am_hal_interrupt_master_set>
    d0dc:	78eb      	ldrb	r3, [r5, #3]
    d0de:	782a      	ldrb	r2, [r5, #0]
    d0e0:	78a8      	ldrb	r0, [r5, #2]
    d0e2:	7869      	ldrb	r1, [r5, #1]
    d0e4:	005b      	lsls	r3, r3, #1
    d0e6:	0112      	lsls	r2, r2, #4
    d0e8:	b2d2      	uxtb	r2, r2
    d0ea:	f003 0302 	and.w	r3, r3, #2
    d0ee:	4313      	orrs	r3, r2
    d0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d0f4:	0080      	lsls	r0, r0, #2
    d0f6:	f000 000c 	and.w	r0, r0, #12
    d0fa:	020a      	lsls	r2, r1, #8
    d0fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d100:	4303      	orrs	r3, r0
    d102:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d106:	4313      	orrs	r3, r2
    d108:	2000      	movs	r0, #0
    d10a:	6023      	str	r3, [r4, #0]
    d10c:	b003      	add	sp, #12
    d10e:	bd30      	pop	{r4, r5, pc}
    d110:	40018000 	.word	0x40018000

0000d114 <am_hal_cachectrl_enable>:
    d114:	4a03      	ldr	r2, [pc, #12]	; (d124 <am_hal_cachectrl_enable+0x10>)
    d116:	6813      	ldr	r3, [r2, #0]
    d118:	f043 0301 	orr.w	r3, r3, #1
    d11c:	6013      	str	r3, [r2, #0]
    d11e:	2000      	movs	r0, #0
    d120:	4770      	bx	lr
    d122:	bf00      	nop
    d124:	40018000 	.word	0x40018000

0000d128 <am_hal_clkgen_control>:
    d128:	4b32      	ldr	r3, [pc, #200]	; (d1f4 <am_hal_clkgen_control+0xcc>)
    d12a:	681a      	ldr	r2, [r3, #0]
    d12c:	b912      	cbnz	r2, d134 <am_hal_clkgen_control+0xc>
    d12e:	4a32      	ldr	r2, [pc, #200]	; (d1f8 <am_hal_clkgen_control+0xd0>)
    d130:	6812      	ldr	r2, [r2, #0]
    d132:	601a      	str	r2, [r3, #0]
    d134:	2809      	cmp	r0, #9
    d136:	d85a      	bhi.n	d1ee <am_hal_clkgen_control+0xc6>
    d138:	e8df f000 	tbb	[pc, r0]
    d13c:	261e160d 	.word	0x261e160d
    d140:	4640362e 	.word	0x4640362e
    d144:	054e      	.short	0x054e
    d146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d14a:	2000      	movs	r0, #0
    d14c:	6a1a      	ldr	r2, [r3, #32]
    d14e:	f36f 0200 	bfc	r2, #0, #1
    d152:	621a      	str	r2, [r3, #32]
    d154:	4770      	bx	lr
    d156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d15a:	2200      	movs	r2, #0
    d15c:	2147      	movs	r1, #71	; 0x47
    d15e:	6159      	str	r1, [r3, #20]
    d160:	4610      	mov	r0, r2
    d162:	619a      	str	r2, [r3, #24]
    d164:	615a      	str	r2, [r3, #20]
    d166:	4770      	bx	lr
    d168:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d16c:	2000      	movs	r0, #0
    d16e:	68d3      	ldr	r3, [r2, #12]
    d170:	f023 0301 	bic.w	r3, r3, #1
    d174:	60d3      	str	r3, [r2, #12]
    d176:	4770      	bx	lr
    d178:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d17c:	2000      	movs	r0, #0
    d17e:	68d3      	ldr	r3, [r2, #12]
    d180:	f023 0302 	bic.w	r3, r3, #2
    d184:	60d3      	str	r3, [r2, #12]
    d186:	4770      	bx	lr
    d188:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d18c:	2000      	movs	r0, #0
    d18e:	68d3      	ldr	r3, [r2, #12]
    d190:	f043 0301 	orr.w	r3, r3, #1
    d194:	60d3      	str	r3, [r2, #12]
    d196:	4770      	bx	lr
    d198:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d19c:	2000      	movs	r0, #0
    d19e:	68d3      	ldr	r3, [r2, #12]
    d1a0:	f043 0302 	orr.w	r3, r3, #2
    d1a4:	60d3      	str	r3, [r2, #12]
    d1a6:	4770      	bx	lr
    d1a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d1ac:	2200      	movs	r2, #0
    d1ae:	2047      	movs	r0, #71	; 0x47
    d1b0:	2101      	movs	r1, #1
    d1b2:	6158      	str	r0, [r3, #20]
    d1b4:	6199      	str	r1, [r3, #24]
    d1b6:	4610      	mov	r0, r2
    d1b8:	615a      	str	r2, [r3, #20]
    d1ba:	4770      	bx	lr
    d1bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d1c0:	2000      	movs	r0, #0
    d1c2:	68da      	ldr	r2, [r3, #12]
    d1c4:	60da      	str	r2, [r3, #12]
    d1c6:	4770      	bx	lr
    d1c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d1cc:	2000      	movs	r0, #0
    d1ce:	68d3      	ldr	r3, [r2, #12]
    d1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d1d4:	60d3      	str	r3, [r2, #12]
    d1d6:	4770      	bx	lr
    d1d8:	b139      	cbz	r1, d1ea <am_hal_clkgen_control+0xc2>
    d1da:	680b      	ldr	r3, [r1, #0]
    d1dc:	f043 0301 	orr.w	r3, r3, #1
    d1e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d1e4:	2000      	movs	r0, #0
    d1e6:	6213      	str	r3, [r2, #32]
    d1e8:	4770      	bx	lr
    d1ea:	4b04      	ldr	r3, [pc, #16]	; (d1fc <am_hal_clkgen_control+0xd4>)
    d1ec:	e7f8      	b.n	d1e0 <am_hal_clkgen_control+0xb8>
    d1ee:	2006      	movs	r0, #6
    d1f0:	4770      	bx	lr
    d1f2:	bf00      	nop
    d1f4:	1000112c 	.word	0x1000112c
    d1f8:	4ffff000 	.word	0x4ffff000
    d1fc:	0025b801 	.word	0x0025b801

0000d200 <am_hal_flash_delay>:
    d200:	4b00      	ldr	r3, [pc, #0]	; (d204 <am_hal_flash_delay+0x4>)
    d202:	4718      	bx	r3
    d204:	0800009d 	.word	0x0800009d

0000d208 <am_hal_flash_delay_status_check>:
    d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d20c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d210:	460d      	mov	r5, r1
    d212:	4616      	mov	r6, r2
    d214:	461f      	mov	r7, r3
    d216:	b17c      	cbz	r4, d238 <am_hal_flash_delay_status_check+0x30>
    d218:	4604      	mov	r4, r0
    d21a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d25c <am_hal_flash_delay_status_check+0x54>
    d21e:	e002      	b.n	d226 <am_hal_flash_delay_status_check+0x1e>
    d220:	b1c4      	cbz	r4, d254 <am_hal_flash_delay_status_check+0x4c>
    d222:	47c0      	blx	r8
    d224:	3c01      	subs	r4, #1
    d226:	682b      	ldr	r3, [r5, #0]
    d228:	4033      	ands	r3, r6
    d22a:	429f      	cmp	r7, r3
    d22c:	f04f 0001 	mov.w	r0, #1
    d230:	d1f6      	bne.n	d220 <am_hal_flash_delay_status_check+0x18>
    d232:	2000      	movs	r0, #0
    d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d238:	f8df 8020 	ldr.w	r8, [pc, #32]	; d25c <am_hal_flash_delay_status_check+0x54>
    d23c:	4604      	mov	r4, r0
    d23e:	e002      	b.n	d246 <am_hal_flash_delay_status_check+0x3e>
    d240:	b144      	cbz	r4, d254 <am_hal_flash_delay_status_check+0x4c>
    d242:	47c0      	blx	r8
    d244:	3c01      	subs	r4, #1
    d246:	682b      	ldr	r3, [r5, #0]
    d248:	4033      	ands	r3, r6
    d24a:	429f      	cmp	r7, r3
    d24c:	f04f 0001 	mov.w	r0, #1
    d250:	d0f6      	beq.n	d240 <am_hal_flash_delay_status_check+0x38>
    d252:	e7ee      	b.n	d232 <am_hal_flash_delay_status_check+0x2a>
    d254:	2004      	movs	r0, #4
    d256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d25a:	bf00      	nop
    d25c:	0800009d 	.word	0x0800009d

0000d260 <am_hal_gpio_pinconfig>:
    d260:	2831      	cmp	r0, #49	; 0x31
    d262:	d901      	bls.n	d268 <am_hal_gpio_pinconfig+0x8>
    d264:	2006      	movs	r0, #6
    d266:	4770      	bx	lr
    d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d26c:	f001 0307 	and.w	r3, r1, #7
    d270:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d274:	b085      	sub	sp, #20
    d276:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d27a:	d014      	beq.n	d2a6 <am_hal_gpio_pinconfig+0x46>
    d27c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d280:	1db4      	adds	r4, r6, #6
    d282:	f004 0407 	and.w	r4, r4, #7
    d286:	2c03      	cmp	r4, #3
    d288:	f042 0201 	orr.w	r2, r2, #1
    d28c:	f200 80ae 	bhi.w	d3ec <am_hal_gpio_pinconfig+0x18c>
    d290:	4c85      	ldr	r4, [pc, #532]	; (d4a8 <am_hal_gpio_pinconfig+0x248>)
    d292:	5c24      	ldrb	r4, [r4, r0]
    d294:	07e7      	lsls	r7, r4, #31
    d296:	d403      	bmi.n	d2a0 <am_hal_gpio_pinconfig+0x40>
    d298:	4884      	ldr	r0, [pc, #528]	; (d4ac <am_hal_gpio_pinconfig+0x24c>)
    d29a:	b005      	add	sp, #20
    d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2a0:	3e02      	subs	r6, #2
    d2a2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d2a6:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d2aa:	2c00      	cmp	r4, #0
    d2ac:	f040 8098 	bne.w	d3e0 <am_hal_gpio_pinconfig+0x180>
    d2b0:	4c7f      	ldr	r4, [pc, #508]	; (d4b0 <am_hal_gpio_pinconfig+0x250>)
    d2b2:	4d80      	ldr	r5, [pc, #512]	; (d4b4 <am_hal_gpio_pinconfig+0x254>)
    d2b4:	5c24      	ldrb	r4, [r4, r0]
    d2b6:	5c2d      	ldrb	r5, [r5, r0]
    d2b8:	411c      	asrs	r4, r3
    d2ba:	f014 0f01 	tst.w	r4, #1
    d2be:	bf0c      	ite	eq
    d2c0:	2400      	moveq	r4, #0
    d2c2:	2402      	movne	r4, #2
    d2c4:	42ab      	cmp	r3, r5
    d2c6:	ea42 0204 	orr.w	r2, r2, r4
    d2ca:	f000 809b 	beq.w	d404 <am_hal_gpio_pinconfig+0x1a4>
    d2ce:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d2d2:	105d      	asrs	r5, r3, #1
    d2d4:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d2d8:	00db      	lsls	r3, r3, #3
    d2da:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d2de:	f003 0408 	and.w	r4, r3, #8
    d2e2:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d2e6:	f007 060c 	and.w	r6, r7, #12
    d2ea:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d2ee:	2e04      	cmp	r6, #4
    d2f0:	ea43 0304 	orr.w	r3, r3, r4
    d2f4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d2f8:	462c      	mov	r4, r5
    d2fa:	f000 8090 	beq.w	d41e <am_hal_gpio_pinconfig+0x1be>
    d2fe:	4c6e      	ldr	r4, [pc, #440]	; (d4b8 <am_hal_gpio_pinconfig+0x258>)
    d300:	6824      	ldr	r4, [r4, #0]
    d302:	ebc4 0901 	rsb	r9, r4, r1
    d306:	fab9 f989 	clz	r9, r9
    d30a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d30e:	f017 0f60 	tst.w	r7, #96	; 0x60
    d312:	bf04      	itt	eq
    d314:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d318:	f364 0300 	bfieq	r3, r4, #0, #1
    d31c:	0084      	lsls	r4, r0, #2
    d31e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d322:	2902      	cmp	r1, #2
    d324:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d328:	d07c      	beq.n	d424 <am_hal_gpio_pinconfig+0x1c4>
    d32a:	f200 8082 	bhi.w	d432 <am_hal_gpio_pinconfig+0x1d2>
    d32e:	2901      	cmp	r1, #1
    d330:	bf08      	it	eq
    d332:	f042 0204 	orreq.w	r2, r2, #4
    d336:	f005 0518 	and.w	r5, r5, #24
    d33a:	f04f 0800 	mov.w	r8, #0
    d33e:	f004 041c 	and.w	r4, r4, #28
    d342:	0841      	lsrs	r1, r0, #1
    d344:	f020 0a03 	bic.w	sl, r0, #3
    d348:	270f      	movs	r7, #15
    d34a:	f021 0103 	bic.w	r1, r1, #3
    d34e:	40a7      	lsls	r7, r4
    d350:	26ff      	movs	r6, #255	; 0xff
    d352:	fa03 f404 	lsl.w	r4, r3, r4
    d356:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d35a:	40ae      	lsls	r6, r5
    d35c:	9101      	str	r1, [sp, #4]
    d35e:	9300      	str	r3, [sp, #0]
    d360:	4683      	mov	fp, r0
    d362:	fa02 f505 	lsl.w	r5, r2, r5
    d366:	f000 f939 	bl	d5dc <am_hal_interrupt_master_disable>
    d36a:	9b00      	ldr	r3, [sp, #0]
    d36c:	9003      	str	r0, [sp, #12]
    d36e:	43ff      	mvns	r7, r7
    d370:	43f6      	mvns	r6, r6
    d372:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d376:	f8df e160 	ldr.w	lr, [pc, #352]	; d4d8 <am_hal_gpio_pinconfig+0x278>
    d37a:	4850      	ldr	r0, [pc, #320]	; (d4bc <am_hal_gpio_pinconfig+0x25c>)
    d37c:	9901      	ldr	r1, [sp, #4]
    d37e:	f1b9 0f00 	cmp.w	r9, #0
    d382:	d00b      	beq.n	d39c <am_hal_gpio_pinconfig+0x13c>
    d384:	f00b 021f 	and.w	r2, fp, #31
    d388:	f04f 0901 	mov.w	r9, #1
    d38c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    d390:	f8df c148 	ldr.w	ip, [pc, #328]	; d4dc <am_hal_gpio_pinconfig+0x27c>
    d394:	fa09 f202 	lsl.w	r2, r9, r2
    d398:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    d39c:	4a48      	ldr	r2, [pc, #288]	; (d4c0 <am_hal_gpio_pinconfig+0x260>)
    d39e:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d3a2:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    d3a6:	f8d3 c000 	ldr.w	ip, [r3]
    d3aa:	ea06 0c0c 	and.w	ip, r6, ip
    d3ae:	ea4c 0505 	orr.w	r5, ip, r5
    d3b2:	601d      	str	r5, [r3, #0]
    d3b4:	f851 300e 	ldr.w	r3, [r1, lr]
    d3b8:	403b      	ands	r3, r7
    d3ba:	4323      	orrs	r3, r4
    d3bc:	f841 300e 	str.w	r3, [r1, lr]
    d3c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    d3c4:	401e      	ands	r6, r3
    d3c6:	2400      	movs	r4, #0
    d3c8:	ea46 0608 	orr.w	r6, r6, r8
    d3cc:	f84a 6000 	str.w	r6, [sl, r0]
    d3d0:	6614      	str	r4, [r2, #96]	; 0x60
    d3d2:	9803      	ldr	r0, [sp, #12]
    d3d4:	f000 f906 	bl	d5e4 <am_hal_interrupt_master_set>
    d3d8:	4620      	mov	r0, r4
    d3da:	b005      	add	sp, #20
    d3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3e0:	2c01      	cmp	r4, #1
    d3e2:	d015      	beq.n	d410 <am_hal_gpio_pinconfig+0x1b0>
    d3e4:	2c02      	cmp	r4, #2
    d3e6:	d032      	beq.n	d44e <am_hal_gpio_pinconfig+0x1ee>
    d3e8:	4836      	ldr	r0, [pc, #216]	; (d4c4 <am_hal_gpio_pinconfig+0x264>)
    d3ea:	e756      	b.n	d29a <am_hal_gpio_pinconfig+0x3a>
    d3ec:	2dc0      	cmp	r5, #192	; 0xc0
    d3ee:	d029      	beq.n	d444 <am_hal_gpio_pinconfig+0x1e4>
    d3f0:	2d20      	cmp	r5, #32
    d3f2:	f47f af58 	bne.w	d2a6 <am_hal_gpio_pinconfig+0x46>
    d3f6:	4c2c      	ldr	r4, [pc, #176]	; (d4a8 <am_hal_gpio_pinconfig+0x248>)
    d3f8:	5c24      	ldrb	r4, [r4, r0]
    d3fa:	f014 0f09 	tst.w	r4, #9
    d3fe:	f47f af4b 	bne.w	d298 <am_hal_gpio_pinconfig+0x38>
    d402:	e750      	b.n	d2a6 <am_hal_gpio_pinconfig+0x46>
    d404:	f3c1 4402 	ubfx	r4, r1, #16, #3
    d408:	2c07      	cmp	r4, #7
    d40a:	d127      	bne.n	d45c <am_hal_gpio_pinconfig+0x1fc>
    d40c:	482e      	ldr	r0, [pc, #184]	; (d4c8 <am_hal_gpio_pinconfig+0x268>)
    d40e:	e744      	b.n	d29a <am_hal_gpio_pinconfig+0x3a>
    d410:	4c25      	ldr	r4, [pc, #148]	; (d4a8 <am_hal_gpio_pinconfig+0x248>)
    d412:	5c24      	ldrb	r4, [r4, r0]
    d414:	07a5      	lsls	r5, r4, #30
    d416:	d5e7      	bpl.n	d3e8 <am_hal_gpio_pinconfig+0x188>
    d418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d41c:	e748      	b.n	d2b0 <am_hal_gpio_pinconfig+0x50>
    d41e:	f04f 0901 	mov.w	r9, #1
    d422:	e774      	b.n	d30e <am_hal_gpio_pinconfig+0xae>
    d424:	f005 0518 	and.w	r5, r5, #24
    d428:	f04f 0801 	mov.w	r8, #1
    d42c:	fa08 f805 	lsl.w	r8, r8, r5
    d430:	e785      	b.n	d33e <am_hal_gpio_pinconfig+0xde>
    d432:	f005 0518 	and.w	r5, r5, #24
    d436:	f04f 0801 	mov.w	r8, #1
    d43a:	f042 0204 	orr.w	r2, r2, #4
    d43e:	fa08 f805 	lsl.w	r8, r8, r5
    d442:	e77c      	b.n	d33e <am_hal_gpio_pinconfig+0xde>
    d444:	2814      	cmp	r0, #20
    d446:	f43f af2e 	beq.w	d2a6 <am_hal_gpio_pinconfig+0x46>
    d44a:	4820      	ldr	r0, [pc, #128]	; (d4cc <am_hal_gpio_pinconfig+0x26c>)
    d44c:	e725      	b.n	d29a <am_hal_gpio_pinconfig+0x3a>
    d44e:	4c16      	ldr	r4, [pc, #88]	; (d4a8 <am_hal_gpio_pinconfig+0x248>)
    d450:	5c24      	ldrb	r4, [r4, r0]
    d452:	0764      	lsls	r4, r4, #29
    d454:	d5c8      	bpl.n	d3e8 <am_hal_gpio_pinconfig+0x188>
    d456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d45a:	e729      	b.n	d2b0 <am_hal_gpio_pinconfig+0x50>
    d45c:	4d1c      	ldr	r5, [pc, #112]	; (d4d0 <am_hal_gpio_pinconfig+0x270>)
    d45e:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    d462:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    d466:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    d46a:	429e      	cmp	r6, r3
    d46c:	d00c      	beq.n	d488 <am_hal_gpio_pinconfig+0x228>
    d46e:	0084      	lsls	r4, r0, #2
    d470:	4425      	add	r5, r4
    d472:	786e      	ldrb	r6, [r5, #1]
    d474:	429e      	cmp	r6, r3
    d476:	d013      	beq.n	d4a0 <am_hal_gpio_pinconfig+0x240>
    d478:	78ae      	ldrb	r6, [r5, #2]
    d47a:	429e      	cmp	r6, r3
    d47c:	d00e      	beq.n	d49c <am_hal_gpio_pinconfig+0x23c>
    d47e:	78ed      	ldrb	r5, [r5, #3]
    d480:	429d      	cmp	r5, r3
    d482:	d00f      	beq.n	d4a4 <am_hal_gpio_pinconfig+0x244>
    d484:	4813      	ldr	r0, [pc, #76]	; (d4d4 <am_hal_gpio_pinconfig+0x274>)
    d486:	e708      	b.n	d29a <am_hal_gpio_pinconfig+0x3a>
    d488:	2300      	movs	r3, #0
    d48a:	0084      	lsls	r4, r0, #2
    d48c:	005b      	lsls	r3, r3, #1
    d48e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d492:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    d496:	f04f 0900 	mov.w	r9, #0
    d49a:	e740      	b.n	d31e <am_hal_gpio_pinconfig+0xbe>
    d49c:	2302      	movs	r3, #2
    d49e:	e7f5      	b.n	d48c <am_hal_gpio_pinconfig+0x22c>
    d4a0:	2301      	movs	r3, #1
    d4a2:	e7f3      	b.n	d48c <am_hal_gpio_pinconfig+0x22c>
    d4a4:	2303      	movs	r3, #3
    d4a6:	e7f1      	b.n	d48c <am_hal_gpio_pinconfig+0x22c>
    d4a8:	0000e418 	.word	0x0000e418
    d4ac:	08000100 	.word	0x08000100
    d4b0:	0000e514 	.word	0x0000e514
    d4b4:	0000e550 	.word	0x0000e550
    d4b8:	0000e548 	.word	0x0000e548
    d4bc:	400100e0 	.word	0x400100e0
    d4c0:	40010000 	.word	0x40010000
    d4c4:	08000102 	.word	0x08000102
    d4c8:	08000103 	.word	0x08000103
    d4cc:	08000101 	.word	0x08000101
    d4d0:	0000e44c 	.word	0x0000e44c
    d4d4:	08000104 	.word	0x08000104
    d4d8:	40010040 	.word	0x40010040
    d4dc:	400100b4 	.word	0x400100b4

0000d4e0 <am_hal_gpio_state_read>:
    d4e0:	b1ca      	cbz	r2, d516 <am_hal_gpio_state_read+0x36>
    d4e2:	2831      	cmp	r0, #49	; 0x31
    d4e4:	d904      	bls.n	d4f0 <am_hal_gpio_state_read+0x10>
    d4e6:	f04f 33ff 	mov.w	r3, #4294967295
    d4ea:	6013      	str	r3, [r2, #0]
    d4ec:	2005      	movs	r0, #5
    d4ee:	4770      	bx	lr
    d4f0:	2901      	cmp	r1, #1
    d4f2:	ea4f 1350 	mov.w	r3, r0, lsr #5
    d4f6:	f000 001f 	and.w	r0, r0, #31
    d4fa:	d00e      	beq.n	d51a <am_hal_gpio_state_read+0x3a>
    d4fc:	d315      	bcc.n	d52a <am_hal_gpio_state_read+0x4a>
    d4fe:	2902      	cmp	r1, #2
    d500:	d109      	bne.n	d516 <am_hal_gpio_state_read+0x36>
    d502:	490e      	ldr	r1, [pc, #56]	; (d53c <am_hal_gpio_state_read+0x5c>)
    d504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d508:	fa23 f000 	lsr.w	r0, r3, r0
    d50c:	f000 0001 	and.w	r0, r0, #1
    d510:	6010      	str	r0, [r2, #0]
    d512:	2000      	movs	r0, #0
    d514:	4770      	bx	lr
    d516:	2006      	movs	r0, #6
    d518:	4770      	bx	lr
    d51a:	4909      	ldr	r1, [pc, #36]	; (d540 <am_hal_gpio_state_read+0x60>)
    d51c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d520:	fa23 f000 	lsr.w	r0, r3, r0
    d524:	f000 0001 	and.w	r0, r0, #1
    d528:	e7f2      	b.n	d510 <am_hal_gpio_state_read+0x30>
    d52a:	4906      	ldr	r1, [pc, #24]	; (d544 <am_hal_gpio_state_read+0x64>)
    d52c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d530:	fa23 f000 	lsr.w	r0, r3, r0
    d534:	f000 0001 	and.w	r0, r0, #1
    d538:	e7ea      	b.n	d510 <am_hal_gpio_state_read+0x30>
    d53a:	bf00      	nop
    d53c:	400100a0 	.word	0x400100a0
    d540:	40010088 	.word	0x40010088
    d544:	40010080 	.word	0x40010080

0000d548 <am_hal_gpio_state_write>:
    d548:	2831      	cmp	r0, #49	; 0x31
    d54a:	d901      	bls.n	d550 <am_hal_gpio_state_write+0x8>
    d54c:	2005      	movs	r0, #5
    d54e:	4770      	bx	lr
    d550:	2905      	cmp	r1, #5
    d552:	d901      	bls.n	d558 <am_hal_gpio_state_write+0x10>
    d554:	2006      	movs	r0, #6
    d556:	4770      	bx	lr
    d558:	b570      	push	{r4, r5, r6, lr}
    d55a:	f000 031f 	and.w	r3, r0, #31
    d55e:	b082      	sub	sp, #8
    d560:	2201      	movs	r2, #1
    d562:	460d      	mov	r5, r1
    d564:	4604      	mov	r4, r0
    d566:	fa02 f603 	lsl.w	r6, r2, r3
    d56a:	f000 f837 	bl	d5dc <am_hal_interrupt_master_disable>
    d56e:	1e69      	subs	r1, r5, #1
    d570:	9001      	str	r0, [sp, #4]
    d572:	0960      	lsrs	r0, r4, #5
    d574:	2904      	cmp	r1, #4
    d576:	d81c      	bhi.n	d5b2 <am_hal_gpio_state_write+0x6a>
    d578:	e8df f001 	tbb	[pc, r1]
    d57c:	030c1017 	.word	0x030c1017
    d580:	1f          	.byte	0x1f
    d581:	00          	.byte	0x00
    d582:	4b11      	ldr	r3, [pc, #68]	; (d5c8 <am_hal_gpio_state_write+0x80>)
    d584:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d588:	9801      	ldr	r0, [sp, #4]
    d58a:	f000 f82b 	bl	d5e4 <am_hal_interrupt_master_set>
    d58e:	2000      	movs	r0, #0
    d590:	b002      	add	sp, #8
    d592:	bd70      	pop	{r4, r5, r6, pc}
    d594:	4b0d      	ldr	r3, [pc, #52]	; (d5cc <am_hal_gpio_state_write+0x84>)
    d596:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d59a:	e7f5      	b.n	d588 <am_hal_gpio_state_write+0x40>
    d59c:	4a0c      	ldr	r2, [pc, #48]	; (d5d0 <am_hal_gpio_state_write+0x88>)
    d59e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    d5a2:	4073      	eors	r3, r6
    d5a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    d5a8:	e7ee      	b.n	d588 <am_hal_gpio_state_write+0x40>
    d5aa:	4b0a      	ldr	r3, [pc, #40]	; (d5d4 <am_hal_gpio_state_write+0x8c>)
    d5ac:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d5b0:	e7ea      	b.n	d588 <am_hal_gpio_state_write+0x40>
    d5b2:	4b09      	ldr	r3, [pc, #36]	; (d5d8 <am_hal_gpio_state_write+0x90>)
    d5b4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d5b8:	e7e6      	b.n	d588 <am_hal_gpio_state_write+0x40>
    d5ba:	4a04      	ldr	r2, [pc, #16]	; (d5cc <am_hal_gpio_state_write+0x84>)
    d5bc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    d5c0:	4073      	eors	r3, r6
    d5c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    d5c6:	e7df      	b.n	d588 <am_hal_gpio_state_write+0x40>
    d5c8:	400100a8 	.word	0x400100a8
    d5cc:	400100b4 	.word	0x400100b4
    d5d0:	40010088 	.word	0x40010088
    d5d4:	40010090 	.word	0x40010090
    d5d8:	40010098 	.word	0x40010098

0000d5dc <am_hal_interrupt_master_disable>:
    d5dc:	f3ef 8010 	mrs	r0, PRIMASK
    d5e0:	b672      	cpsid	i
    d5e2:	4770      	bx	lr

0000d5e4 <am_hal_interrupt_master_set>:
    d5e4:	f380 8810 	msr	PRIMASK, r0
    d5e8:	4770      	bx	lr
    d5ea:	bf00      	nop

0000d5ec <am_hal_itm_disable>:
    d5ec:	b510      	push	{r4, lr}
    d5ee:	4b25      	ldr	r3, [pc, #148]	; (d684 <am_hal_itm_disable+0x98>)
    d5f0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    d5f4:	b9b3      	cbnz	r3, d624 <am_hal_itm_disable+0x38>
    d5f6:	4b24      	ldr	r3, [pc, #144]	; (d688 <am_hal_itm_disable+0x9c>)
    d5f8:	68da      	ldr	r2, [r3, #12]
    d5fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    d5fe:	60da      	str	r2, [r3, #12]
    d600:	68da      	ldr	r2, [r3, #12]
    d602:	01d2      	lsls	r2, r2, #7
    d604:	d5fc      	bpl.n	d600 <am_hal_itm_disable+0x14>
    d606:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    d60a:	4920      	ldr	r1, [pc, #128]	; (d68c <am_hal_itm_disable+0xa0>)
    d60c:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    d610:	4a1f      	ldr	r2, [pc, #124]	; (d690 <am_hal_itm_disable+0xa4>)
    d612:	200f      	movs	r0, #15
    d614:	f04f 31ff 	mov.w	r1, #4294967295
    d618:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    d61c:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    d620:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    d624:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    d628:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    d62c:	021b      	lsls	r3, r3, #8
    d62e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    d632:	d4f9      	bmi.n	d628 <am_hal_itm_disable+0x3c>
    d634:	f240 20f7 	movw	r0, #759	; 0x2f7
    d638:	f7ff fde2 	bl	d200 <am_hal_flash_delay>
    d63c:	4b13      	ldr	r3, [pc, #76]	; (d68c <am_hal_itm_disable+0xa0>)
    d63e:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    d642:	4621      	mov	r1, r4
    d644:	2064      	movs	r0, #100	; 0x64
    d646:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    d64a:	f023 0301 	bic.w	r3, r3, #1
    d64e:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    d652:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    d656:	4b0f      	ldr	r3, [pc, #60]	; (d694 <am_hal_itm_disable+0xa8>)
    d658:	4013      	ands	r3, r2
    d65a:	2b00      	cmp	r3, #0
    d65c:	d1f9      	bne.n	d652 <am_hal_itm_disable+0x66>
    d65e:	3801      	subs	r0, #1
    d660:	d1f1      	bne.n	d646 <am_hal_itm_disable+0x5a>
    d662:	4a09      	ldr	r2, [pc, #36]	; (d688 <am_hal_itm_disable+0x9c>)
    d664:	68d3      	ldr	r3, [r2, #12]
    d666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d66a:	60d3      	str	r3, [r2, #12]
    d66c:	68d3      	ldr	r3, [r2, #12]
    d66e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    d672:	d1fb      	bne.n	d66c <am_hal_itm_disable+0x80>
    d674:	4a03      	ldr	r2, [pc, #12]	; (d684 <am_hal_itm_disable+0x98>)
    d676:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    d67a:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    d67e:	2b00      	cmp	r3, #0
    d680:	d1fb      	bne.n	d67a <am_hal_itm_disable+0x8e>
    d682:	bd10      	pop	{r4, pc}
    d684:	40020000 	.word	0x40020000
    d688:	e000edf0 	.word	0xe000edf0
    d68c:	c5acce55 	.word	0xc5acce55
    d690:	00150511 	.word	0x00150511
    d694:	00800001 	.word	0x00800001

0000d698 <am_hal_mcuctrl_info_get>:
    d698:	b4f0      	push	{r4, r5, r6, r7}
    d69a:	b121      	cbz	r1, d6a6 <am_hal_mcuctrl_info_get+0xe>
    d69c:	2801      	cmp	r0, #1
    d69e:	d038      	beq.n	d712 <am_hal_mcuctrl_info_get+0x7a>
    d6a0:	d320      	bcc.n	d6e4 <am_hal_mcuctrl_info_get+0x4c>
    d6a2:	2802      	cmp	r0, #2
    d6a4:	d002      	beq.n	d6ac <am_hal_mcuctrl_info_get+0x14>
    d6a6:	2006      	movs	r0, #6
    d6a8:	bcf0      	pop	{r4, r5, r6, r7}
    d6aa:	4770      	bx	lr
    d6ac:	4a41      	ldr	r2, [pc, #260]	; (d7b4 <am_hal_mcuctrl_info_get+0x11c>)
    d6ae:	684d      	ldr	r5, [r1, #4]
    d6b0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    d6b4:	694c      	ldr	r4, [r1, #20]
    d6b6:	f003 0601 	and.w	r6, r3, #1
    d6ba:	f3c3 0040 	ubfx	r0, r3, #1, #1
    d6be:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d6c2:	700e      	strb	r6, [r1, #0]
    d6c4:	7208      	strb	r0, [r1, #8]
    d6c6:	740b      	strb	r3, [r1, #16]
    d6c8:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    d6cc:	60cb      	str	r3, [r1, #12]
    d6ce:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    d6d2:	4328      	orrs	r0, r5
    d6d4:	6048      	str	r0, [r1, #4]
    d6d6:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    d6da:	4323      	orrs	r3, r4
    d6dc:	2000      	movs	r0, #0
    d6de:	614b      	str	r3, [r1, #20]
    d6e0:	bcf0      	pop	{r4, r5, r6, r7}
    d6e2:	4770      	bx	lr
    d6e4:	4a33      	ldr	r2, [pc, #204]	; (d7b4 <am_hal_mcuctrl_info_get+0x11c>)
    d6e6:	6993      	ldr	r3, [r2, #24]
    d6e8:	f3c3 1080 	ubfx	r0, r3, #6, #1
    d6ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d6f0:	7008      	strb	r0, [r1, #0]
    d6f2:	704b      	strb	r3, [r1, #1]
    d6f4:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    d6f8:	f3c3 6381 	ubfx	r3, r3, #26, #2
    d6fc:	710b      	strb	r3, [r1, #4]
    d6fe:	6953      	ldr	r3, [r2, #20]
    d700:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d704:	f003 0301 	and.w	r3, r3, #1
    d708:	2000      	movs	r0, #0
    d70a:	708a      	strb	r2, [r1, #2]
    d70c:	70cb      	strb	r3, [r1, #3]
    d70e:	bcf0      	pop	{r4, r5, r6, r7}
    d710:	4770      	bx	lr
    d712:	4b28      	ldr	r3, [pc, #160]	; (d7b4 <am_hal_mcuctrl_info_get+0x11c>)
    d714:	4c28      	ldr	r4, [pc, #160]	; (d7b8 <am_hal_mcuctrl_info_get+0x120>)
    d716:	681a      	ldr	r2, [r3, #0]
    d718:	600a      	str	r2, [r1, #0]
    d71a:	6858      	ldr	r0, [r3, #4]
    d71c:	6048      	str	r0, [r1, #4]
    d71e:	6898      	ldr	r0, [r3, #8]
    d720:	6088      	str	r0, [r1, #8]
    d722:	68d8      	ldr	r0, [r3, #12]
    d724:	60c8      	str	r0, [r1, #12]
    d726:	691d      	ldr	r5, [r3, #16]
    d728:	4824      	ldr	r0, [pc, #144]	; (d7bc <am_hal_mcuctrl_info_get+0x124>)
    d72a:	610d      	str	r5, [r1, #16]
    d72c:	f3c2 5703 	ubfx	r7, r2, #20, #4
    d730:	f3c2 4603 	ubfx	r6, r2, #16, #4
    d734:	695d      	ldr	r5, [r3, #20]
    d736:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    d73a:	4b21      	ldr	r3, [pc, #132]	; (d7c0 <am_hal_mcuctrl_info_get+0x128>)
    d73c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    d740:	6208      	str	r0, [r1, #32]
    d742:	f002 0201 	and.w	r2, r2, #1
    d746:	614d      	str	r5, [r1, #20]
    d748:	61cc      	str	r4, [r1, #28]
    d74a:	618a      	str	r2, [r1, #24]
    d74c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    d750:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    d754:	b2d0      	uxtb	r0, r2
    d756:	f004 020f 	and.w	r2, r4, #15
    d75a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    d75e:	624a      	str	r2, [r1, #36]	; 0x24
    d760:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    d764:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    d768:	f3c2 1003 	ubfx	r0, r2, #4, #4
    d76c:	f004 020f 	and.w	r2, r4, #15
    d770:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d774:	628a      	str	r2, [r1, #40]	; 0x28
    d776:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    d77a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    d77e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    d782:	f3c2 1203 	ubfx	r2, r2, #4, #4
    d786:	4302      	orrs	r2, r0
    d788:	62ca      	str	r2, [r1, #44]	; 0x2c
    d78a:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    d78e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    d792:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    d796:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    d79a:	b2c0      	uxtb	r0, r0
    d79c:	0400      	lsls	r0, r0, #16
    d79e:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    d7a2:	b2d2      	uxtb	r2, r2
    d7a4:	431a      	orrs	r2, r3
    d7a6:	b2e3      	uxtb	r3, r4
    d7a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    d7ac:	630b      	str	r3, [r1, #48]	; 0x30
    d7ae:	2000      	movs	r0, #0
    d7b0:	bcf0      	pop	{r4, r5, r6, r7}
    d7b2:	4770      	bx	lr
    d7b4:	40020000 	.word	0x40020000
    d7b8:	0000e588 	.word	0x0000e588
    d7bc:	0000e5c8 	.word	0x0000e5c8
    d7c0:	f0000f00 	.word	0xf0000f00

0000d7c4 <am_hal_pwrctrl_periph_enable>:
    d7c4:	b570      	push	{r4, r5, r6, lr}
    d7c6:	b082      	sub	sp, #8
    d7c8:	4604      	mov	r4, r0
    d7ca:	f7ff ff07 	bl	d5dc <am_hal_interrupt_master_disable>
    d7ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d7d2:	4d0f      	ldr	r5, [pc, #60]	; (d810 <am_hal_pwrctrl_periph_enable+0x4c>)
    d7d4:	4e0f      	ldr	r6, [pc, #60]	; (d814 <am_hal_pwrctrl_periph_enable+0x50>)
    d7d6:	9001      	str	r0, [sp, #4]
    d7d8:	00a4      	lsls	r4, r4, #2
    d7da:	68aa      	ldr	r2, [r5, #8]
    d7dc:	5933      	ldr	r3, [r6, r4]
    d7de:	4313      	orrs	r3, r2
    d7e0:	60ab      	str	r3, [r5, #8]
    d7e2:	9801      	ldr	r0, [sp, #4]
    d7e4:	4434      	add	r4, r6
    d7e6:	f7ff fefd 	bl	d5e4 <am_hal_interrupt_master_set>
    d7ea:	2077      	movs	r0, #119	; 0x77
    d7ec:	f7ff fd08 	bl	d200 <am_hal_flash_delay>
    d7f0:	69ab      	ldr	r3, [r5, #24]
    d7f2:	6864      	ldr	r4, [r4, #4]
    d7f4:	4223      	tst	r3, r4
    d7f6:	d103      	bne.n	d800 <am_hal_pwrctrl_periph_enable+0x3c>
    d7f8:	2077      	movs	r0, #119	; 0x77
    d7fa:	f7ff fd01 	bl	d200 <am_hal_flash_delay>
    d7fe:	69ab      	ldr	r3, [r5, #24]
    d800:	4b03      	ldr	r3, [pc, #12]	; (d810 <am_hal_pwrctrl_periph_enable+0x4c>)
    d802:	699b      	ldr	r3, [r3, #24]
    d804:	4223      	tst	r3, r4
    d806:	bf0c      	ite	eq
    d808:	2001      	moveq	r0, #1
    d80a:	2000      	movne	r0, #0
    d80c:	b002      	add	sp, #8
    d80e:	bd70      	pop	{r4, r5, r6, pc}
    d810:	40021000 	.word	0x40021000
    d814:	0000e608 	.word	0x0000e608

0000d818 <am_hal_pwrctrl_periph_disable>:
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	b082      	sub	sp, #8
    d81c:	4604      	mov	r4, r0
    d81e:	f7ff fedd 	bl	d5dc <am_hal_interrupt_master_disable>
    d822:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d826:	4d10      	ldr	r5, [pc, #64]	; (d868 <am_hal_pwrctrl_periph_disable+0x50>)
    d828:	4e10      	ldr	r6, [pc, #64]	; (d86c <am_hal_pwrctrl_periph_disable+0x54>)
    d82a:	9001      	str	r0, [sp, #4]
    d82c:	00a4      	lsls	r4, r4, #2
    d82e:	68ab      	ldr	r3, [r5, #8]
    d830:	5932      	ldr	r2, [r6, r4]
    d832:	ea23 0302 	bic.w	r3, r3, r2
    d836:	60ab      	str	r3, [r5, #8]
    d838:	9801      	ldr	r0, [sp, #4]
    d83a:	4434      	add	r4, r6
    d83c:	f7ff fed2 	bl	d5e4 <am_hal_interrupt_master_set>
    d840:	2077      	movs	r0, #119	; 0x77
    d842:	f7ff fcdd 	bl	d200 <am_hal_flash_delay>
    d846:	69ab      	ldr	r3, [r5, #24]
    d848:	6864      	ldr	r4, [r4, #4]
    d84a:	4223      	tst	r3, r4
    d84c:	d003      	beq.n	d856 <am_hal_pwrctrl_periph_disable+0x3e>
    d84e:	2077      	movs	r0, #119	; 0x77
    d850:	f7ff fcd6 	bl	d200 <am_hal_flash_delay>
    d854:	69ab      	ldr	r3, [r5, #24]
    d856:	4b04      	ldr	r3, [pc, #16]	; (d868 <am_hal_pwrctrl_periph_disable+0x50>)
    d858:	699b      	ldr	r3, [r3, #24]
    d85a:	4223      	tst	r3, r4
    d85c:	bf14      	ite	ne
    d85e:	2001      	movne	r0, #1
    d860:	2000      	moveq	r0, #0
    d862:	b002      	add	sp, #8
    d864:	bd70      	pop	{r4, r5, r6, pc}
    d866:	bf00      	nop
    d868:	40021000 	.word	0x40021000
    d86c:	0000e608 	.word	0x0000e608

0000d870 <am_hal_pwrctrl_low_power_init>:
    d870:	b530      	push	{r4, r5, lr}
    d872:	4b1f      	ldr	r3, [pc, #124]	; (d8f0 <am_hal_pwrctrl_low_power_init+0x80>)
    d874:	681a      	ldr	r2, [r3, #0]
    d876:	b083      	sub	sp, #12
    d878:	b912      	cbnz	r2, d880 <am_hal_pwrctrl_low_power_init+0x10>
    d87a:	4a1e      	ldr	r2, [pc, #120]	; (d8f4 <am_hal_pwrctrl_low_power_init+0x84>)
    d87c:	6812      	ldr	r2, [r2, #0]
    d87e:	601a      	str	r2, [r3, #0]
    d880:	4c1d      	ldr	r4, [pc, #116]	; (d8f8 <am_hal_pwrctrl_low_power_init+0x88>)
    d882:	69a3      	ldr	r3, [r4, #24]
    d884:	05db      	lsls	r3, r3, #23
    d886:	d502      	bpl.n	d88e <am_hal_pwrctrl_low_power_init+0x1e>
    d888:	2000      	movs	r0, #0
    d88a:	b003      	add	sp, #12
    d88c:	bd30      	pop	{r4, r5, pc}
    d88e:	4d1b      	ldr	r5, [pc, #108]	; (d8fc <am_hal_pwrctrl_low_power_init+0x8c>)
    d890:	491b      	ldr	r1, [pc, #108]	; (d900 <am_hal_pwrctrl_low_power_init+0x90>)
    d892:	7e2a      	ldrb	r2, [r5, #24]
    d894:	2001      	movs	r0, #1
    d896:	4302      	orrs	r2, r0
    d898:	2307      	movs	r3, #7
    d89a:	762a      	strb	r2, [r5, #24]
    d89c:	9000      	str	r0, [sp, #0]
    d89e:	461a      	mov	r2, r3
    d8a0:	f242 7010 	movw	r0, #10000	; 0x2710
    d8a4:	f7ff fcb0 	bl	d208 <am_hal_flash_delay_status_check>
    d8a8:	b110      	cbz	r0, d8b0 <am_hal_pwrctrl_low_power_init+0x40>
    d8aa:	2004      	movs	r0, #4
    d8ac:	b003      	add	sp, #12
    d8ae:	bd30      	pop	{r4, r5, pc}
    d8b0:	6823      	ldr	r3, [r4, #0]
    d8b2:	f043 0301 	orr.w	r3, r3, #1
    d8b6:	6023      	str	r3, [r4, #0]
    d8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8be:	6263      	str	r3, [r4, #36]	; 0x24
    d8c0:	68eb      	ldr	r3, [r5, #12]
    d8c2:	b2db      	uxtb	r3, r3
    d8c4:	2b11      	cmp	r3, #17
    d8c6:	d1df      	bne.n	d888 <am_hal_pwrctrl_low_power_init+0x18>
    d8c8:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    d8cc:	f360 5356 	bfi	r3, r0, #21, #2
    d8d0:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    d8d4:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    d8d8:	220f      	movs	r2, #15
    d8da:	f362 138b 	bfi	r3, r2, #6, #6
    d8de:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    d8e2:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    d8e6:	f362 0305 	bfi	r3, r2, #0, #6
    d8ea:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    d8ee:	e7cc      	b.n	d88a <am_hal_pwrctrl_low_power_init+0x1a>
    d8f0:	1000112c 	.word	0x1000112c
    d8f4:	4ffff000 	.word	0x4ffff000
    d8f8:	40021000 	.word	0x40021000
    d8fc:	40020000 	.word	0x40020000
    d900:	40020018 	.word	0x40020018

0000d904 <am_hal_rtc_osc_select>:
    d904:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d908:	2801      	cmp	r0, #1
    d90a:	68d3      	ldr	r3, [r2, #12]
    d90c:	bf0c      	ite	eq
    d90e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    d912:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    d916:	60d3      	str	r3, [r2, #12]
    d918:	4770      	bx	lr
    d91a:	bf00      	nop

0000d91c <am_hal_rtc_osc_disable>:
    d91c:	4a03      	ldr	r2, [pc, #12]	; (d92c <am_hal_rtc_osc_disable+0x10>)
    d91e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d922:	f043 0310 	orr.w	r3, r3, #16
    d926:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    d92a:	4770      	bx	lr
    d92c:	40004200 	.word	0x40004200

0000d930 <am_hal_sysctrl_sleep>:
    d930:	b510      	push	{r4, lr}
    d932:	b082      	sub	sp, #8
    d934:	4604      	mov	r4, r0
    d936:	f7ff fe51 	bl	d5dc <am_hal_interrupt_master_disable>
    d93a:	4a0f      	ldr	r2, [pc, #60]	; (d978 <am_hal_sysctrl_sleep+0x48>)
    d93c:	9001      	str	r0, [sp, #4]
    d93e:	b124      	cbz	r4, d94a <am_hal_sysctrl_sleep+0x1a>
    d940:	4b0e      	ldr	r3, [pc, #56]	; (d97c <am_hal_sysctrl_sleep+0x4c>)
    d942:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    d946:	07db      	lsls	r3, r3, #31
    d948:	d511      	bpl.n	d96e <am_hal_sysctrl_sleep+0x3e>
    d94a:	6913      	ldr	r3, [r2, #16]
    d94c:	f023 0304 	bic.w	r3, r3, #4
    d950:	6113      	str	r3, [r2, #16]
    d952:	f3bf 8f4f 	dsb	sy
    d956:	4a0a      	ldr	r2, [pc, #40]	; (d980 <am_hal_sysctrl_sleep+0x50>)
    d958:	4b0a      	ldr	r3, [pc, #40]	; (d984 <am_hal_sysctrl_sleep+0x54>)
    d95a:	6812      	ldr	r2, [r2, #0]
    d95c:	601a      	str	r2, [r3, #0]
    d95e:	bf30      	wfi
    d960:	f3bf 8f6f 	isb	sy
    d964:	9801      	ldr	r0, [sp, #4]
    d966:	f7ff fe3d 	bl	d5e4 <am_hal_interrupt_master_set>
    d96a:	b002      	add	sp, #8
    d96c:	bd10      	pop	{r4, pc}
    d96e:	6913      	ldr	r3, [r2, #16]
    d970:	f043 0304 	orr.w	r3, r3, #4
    d974:	6113      	str	r3, [r2, #16]
    d976:	e7ec      	b.n	d952 <am_hal_sysctrl_sleep+0x22>
    d978:	e000ed00 	.word	0xe000ed00
    d97c:	40020000 	.word	0x40020000
    d980:	5fff0000 	.word	0x5fff0000
    d984:	10001130 	.word	0x10001130

0000d988 <am_hal_uart_initialize>:
    d988:	2801      	cmp	r0, #1
    d98a:	d901      	bls.n	d990 <am_hal_uart_initialize+0x8>
    d98c:	2005      	movs	r0, #5
    d98e:	4770      	bx	lr
    d990:	b169      	cbz	r1, d9ae <am_hal_uart_initialize+0x26>
    d992:	b5f0      	push	{r4, r5, r6, r7, lr}
    d994:	2264      	movs	r2, #100	; 0x64
    d996:	4e0e      	ldr	r6, [pc, #56]	; (d9d0 <am_hal_uart_initialize+0x48>)
    d998:	fb02 f200 	mul.w	r2, r2, r0
    d99c:	18b4      	adds	r4, r6, r2
    d99e:	4603      	mov	r3, r0
    d9a0:	78e0      	ldrb	r0, [r4, #3]
    d9a2:	f3c0 0700 	ubfx	r7, r0, #0, #1
    d9a6:	b2fd      	uxtb	r5, r7
    d9a8:	b11d      	cbz	r5, d9b2 <am_hal_uart_initialize+0x2a>
    d9aa:	2007      	movs	r0, #7
    d9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9ae:	2006      	movs	r0, #6
    d9b0:	4770      	bx	lr
    d9b2:	f040 0001 	orr.w	r0, r0, #1
    d9b6:	70e0      	strb	r0, [r4, #3]
    d9b8:	58b0      	ldr	r0, [r6, r2]
    d9ba:	f8df e018 	ldr.w	lr, [pc, #24]	; d9d4 <am_hal_uart_initialize+0x4c>
    d9be:	f36e 0017 	bfi	r0, lr, #0, #24
    d9c2:	50b0      	str	r0, [r6, r2]
    d9c4:	6263      	str	r3, [r4, #36]	; 0x24
    d9c6:	7127      	strb	r7, [r4, #4]
    d9c8:	6625      	str	r5, [r4, #96]	; 0x60
    d9ca:	4628      	mov	r0, r5
    d9cc:	600c      	str	r4, [r1, #0]
    d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9d0:	10001138 	.word	0x10001138
    d9d4:	00ea9e06 	.word	0x00ea9e06

0000d9d8 <am_hal_uart_deinitialize>:
    d9d8:	b128      	cbz	r0, d9e6 <am_hal_uart_deinitialize+0xe>
    d9da:	6803      	ldr	r3, [r0, #0]
    d9dc:	4a07      	ldr	r2, [pc, #28]	; (d9fc <am_hal_uart_deinitialize+0x24>)
    d9de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d9e2:	4293      	cmp	r3, r2
    d9e4:	d001      	beq.n	d9ea <am_hal_uart_deinitialize+0x12>
    d9e6:	2002      	movs	r0, #2
    d9e8:	4770      	bx	lr
    d9ea:	78c2      	ldrb	r2, [r0, #3]
    d9ec:	2300      	movs	r3, #0
    d9ee:	f36f 0200 	bfc	r2, #0, #1
    d9f2:	70c2      	strb	r2, [r0, #3]
    d9f4:	6243      	str	r3, [r0, #36]	; 0x24
    d9f6:	7103      	strb	r3, [r0, #4]
    d9f8:	4618      	mov	r0, r3
    d9fa:	4770      	bx	lr
    d9fc:	01ea9e06 	.word	0x01ea9e06

0000da00 <am_hal_uart_power_control>:
    da00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da04:	6804      	ldr	r4, [r0, #0]
    da06:	4b36      	ldr	r3, [pc, #216]	; (dae0 <am_hal_uart_power_control+0xe0>)
    da08:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    da0c:	429c      	cmp	r4, r3
    da0e:	b083      	sub	sp, #12
    da10:	d003      	beq.n	da1a <am_hal_uart_power_control+0x1a>
    da12:	2002      	movs	r0, #2
    da14:	b003      	add	sp, #12
    da16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da1a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    da1c:	4605      	mov	r5, r0
    da1e:	f107 0008 	add.w	r0, r7, #8
    da22:	4691      	mov	r9, r2
    da24:	460e      	mov	r6, r1
    da26:	fa5f f880 	uxtb.w	r8, r0
    da2a:	b181      	cbz	r1, da4e <am_hal_uart_power_control+0x4e>
    da2c:	2902      	cmp	r1, #2
    da2e:	d80c      	bhi.n	da4a <am_hal_uart_power_control+0x4a>
    da30:	b992      	cbnz	r2, da58 <am_hal_uart_power_control+0x58>
    da32:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    da36:	371c      	adds	r7, #28
    da38:	033f      	lsls	r7, r7, #12
    da3a:	f04f 33ff 	mov.w	r3, #4294967295
    da3e:	647b      	str	r3, [r7, #68]	; 0x44
    da40:	4640      	mov	r0, r8
    da42:	f7ff fee9 	bl	d818 <am_hal_pwrctrl_periph_disable>
    da46:	2000      	movs	r0, #0
    da48:	e7e4      	b.n	da14 <am_hal_uart_power_control+0x14>
    da4a:	2006      	movs	r0, #6
    da4c:	e7e2      	b.n	da14 <am_hal_uart_power_control+0x14>
    da4e:	b322      	cbz	r2, da9a <am_hal_uart_power_control+0x9a>
    da50:	792b      	ldrb	r3, [r5, #4]
    da52:	bb3b      	cbnz	r3, daa4 <am_hal_uart_power_control+0xa4>
    da54:	2007      	movs	r0, #7
    da56:	e7dd      	b.n	da14 <am_hal_uart_power_control+0x14>
    da58:	f7ff fdc0 	bl	d5dc <am_hal_interrupt_master_disable>
    da5c:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    da60:	331c      	adds	r3, #28
    da62:	031b      	lsls	r3, r3, #12
    da64:	9001      	str	r0, [sp, #4]
    da66:	6a1a      	ldr	r2, [r3, #32]
    da68:	60aa      	str	r2, [r5, #8]
    da6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    da6c:	60ea      	str	r2, [r5, #12]
    da6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da70:	612a      	str	r2, [r5, #16]
    da72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    da74:	616a      	str	r2, [r5, #20]
    da76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    da78:	61aa      	str	r2, [r5, #24]
    da7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    da7c:	61ea      	str	r2, [r5, #28]
    da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    da80:	622b      	str	r3, [r5, #32]
    da82:	2301      	movs	r3, #1
    da84:	712b      	strb	r3, [r5, #4]
    da86:	9801      	ldr	r0, [sp, #4]
    da88:	f7ff fdac 	bl	d5e4 <am_hal_interrupt_master_set>
    da8c:	682b      	ldr	r3, [r5, #0]
    da8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    da92:	42a3      	cmp	r3, r4
    da94:	d1d4      	bne.n	da40 <am_hal_uart_power_control+0x40>
    da96:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    da98:	e7cb      	b.n	da32 <am_hal_uart_power_control+0x32>
    da9a:	4640      	mov	r0, r8
    da9c:	f7ff fe92 	bl	d7c4 <am_hal_pwrctrl_periph_enable>
    daa0:	4648      	mov	r0, r9
    daa2:	e7b7      	b.n	da14 <am_hal_uart_power_control+0x14>
    daa4:	4640      	mov	r0, r8
    daa6:	f7ff fe8d 	bl	d7c4 <am_hal_pwrctrl_periph_enable>
    daaa:	f7ff fd97 	bl	d5dc <am_hal_interrupt_master_disable>
    daae:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    dab2:	331c      	adds	r3, #28
    dab4:	031b      	lsls	r3, r3, #12
    dab6:	68aa      	ldr	r2, [r5, #8]
    dab8:	9000      	str	r0, [sp, #0]
    daba:	621a      	str	r2, [r3, #32]
    dabc:	68ea      	ldr	r2, [r5, #12]
    dabe:	625a      	str	r2, [r3, #36]	; 0x24
    dac0:	692a      	ldr	r2, [r5, #16]
    dac2:	629a      	str	r2, [r3, #40]	; 0x28
    dac4:	696a      	ldr	r2, [r5, #20]
    dac6:	62da      	str	r2, [r3, #44]	; 0x2c
    dac8:	69aa      	ldr	r2, [r5, #24]
    daca:	631a      	str	r2, [r3, #48]	; 0x30
    dacc:	69ea      	ldr	r2, [r5, #28]
    dace:	635a      	str	r2, [r3, #52]	; 0x34
    dad0:	6a2a      	ldr	r2, [r5, #32]
    dad2:	639a      	str	r2, [r3, #56]	; 0x38
    dad4:	9800      	ldr	r0, [sp, #0]
    dad6:	712e      	strb	r6, [r5, #4]
    dad8:	f7ff fd84 	bl	d5e4 <am_hal_interrupt_master_set>
    dadc:	4630      	mov	r0, r6
    dade:	e799      	b.n	da14 <am_hal_uart_power_control+0x14>
    dae0:	01ea9e06 	.word	0x01ea9e06

0000dae4 <am_hal_uart_configure>:
    dae4:	6803      	ldr	r3, [r0, #0]
    dae6:	4a7a      	ldr	r2, [pc, #488]	; (dcd0 <am_hal_uart_configure+0x1ec>)
    dae8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    daec:	4293      	cmp	r3, r2
    daee:	d001      	beq.n	daf4 <am_hal_uart_configure+0x10>
    daf0:	2002      	movs	r0, #2
    daf2:	4770      	bx	lr
    daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dafa:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    dafe:	351c      	adds	r5, #28
    db00:	032d      	lsls	r5, r5, #12
    db02:	2700      	movs	r7, #0
    db04:	b084      	sub	sp, #16
    db06:	632f      	str	r7, [r5, #48]	; 0x30
    db08:	460e      	mov	r6, r1
    db0a:	4604      	mov	r4, r0
    db0c:	f7ff fd66 	bl	d5dc <am_hal_interrupt_master_disable>
    db10:	9001      	str	r0, [sp, #4]
    db12:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db14:	f043 0308 	orr.w	r3, r3, #8
    db18:	862b      	strh	r3, [r5, #48]	; 0x30
    db1a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db1c:	2201      	movs	r2, #1
    db1e:	f362 1306 	bfi	r3, r2, #4, #3
    db22:	862b      	strh	r3, [r5, #48]	; 0x30
    db24:	9801      	ldr	r0, [sp, #4]
    db26:	f7ff fd5d 	bl	d5e4 <am_hal_interrupt_master_set>
    db2a:	f7ff fd57 	bl	d5dc <am_hal_interrupt_master_disable>
    db2e:	9002      	str	r0, [sp, #8]
    db30:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db32:	f367 0300 	bfi	r3, r7, #0, #1
    db36:	862b      	strh	r3, [r5, #48]	; 0x30
    db38:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db3a:	f367 2349 	bfi	r3, r7, #9, #1
    db3e:	862b      	strh	r3, [r5, #48]	; 0x30
    db40:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db42:	f367 2308 	bfi	r3, r7, #8, #1
    db46:	862b      	strh	r3, [r5, #48]	; 0x30
    db48:	9802      	ldr	r0, [sp, #8]
    db4a:	f7ff fd4b 	bl	d5e4 <am_hal_interrupt_master_set>
    db4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    db50:	f3c3 1302 	ubfx	r3, r3, #4, #3
    db54:	3b01      	subs	r3, #1
    db56:	2b03      	cmp	r3, #3
    db58:	d854      	bhi.n	dc04 <am_hal_uart_configure+0x120>
    db5a:	e8df f003 	tbb	[pc, r3]
    db5e:	020e      	.short	0x020e
    db60:	1114      	.short	0x1114
    db62:	495c      	ldr	r1, [pc, #368]	; (dcd4 <am_hal_uart_configure+0x1f0>)
    db64:	485c      	ldr	r0, [pc, #368]	; (dcd8 <am_hal_uart_configure+0x1f4>)
    db66:	6832      	ldr	r2, [r6, #0]
    db68:	0112      	lsls	r2, r2, #4
    db6a:	fbb0 f3f2 	udiv	r3, r0, r2
    db6e:	b96b      	cbnz	r3, db8c <am_hal_uart_configure+0xa8>
    db70:	485a      	ldr	r0, [pc, #360]	; (dcdc <am_hal_uart_configure+0x1f8>)
    db72:	6623      	str	r3, [r4, #96]	; 0x60
    db74:	b004      	add	sp, #16
    db76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db7a:	4959      	ldr	r1, [pc, #356]	; (dce0 <am_hal_uart_configure+0x1fc>)
    db7c:	4859      	ldr	r0, [pc, #356]	; (dce4 <am_hal_uart_configure+0x200>)
    db7e:	e7f2      	b.n	db66 <am_hal_uart_configure+0x82>
    db80:	4959      	ldr	r1, [pc, #356]	; (dce8 <am_hal_uart_configure+0x204>)
    db82:	485a      	ldr	r0, [pc, #360]	; (dcec <am_hal_uart_configure+0x208>)
    db84:	e7ef      	b.n	db66 <am_hal_uart_configure+0x82>
    db86:	495a      	ldr	r1, [pc, #360]	; (dcf0 <am_hal_uart_configure+0x20c>)
    db88:	485a      	ldr	r0, [pc, #360]	; (dcf4 <am_hal_uart_configure+0x210>)
    db8a:	e7ec      	b.n	db66 <am_hal_uart_configure+0x82>
    db8c:	fbb1 f2f2 	udiv	r2, r1, r2
    db90:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    db94:	626b      	str	r3, [r5, #36]	; 0x24
    db96:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    db9a:	626b      	str	r3, [r5, #36]	; 0x24
    db9c:	fbb0 f0f1 	udiv	r0, r0, r1
    dba0:	62aa      	str	r2, [r5, #40]	; 0x28
    dba2:	6620      	str	r0, [r4, #96]	; 0x60
    dba4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dba6:	f36f 338e 	bfc	r3, #14, #1
    dbaa:	862b      	strh	r3, [r5, #48]	; 0x30
    dbac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbae:	f36f 33cf 	bfc	r3, #15, #1
    dbb2:	862b      	strh	r3, [r5, #48]	; 0x30
    dbb4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dbb6:	6933      	ldr	r3, [r6, #16]
    dbb8:	4313      	orrs	r3, r2
    dbba:	632b      	str	r3, [r5, #48]	; 0x30
    dbbc:	6973      	ldr	r3, [r6, #20]
    dbbe:	636b      	str	r3, [r5, #52]	; 0x34
    dbc0:	6871      	ldr	r1, [r6, #4]
    dbc2:	68b3      	ldr	r3, [r6, #8]
    dbc4:	68f2      	ldr	r2, [r6, #12]
    dbc6:	430b      	orrs	r3, r1
    dbc8:	f043 0310 	orr.w	r3, r3, #16
    dbcc:	4313      	orrs	r3, r2
    dbce:	62eb      	str	r3, [r5, #44]	; 0x2c
    dbd0:	f7ff fd04 	bl	d5dc <am_hal_interrupt_master_disable>
    dbd4:	9003      	str	r0, [sp, #12]
    dbd6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbd8:	f043 0301 	orr.w	r3, r3, #1
    dbdc:	862b      	strh	r3, [r5, #48]	; 0x30
    dbde:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dbe4:	862b      	strh	r3, [r5, #48]	; 0x30
    dbe6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    dbec:	862b      	strh	r3, [r5, #48]	; 0x30
    dbee:	9803      	ldr	r0, [sp, #12]
    dbf0:	f7ff fcf8 	bl	d5e4 <am_hal_interrupt_master_set>
    dbf4:	6825      	ldr	r5, [r4, #0]
    dbf6:	4b36      	ldr	r3, [pc, #216]	; (dcd0 <am_hal_uart_configure+0x1ec>)
    dbf8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    dbfc:	429d      	cmp	r5, r3
    dbfe:	d005      	beq.n	dc0c <am_hal_uart_configure+0x128>
    dc00:	2000      	movs	r0, #0
    dc02:	e7b7      	b.n	db74 <am_hal_uart_configure+0x90>
    dc04:	2300      	movs	r3, #0
    dc06:	6623      	str	r3, [r4, #96]	; 0x60
    dc08:	483b      	ldr	r0, [pc, #236]	; (dcf8 <am_hal_uart_configure+0x214>)
    dc0a:	e7b3      	b.n	db74 <am_hal_uart_configure+0x90>
    dc0c:	69b1      	ldr	r1, [r6, #24]
    dc0e:	6a37      	ldr	r7, [r6, #32]
    dc10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    dc14:	b109      	cbz	r1, dc1a <am_hal_uart_configure+0x136>
    dc16:	69f3      	ldr	r3, [r6, #28]
    dc18:	bb3b      	cbnz	r3, dc6a <am_hal_uart_configure+0x186>
    dc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc1c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc20:	f103 021c 	add.w	r2, r3, #28
    dc24:	0312      	lsls	r2, r2, #12
    dc26:	2100      	movs	r1, #0
    dc28:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    dc2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    dc2e:	f021 0120 	bic.w	r1, r1, #32
    dc32:	6391      	str	r1, [r2, #56]	; 0x38
    dc34:	b1b7      	cbz	r7, dc64 <am_hal_uart_configure+0x180>
    dc36:	f1b8 0f00 	cmp.w	r8, #0
    dc3a:	d12e      	bne.n	dc9a <am_hal_uart_configure+0x1b6>
    dc3c:	6823      	ldr	r3, [r4, #0]
    dc3e:	4a24      	ldr	r2, [pc, #144]	; (dcd0 <am_hal_uart_configure+0x1ec>)
    dc40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc44:	2100      	movs	r1, #0
    dc46:	4293      	cmp	r3, r2
    dc48:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    dc4c:	d1d8      	bne.n	dc00 <am_hal_uart_configure+0x11c>
    dc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc50:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc54:	331c      	adds	r3, #28
    dc56:	031b      	lsls	r3, r3, #12
    dc58:	2000      	movs	r0, #0
    dc5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dc5c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    dc60:	639a      	str	r2, [r3, #56]	; 0x38
    dc62:	e787      	b.n	db74 <am_hal_uart_configure+0x90>
    dc64:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    dc68:	e7f4      	b.n	dc54 <am_hal_uart_configure+0x170>
    dc6a:	2201      	movs	r2, #1
    dc6c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    dc70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dc74:	f000 faae 	bl	e1d4 <am_hal_queue_init>
    dc78:	6823      	ldr	r3, [r4, #0]
    dc7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc7e:	42ab      	cmp	r3, r5
    dc80:	d1be      	bne.n	dc00 <am_hal_uart_configure+0x11c>
    dc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc88:	331c      	adds	r3, #28
    dc8a:	031b      	lsls	r3, r3, #12
    dc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dc8e:	f042 0220 	orr.w	r2, r2, #32
    dc92:	639a      	str	r2, [r3, #56]	; 0x38
    dc94:	2f00      	cmp	r7, #0
    dc96:	d1ce      	bne.n	dc36 <am_hal_uart_configure+0x152>
    dc98:	e7d0      	b.n	dc3c <am_hal_uart_configure+0x158>
    dc9a:	2201      	movs	r2, #1
    dc9c:	4643      	mov	r3, r8
    dc9e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    dca2:	4639      	mov	r1, r7
    dca4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    dca8:	f000 fa94 	bl	e1d4 <am_hal_queue_init>
    dcac:	6823      	ldr	r3, [r4, #0]
    dcae:	4a08      	ldr	r2, [pc, #32]	; (dcd0 <am_hal_uart_configure+0x1ec>)
    dcb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcb4:	4293      	cmp	r3, r2
    dcb6:	d1a3      	bne.n	dc00 <am_hal_uart_configure+0x11c>
    dcb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dcbe:	331c      	adds	r3, #28
    dcc0:	031b      	lsls	r3, r3, #12
    dcc2:	2000      	movs	r0, #0
    dcc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dcc6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    dcca:	639a      	str	r2, [r3, #56]	; 0x38
    dccc:	e752      	b.n	db74 <am_hal_uart_configure+0x90>
    dcce:	bf00      	nop
    dcd0:	01ea9e06 	.word	0x01ea9e06
    dcd4:	2dc6c000 	.word	0x2dc6c000
    dcd8:	00b71b00 	.word	0x00b71b00
    dcdc:	08000003 	.word	0x08000003
    dce0:	5b8d8000 	.word	0x5b8d8000
    dce4:	016e3600 	.word	0x016e3600
    dce8:	0b71b000 	.word	0x0b71b000
    dcec:	002dc6c0 	.word	0x002dc6c0
    dcf0:	16e36000 	.word	0x16e36000
    dcf4:	005b8d80 	.word	0x005b8d80
    dcf8:	08000002 	.word	0x08000002

0000dcfc <am_hal_uart_transfer>:
    dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd00:	680f      	ldr	r7, [r1, #0]
    dd02:	b091      	sub	sp, #68	; 0x44
    dd04:	4605      	mov	r5, r0
    dd06:	b13f      	cbz	r7, dd18 <am_hal_uart_transfer+0x1c>
    dd08:	2f01      	cmp	r7, #1
    dd0a:	bf18      	it	ne
    dd0c:	2707      	movne	r7, #7
    dd0e:	d024      	beq.n	dd5a <am_hal_uart_transfer+0x5e>
    dd10:	4638      	mov	r0, r7
    dd12:	b011      	add	sp, #68	; 0x44
    dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd18:	f8d1 900c 	ldr.w	r9, [r1, #12]
    dd1c:	690b      	ldr	r3, [r1, #16]
    dd1e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    dd22:	688e      	ldr	r6, [r1, #8]
    dd24:	9300      	str	r3, [sp, #0]
    dd26:	f1b9 0f00 	cmp.w	r9, #0
    dd2a:	d031      	beq.n	dd90 <am_hal_uart_transfer+0x94>
    dd2c:	2e00      	cmp	r6, #0
    dd2e:	f000 819c 	beq.w	e06a <am_hal_uart_transfer+0x36e>
    dd32:	2800      	cmp	r0, #0
    dd34:	f000 8097 	beq.w	de66 <am_hal_uart_transfer+0x16a>
    dd38:	6803      	ldr	r3, [r0, #0]
    dd3a:	4aa9      	ldr	r2, [pc, #676]	; (dfe0 <am_hal_uart_transfer+0x2e4>)
    dd3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd40:	4293      	cmp	r3, r2
    dd42:	f000 8092 	beq.w	de6a <am_hal_uart_transfer+0x16e>
    dd46:	46b8      	mov	r8, r7
    dd48:	9b00      	ldr	r3, [sp, #0]
    dd4a:	b10b      	cbz	r3, dd50 <am_hal_uart_transfer+0x54>
    dd4c:	f8c3 8000 	str.w	r8, [r3]
    dd50:	2702      	movs	r7, #2
    dd52:	4638      	mov	r0, r7
    dd54:	b011      	add	sp, #68	; 0x44
    dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd5a:	1d0b      	adds	r3, r1, #4
    dd5c:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    dd60:	f1b9 0f00 	cmp.w	r9, #0
    dd64:	d043      	beq.n	ddee <am_hal_uart_transfer+0xf2>
    dd66:	2f00      	cmp	r7, #0
    dd68:	f000 8185 	beq.w	e076 <am_hal_uart_transfer+0x37a>
    dd6c:	2800      	cmp	r0, #0
    dd6e:	f000 80eb 	beq.w	df48 <am_hal_uart_transfer+0x24c>
    dd72:	6802      	ldr	r2, [r0, #0]
    dd74:	499a      	ldr	r1, [pc, #616]	; (dfe0 <am_hal_uart_transfer+0x2e4>)
    dd76:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dd7a:	428a      	cmp	r2, r1
    dd7c:	f000 80e7 	beq.w	df4e <am_hal_uart_transfer+0x252>
    dd80:	2600      	movs	r6, #0
    dd82:	2702      	movs	r7, #2
    dd84:	f1bb 0f00 	cmp.w	fp, #0
    dd88:	d0c2      	beq.n	dd10 <am_hal_uart_transfer+0x14>
    dd8a:	f8cb 6000 	str.w	r6, [fp]
    dd8e:	e7bf      	b.n	dd10 <am_hal_uart_transfer+0x14>
    dd90:	2800      	cmp	r0, #0
    dd92:	d0dd      	beq.n	dd50 <am_hal_uart_transfer+0x54>
    dd94:	6803      	ldr	r3, [r0, #0]
    dd96:	4a92      	ldr	r2, [pc, #584]	; (dfe0 <am_hal_uart_transfer+0x2e4>)
    dd98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd9c:	4293      	cmp	r3, r2
    dd9e:	d1d7      	bne.n	dd50 <am_hal_uart_transfer+0x54>
    dda0:	9b00      	ldr	r3, [sp, #0]
    dda2:	b10b      	cbz	r3, dda8 <am_hal_uart_transfer+0xac>
    dda4:	f8c3 9000 	str.w	r9, [r3]
    dda8:	b1fe      	cbz	r6, ddea <am_hal_uart_transfer+0xee>
    ddaa:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ddae:	2b00      	cmp	r3, #0
    ddb0:	f040 8165 	bne.w	e07e <am_hal_uart_transfer+0x382>
    ddb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ddb6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ddba:	311c      	adds	r1, #28
    ddbc:	0309      	lsls	r1, r1, #12
    ddbe:	698a      	ldr	r2, [r1, #24]
    ddc0:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ddc4:	2a00      	cmp	r2, #0
    ddc6:	f040 818d 	bne.w	e0e4 <am_hal_uart_transfer+0x3e8>
    ddca:	f10a 33ff 	add.w	r3, sl, #4294967295
    ddce:	e003      	b.n	ddd8 <am_hal_uart_transfer+0xdc>
    ddd0:	6988      	ldr	r0, [r1, #24]
    ddd2:	0680      	lsls	r0, r0, #26
    ddd4:	f100 8151 	bmi.w	e07a <am_hal_uart_transfer+0x37e>
    ddd8:	3201      	adds	r2, #1
    ddda:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    ddde:	6008      	str	r0, [r1, #0]
    dde0:	4296      	cmp	r6, r2
    dde2:	d1f5      	bne.n	ddd0 <am_hal_uart_transfer+0xd4>
    dde4:	9b00      	ldr	r3, [sp, #0]
    dde6:	b103      	cbz	r3, ddea <am_hal_uart_transfer+0xee>
    dde8:	601e      	str	r6, [r3, #0]
    ddea:	2700      	movs	r7, #0
    ddec:	e790      	b.n	dd10 <am_hal_uart_transfer+0x14>
    ddee:	2800      	cmp	r0, #0
    ddf0:	d0ae      	beq.n	dd50 <am_hal_uart_transfer+0x54>
    ddf2:	6802      	ldr	r2, [r0, #0]
    ddf4:	497a      	ldr	r1, [pc, #488]	; (dfe0 <am_hal_uart_transfer+0x2e4>)
    ddf6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ddfa:	428a      	cmp	r2, r1
    ddfc:	d1a8      	bne.n	dd50 <am_hal_uart_transfer+0x54>
    ddfe:	f1bb 0f00 	cmp.w	fp, #0
    de02:	d001      	beq.n	de08 <am_hal_uart_transfer+0x10c>
    de04:	f8cb 9000 	str.w	r9, [fp]
    de08:	2f00      	cmp	r7, #0
    de0a:	d0ee      	beq.n	ddea <am_hal_uart_transfer+0xee>
    de0c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    de10:	2c00      	cmp	r4, #0
    de12:	f040 816c 	bne.w	e0ee <am_hal_uart_transfer+0x3f2>
    de16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    de18:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    de1c:	321c      	adds	r2, #28
    de1e:	0312      	lsls	r2, r2, #12
    de20:	6990      	ldr	r0, [r2, #24]
    de22:	f3c0 1000 	ubfx	r0, r0, #4, #1
    de26:	2800      	cmp	r0, #0
    de28:	f040 819d 	bne.w	e166 <am_hal_uart_transfer+0x46a>
    de2c:	6811      	ldr	r1, [r2, #0]
    de2e:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    de32:	bf08      	it	eq
    de34:	f103 33ff 	addeq.w	r3, r3, #4294967295
    de38:	d008      	beq.n	de4c <am_hal_uart_transfer+0x150>
    de3a:	e190      	b.n	e15e <am_hal_uart_transfer+0x462>
    de3c:	6991      	ldr	r1, [r2, #24]
    de3e:	06c8      	lsls	r0, r1, #27
    de40:	d409      	bmi.n	de56 <am_hal_uart_transfer+0x15a>
    de42:	6811      	ldr	r1, [r2, #0]
    de44:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    de48:	f040 814e 	bne.w	e0e8 <am_hal_uart_transfer+0x3ec>
    de4c:	3401      	adds	r4, #1
    de4e:	42a7      	cmp	r7, r4
    de50:	f803 1f01 	strb.w	r1, [r3, #1]!
    de54:	d1f2      	bne.n	de3c <am_hal_uart_transfer+0x140>
    de56:	2700      	movs	r7, #0
    de58:	f1bb 0f00 	cmp.w	fp, #0
    de5c:	f43f af58 	beq.w	dd10 <am_hal_uart_transfer+0x14>
    de60:	f8cb 4000 	str.w	r4, [fp]
    de64:	e754      	b.n	dd10 <am_hal_uart_transfer+0x14>
    de66:	4680      	mov	r8, r0
    de68:	e76e      	b.n	dd48 <am_hal_uart_transfer+0x4c>
    de6a:	9301      	str	r3, [sp, #4]
    de6c:	4651      	mov	r1, sl
    de6e:	46bb      	mov	fp, r7
    de70:	46b8      	mov	r8, r7
    de72:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    de76:	b9f2      	cbnz	r2, deb6 <am_hal_uart_transfer+0x1ba>
    de78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    de7a:	b19e      	cbz	r6, dea4 <am_hal_uart_transfer+0x1a8>
    de7c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    de80:	321c      	adds	r2, #28
    de82:	0312      	lsls	r2, r2, #12
    de84:	3901      	subs	r1, #1
    de86:	6994      	ldr	r4, [r2, #24]
    de88:	f3c4 1440 	ubfx	r4, r4, #5, #1
    de8c:	b11c      	cbz	r4, de96 <am_hal_uart_transfer+0x19a>
    de8e:	e047      	b.n	df20 <am_hal_uart_transfer+0x224>
    de90:	6993      	ldr	r3, [r2, #24]
    de92:	069b      	lsls	r3, r3, #26
    de94:	d441      	bmi.n	df1a <am_hal_uart_transfer+0x21e>
    de96:	3401      	adds	r4, #1
    de98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    de9c:	6013      	str	r3, [r2, #0]
    de9e:	42b4      	cmp	r4, r6
    dea0:	d1f6      	bne.n	de90 <am_hal_uart_transfer+0x194>
    dea2:	44a0      	add	r8, r4
    dea4:	9b00      	ldr	r3, [sp, #0]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d09f      	beq.n	ddea <am_hal_uart_transfer+0xee>
    deaa:	4638      	mov	r0, r7
    deac:	f8c3 8000 	str.w	r8, [r3]
    deb0:	b011      	add	sp, #68	; 0x44
    deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deb6:	6baa      	ldr	r2, [r5, #56]	; 0x38
    deb8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    deba:	1b14      	subs	r4, r2, r4
    debc:	42b4      	cmp	r4, r6
    debe:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    dec2:	bf28      	it	cs
    dec4:	4634      	movcs	r4, r6
    dec6:	4622      	mov	r2, r4
    dec8:	4618      	mov	r0, r3
    deca:	9302      	str	r3, [sp, #8]
    decc:	f000 f98e 	bl	e1ec <am_hal_queue_item_add>
    ded0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ded2:	9303      	str	r3, [sp, #12]
    ded4:	f7ff fb82 	bl	d5dc <am_hal_interrupt_master_disable>
    ded8:	9b03      	ldr	r3, [sp, #12]
    deda:	9008      	str	r0, [sp, #32]
    dedc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dee0:	331c      	adds	r3, #28
    dee2:	031b      	lsls	r3, r3, #12
    dee4:	9303      	str	r3, [sp, #12]
    dee6:	e00d      	b.n	df04 <am_hal_uart_transfer+0x208>
    dee8:	f000 f9b8 	bl	e25c <am_hal_queue_item_get>
    deec:	b190      	cbz	r0, df14 <am_hal_uart_transfer+0x218>
    deee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    def0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    def4:	331c      	adds	r3, #28
    def6:	031b      	lsls	r3, r3, #12
    def8:	699a      	ldr	r2, [r3, #24]
    defa:	0692      	lsls	r2, r2, #26
    defc:	bf5c      	itt	pl
    defe:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    df02:	601a      	strpl	r2, [r3, #0]
    df04:	9b03      	ldr	r3, [sp, #12]
    df06:	9802      	ldr	r0, [sp, #8]
    df08:	699b      	ldr	r3, [r3, #24]
    df0a:	069b      	lsls	r3, r3, #26
    df0c:	f04f 0201 	mov.w	r2, #1
    df10:	a907      	add	r1, sp, #28
    df12:	d5e9      	bpl.n	dee8 <am_hal_uart_transfer+0x1ec>
    df14:	9808      	ldr	r0, [sp, #32]
    df16:	f7ff fb65 	bl	d5e4 <am_hal_interrupt_master_set>
    df1a:	1b36      	subs	r6, r6, r4
    df1c:	44a0      	add	r8, r4
    df1e:	d0c1      	beq.n	dea4 <am_hal_uart_transfer+0x1a8>
    df20:	2001      	movs	r0, #1
    df22:	f7ff f96d 	bl	d200 <am_hal_flash_delay>
    df26:	f1b9 3fff 	cmp.w	r9, #4294967295
    df2a:	d001      	beq.n	df30 <am_hal_uart_transfer+0x234>
    df2c:	f10b 0b01 	add.w	fp, fp, #1
    df30:	45d9      	cmp	r9, fp
    df32:	d9b7      	bls.n	dea4 <am_hal_uart_transfer+0x1a8>
    df34:	682a      	ldr	r2, [r5, #0]
    df36:	9b01      	ldr	r3, [sp, #4]
    df38:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    df3c:	429a      	cmp	r2, r3
    df3e:	eb0a 0108 	add.w	r1, sl, r8
    df42:	f47f af01 	bne.w	dd48 <am_hal_uart_transfer+0x4c>
    df46:	e794      	b.n	de72 <am_hal_uart_transfer+0x176>
    df48:	4606      	mov	r6, r0
    df4a:	2702      	movs	r7, #2
    df4c:	e71a      	b.n	dd84 <am_hal_uart_transfer+0x88>
    df4e:	9200      	str	r2, [sp, #0]
    df50:	f100 0248 	add.w	r2, r0, #72	; 0x48
    df54:	f04f 0a00 	mov.w	sl, #0
    df58:	9202      	str	r2, [sp, #8]
    df5a:	465a      	mov	r2, fp
    df5c:	4698      	mov	r8, r3
    df5e:	469b      	mov	fp, r3
    df60:	4656      	mov	r6, sl
    df62:	4613      	mov	r3, r2
    df64:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    df68:	2a00      	cmp	r2, #0
    df6a:	d152      	bne.n	e012 <am_hal_uart_transfer+0x316>
    df6c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    df6e:	b3a7      	cbz	r7, dfda <am_hal_uart_transfer+0x2de>
    df70:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    df74:	311c      	adds	r1, #28
    df76:	0309      	lsls	r1, r1, #12
    df78:	698a      	ldr	r2, [r1, #24]
    df7a:	06d0      	lsls	r0, r2, #27
    df7c:	d432      	bmi.n	dfe4 <am_hal_uart_transfer+0x2e8>
    df7e:	680a      	ldr	r2, [r1, #0]
    df80:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    df84:	f040 80aa 	bne.w	e0dc <am_hal_uart_transfer+0x3e0>
    df88:	f108 38ff 	add.w	r8, r8, #4294967295
    df8c:	e006      	b.n	df9c <am_hal_uart_transfer+0x2a0>
    df8e:	698a      	ldr	r2, [r1, #24]
    df90:	06d2      	lsls	r2, r2, #27
    df92:	d41f      	bmi.n	dfd4 <am_hal_uart_transfer+0x2d8>
    df94:	680a      	ldr	r2, [r1, #0]
    df96:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    df9a:	d161      	bne.n	e060 <am_hal_uart_transfer+0x364>
    df9c:	3401      	adds	r4, #1
    df9e:	42bc      	cmp	r4, r7
    dfa0:	f808 2f01 	strb.w	r2, [r8, #1]!
    dfa4:	d1f3      	bne.n	df8e <am_hal_uart_transfer+0x292>
    dfa6:	469b      	mov	fp, r3
    dfa8:	4426      	add	r6, r4
    dfaa:	f1bb 0f00 	cmp.w	fp, #0
    dfae:	f43f af1c 	beq.w	ddea <am_hal_uart_transfer+0xee>
    dfb2:	f8cb 6000 	str.w	r6, [fp]
    dfb6:	2700      	movs	r7, #0
    dfb8:	e6aa      	b.n	dd10 <am_hal_uart_transfer+0x14>
    dfba:	9807      	ldr	r0, [sp, #28]
    dfbc:	f7ff fb12 	bl	d5e4 <am_hal_interrupt_master_set>
    dfc0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    dfc2:	9802      	ldr	r0, [sp, #8]
    dfc4:	42bc      	cmp	r4, r7
    dfc6:	bf28      	it	cs
    dfc8:	463c      	movcs	r4, r7
    dfca:	4641      	mov	r1, r8
    dfcc:	4622      	mov	r2, r4
    dfce:	f000 f945 	bl	e25c <am_hal_queue_item_get>
    dfd2:	9b01      	ldr	r3, [sp, #4]
    dfd4:	1b3f      	subs	r7, r7, r4
    dfd6:	4426      	add	r6, r4
    dfd8:	d104      	bne.n	dfe4 <am_hal_uart_transfer+0x2e8>
    dfda:	469b      	mov	fp, r3
    dfdc:	e7e5      	b.n	dfaa <am_hal_uart_transfer+0x2ae>
    dfde:	bf00      	nop
    dfe0:	01ea9e06 	.word	0x01ea9e06
    dfe4:	2001      	movs	r0, #1
    dfe6:	9301      	str	r3, [sp, #4]
    dfe8:	f7ff f90a 	bl	d200 <am_hal_flash_delay>
    dfec:	f1b9 3fff 	cmp.w	r9, #4294967295
    dff0:	9b01      	ldr	r3, [sp, #4]
    dff2:	d001      	beq.n	dff8 <am_hal_uart_transfer+0x2fc>
    dff4:	f10a 0a01 	add.w	sl, sl, #1
    dff8:	45d1      	cmp	r9, sl
    dffa:	d9ee      	bls.n	dfda <am_hal_uart_transfer+0x2de>
    dffc:	682a      	ldr	r2, [r5, #0]
    dffe:	9900      	ldr	r1, [sp, #0]
    e000:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e004:	428a      	cmp	r2, r1
    e006:	eb0b 0806 	add.w	r8, fp, r6
    e00a:	d0ab      	beq.n	df64 <am_hal_uart_transfer+0x268>
    e00c:	469b      	mov	fp, r3
    e00e:	2702      	movs	r7, #2
    e010:	e6b8      	b.n	dd84 <am_hal_uart_transfer+0x88>
    e012:	9301      	str	r3, [sp, #4]
    e014:	f7ff fae2 	bl	d5dc <am_hal_interrupt_master_disable>
    e018:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e01a:	9007      	str	r0, [sp, #28]
    e01c:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e020:	301c      	adds	r0, #28
    e022:	9b01      	ldr	r3, [sp, #4]
    e024:	0300      	lsls	r0, r0, #12
    e026:	ac08      	add	r4, sp, #32
    e028:	2200      	movs	r2, #0
    e02a:	6981      	ldr	r1, [r0, #24]
    e02c:	06c9      	lsls	r1, r1, #27
    e02e:	d409      	bmi.n	e044 <am_hal_uart_transfer+0x348>
    e030:	6801      	ldr	r1, [r0, #0]
    e032:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e036:	f102 0201 	add.w	r2, r2, #1
    e03a:	d118      	bne.n	e06e <am_hal_uart_transfer+0x372>
    e03c:	2a20      	cmp	r2, #32
    e03e:	f804 1b01 	strb.w	r1, [r4], #1
    e042:	d1f2      	bne.n	e02a <am_hal_uart_transfer+0x32e>
    e044:	a908      	add	r1, sp, #32
    e046:	9802      	ldr	r0, [sp, #8]
    e048:	9301      	str	r3, [sp, #4]
    e04a:	f000 f8cf 	bl	e1ec <am_hal_queue_item_add>
    e04e:	9b01      	ldr	r3, [sp, #4]
    e050:	2800      	cmp	r0, #0
    e052:	d1b2      	bne.n	dfba <am_hal_uart_transfer+0x2be>
    e054:	4f45      	ldr	r7, [pc, #276]	; (e16c <am_hal_uart_transfer+0x470>)
    e056:	469b      	mov	fp, r3
    e058:	9807      	ldr	r0, [sp, #28]
    e05a:	f7ff fac3 	bl	d5e4 <am_hal_interrupt_master_set>
    e05e:	e691      	b.n	dd84 <am_hal_uart_transfer+0x88>
    e060:	469b      	mov	fp, r3
    e062:	4426      	add	r6, r4
    e064:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e068:	e68c      	b.n	dd84 <am_hal_uart_transfer+0x88>
    e06a:	46b8      	mov	r8, r7
    e06c:	e71a      	b.n	dea4 <am_hal_uart_transfer+0x1a8>
    e06e:	469b      	mov	fp, r3
    e070:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e074:	e7f0      	b.n	e058 <am_hal_uart_transfer+0x35c>
    e076:	463e      	mov	r6, r7
    e078:	e797      	b.n	dfaa <am_hal_uart_transfer+0x2ae>
    e07a:	4616      	mov	r6, r2
    e07c:	e6b2      	b.n	dde4 <am_hal_uart_transfer+0xe8>
    e07e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e080:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e082:	1a9b      	subs	r3, r3, r2
    e084:	429e      	cmp	r6, r3
    e086:	bf28      	it	cs
    e088:	461e      	movcs	r6, r3
    e08a:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e08e:	4651      	mov	r1, sl
    e090:	4632      	mov	r2, r6
    e092:	4620      	mov	r0, r4
    e094:	f000 f8aa 	bl	e1ec <am_hal_queue_item_add>
    e098:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e09a:	f7ff fa9f 	bl	d5dc <am_hal_interrupt_master_disable>
    e09e:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e0a2:	371c      	adds	r7, #28
    e0a4:	033f      	lsls	r7, r7, #12
    e0a6:	9005      	str	r0, [sp, #20]
    e0a8:	e00d      	b.n	e0c6 <am_hal_uart_transfer+0x3ca>
    e0aa:	f000 f8d7 	bl	e25c <am_hal_queue_item_get>
    e0ae:	b188      	cbz	r0, e0d4 <am_hal_uart_transfer+0x3d8>
    e0b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e0b2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e0b6:	331c      	adds	r3, #28
    e0b8:	031b      	lsls	r3, r3, #12
    e0ba:	699a      	ldr	r2, [r3, #24]
    e0bc:	0692      	lsls	r2, r2, #26
    e0be:	bf5c      	itt	pl
    e0c0:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e0c4:	601a      	strpl	r2, [r3, #0]
    e0c6:	69bb      	ldr	r3, [r7, #24]
    e0c8:	069b      	lsls	r3, r3, #26
    e0ca:	f04f 0201 	mov.w	r2, #1
    e0ce:	a908      	add	r1, sp, #32
    e0d0:	4620      	mov	r0, r4
    e0d2:	d5ea      	bpl.n	e0aa <am_hal_uart_transfer+0x3ae>
    e0d4:	9805      	ldr	r0, [sp, #20]
    e0d6:	f7ff fa85 	bl	d5e4 <am_hal_interrupt_master_set>
    e0da:	e683      	b.n	dde4 <am_hal_uart_transfer+0xe8>
    e0dc:	469b      	mov	fp, r3
    e0de:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e0e2:	e64f      	b.n	dd84 <am_hal_uart_transfer+0x88>
    e0e4:	461e      	mov	r6, r3
    e0e6:	e67d      	b.n	dde4 <am_hal_uart_transfer+0xe8>
    e0e8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e0ec:	e6b4      	b.n	de58 <am_hal_uart_transfer+0x15c>
    e0ee:	9300      	str	r3, [sp, #0]
    e0f0:	f7ff fa74 	bl	d5dc <am_hal_interrupt_master_disable>
    e0f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e0f6:	9006      	str	r0, [sp, #24]
    e0f8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e0fc:	321c      	adds	r2, #28
    e0fe:	0311      	lsls	r1, r2, #12
    e100:	a808      	add	r0, sp, #32
    e102:	2200      	movs	r2, #0
    e104:	9b00      	ldr	r3, [sp, #0]
    e106:	e009      	b.n	e11c <am_hal_uart_transfer+0x420>
    e108:	680c      	ldr	r4, [r1, #0]
    e10a:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e10e:	f102 0201 	add.w	r2, r2, #1
    e112:	d121      	bne.n	e158 <am_hal_uart_transfer+0x45c>
    e114:	2a20      	cmp	r2, #32
    e116:	f800 4b01 	strb.w	r4, [r0], #1
    e11a:	d002      	beq.n	e122 <am_hal_uart_transfer+0x426>
    e11c:	698c      	ldr	r4, [r1, #24]
    e11e:	06e4      	lsls	r4, r4, #27
    e120:	d5f2      	bpl.n	e108 <am_hal_uart_transfer+0x40c>
    e122:	f105 0648 	add.w	r6, r5, #72	; 0x48
    e126:	a908      	add	r1, sp, #32
    e128:	4630      	mov	r0, r6
    e12a:	9300      	str	r3, [sp, #0]
    e12c:	f000 f85e 	bl	e1ec <am_hal_queue_item_add>
    e130:	b920      	cbnz	r0, e13c <am_hal_uart_transfer+0x440>
    e132:	4f0e      	ldr	r7, [pc, #56]	; (e16c <am_hal_uart_transfer+0x470>)
    e134:	9806      	ldr	r0, [sp, #24]
    e136:	f7ff fa55 	bl	d5e4 <am_hal_interrupt_master_set>
    e13a:	e5e9      	b.n	dd10 <am_hal_uart_transfer+0x14>
    e13c:	9806      	ldr	r0, [sp, #24]
    e13e:	f7ff fa51 	bl	d5e4 <am_hal_interrupt_master_set>
    e142:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e144:	9b00      	ldr	r3, [sp, #0]
    e146:	42bc      	cmp	r4, r7
    e148:	bf28      	it	cs
    e14a:	463c      	movcs	r4, r7
    e14c:	4619      	mov	r1, r3
    e14e:	4630      	mov	r0, r6
    e150:	4622      	mov	r2, r4
    e152:	f000 f883 	bl	e25c <am_hal_queue_item_get>
    e156:	e67e      	b.n	de56 <am_hal_uart_transfer+0x15a>
    e158:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e15c:	e7ea      	b.n	e134 <am_hal_uart_transfer+0x438>
    e15e:	4604      	mov	r4, r0
    e160:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e164:	e678      	b.n	de58 <am_hal_uart_transfer+0x15c>
    e166:	4627      	mov	r7, r4
    e168:	e676      	b.n	de58 <am_hal_uart_transfer+0x15c>
    e16a:	bf00      	nop
    e16c:	08000001 	.word	0x08000001

0000e170 <am_hal_uart_tx_flush>:
    e170:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e174:	b570      	push	{r4, r5, r6, lr}
    e176:	4604      	mov	r4, r0
    e178:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e17a:	b183      	cbz	r3, e19e <am_hal_uart_tx_flush+0x2e>
    e17c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e17e:	b173      	cbz	r3, e19e <am_hal_uart_tx_flush+0x2e>
    e180:	4e13      	ldr	r6, [pc, #76]	; (e1d0 <am_hal_uart_tx_flush+0x60>)
    e182:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e184:	fbb6 f0f0 	udiv	r0, r6, r0
    e188:	2802      	cmp	r0, #2
    e18a:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e18e:	bf8c      	ite	hi
    e190:	3829      	subhi	r0, #41	; 0x29
    e192:	2001      	movls	r0, #1
    e194:	f7ff f834 	bl	d200 <am_hal_flash_delay>
    e198:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e19a:	2b00      	cmp	r3, #0
    e19c:	d1f1      	bne.n	e182 <am_hal_uart_tx_flush+0x12>
    e19e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1a2:	351c      	adds	r5, #28
    e1a4:	032d      	lsls	r5, r5, #12
    e1a6:	69ab      	ldr	r3, [r5, #24]
    e1a8:	071a      	lsls	r2, r3, #28
    e1aa:	d50e      	bpl.n	e1ca <am_hal_uart_tx_flush+0x5a>
    e1ac:	4e08      	ldr	r6, [pc, #32]	; (e1d0 <am_hal_uart_tx_flush+0x60>)
    e1ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e1b0:	fbb6 f0f0 	udiv	r0, r6, r0
    e1b4:	2802      	cmp	r0, #2
    e1b6:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e1ba:	bf8c      	ite	hi
    e1bc:	3829      	subhi	r0, #41	; 0x29
    e1be:	2001      	movls	r0, #1
    e1c0:	f7ff f81e 	bl	d200 <am_hal_flash_delay>
    e1c4:	69ab      	ldr	r3, [r5, #24]
    e1c6:	071b      	lsls	r3, r3, #28
    e1c8:	d4f1      	bmi.n	e1ae <am_hal_uart_tx_flush+0x3e>
    e1ca:	2000      	movs	r0, #0
    e1cc:	bd70      	pop	{r4, r5, r6, pc}
    e1ce:	bf00      	nop
    e1d0:	00b71b00 	.word	0x00b71b00

0000e1d4 <am_hal_queue_init>:
    e1d4:	b410      	push	{r4}
    e1d6:	2400      	movs	r4, #0
    e1d8:	6004      	str	r4, [r0, #0]
    e1da:	6044      	str	r4, [r0, #4]
    e1dc:	6084      	str	r4, [r0, #8]
    e1de:	60c3      	str	r3, [r0, #12]
    e1e0:	6102      	str	r2, [r0, #16]
    e1e2:	6141      	str	r1, [r0, #20]
    e1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    e1e8:	4770      	bx	lr
    e1ea:	bf00      	nop

0000e1ec <am_hal_queue_item_add>:
    e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1ee:	4604      	mov	r4, r0
    e1f0:	6906      	ldr	r6, [r0, #16]
    e1f2:	b083      	sub	sp, #12
    e1f4:	fb06 f602 	mul.w	r6, r6, r2
    e1f8:	460d      	mov	r5, r1
    e1fa:	f7ff f9ef 	bl	d5dc <am_hal_interrupt_master_disable>
    e1fe:	68e7      	ldr	r7, [r4, #12]
    e200:	68a2      	ldr	r2, [r4, #8]
    e202:	9001      	str	r0, [sp, #4]
    e204:	1abb      	subs	r3, r7, r2
    e206:	429e      	cmp	r6, r3
    e208:	d826      	bhi.n	e258 <am_hal_queue_item_add+0x6c>
    e20a:	b196      	cbz	r6, e232 <am_hal_queue_item_add+0x46>
    e20c:	6823      	ldr	r3, [r4, #0]
    e20e:	4629      	mov	r1, r5
    e210:	b1c5      	cbz	r5, e244 <am_hal_queue_item_add+0x58>
    e212:	19af      	adds	r7, r5, r6
    e214:	6962      	ldr	r2, [r4, #20]
    e216:	f811 0b01 	ldrb.w	r0, [r1], #1
    e21a:	54d0      	strb	r0, [r2, r3]
    e21c:	6823      	ldr	r3, [r4, #0]
    e21e:	68e5      	ldr	r5, [r4, #12]
    e220:	3301      	adds	r3, #1
    e222:	42b9      	cmp	r1, r7
    e224:	fbb3 f0f5 	udiv	r0, r3, r5
    e228:	fb05 3310 	mls	r3, r5, r0, r3
    e22c:	6023      	str	r3, [r4, #0]
    e22e:	d1f1      	bne.n	e214 <am_hal_queue_item_add+0x28>
    e230:	68a2      	ldr	r2, [r4, #8]
    e232:	4432      	add	r2, r6
    e234:	60a2      	str	r2, [r4, #8]
    e236:	2401      	movs	r4, #1
    e238:	9801      	ldr	r0, [sp, #4]
    e23a:	f7ff f9d3 	bl	d5e4 <am_hal_interrupt_master_set>
    e23e:	4620      	mov	r0, r4
    e240:	b003      	add	sp, #12
    e242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e244:	3101      	adds	r1, #1
    e246:	3301      	adds	r3, #1
    e248:	428e      	cmp	r6, r1
    e24a:	fbb3 f0f7 	udiv	r0, r3, r7
    e24e:	fb07 3310 	mls	r3, r7, r0, r3
    e252:	d1f7      	bne.n	e244 <am_hal_queue_item_add+0x58>
    e254:	6023      	str	r3, [r4, #0]
    e256:	e7ec      	b.n	e232 <am_hal_queue_item_add+0x46>
    e258:	2400      	movs	r4, #0
    e25a:	e7ed      	b.n	e238 <am_hal_queue_item_add+0x4c>

0000e25c <am_hal_queue_item_get>:
    e25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e25e:	4604      	mov	r4, r0
    e260:	6906      	ldr	r6, [r0, #16]
    e262:	b083      	sub	sp, #12
    e264:	fb06 f602 	mul.w	r6, r6, r2
    e268:	460d      	mov	r5, r1
    e26a:	f7ff f9b7 	bl	d5dc <am_hal_interrupt_master_disable>
    e26e:	68a2      	ldr	r2, [r4, #8]
    e270:	9001      	str	r0, [sp, #4]
    e272:	4296      	cmp	r6, r2
    e274:	d81c      	bhi.n	e2b0 <am_hal_queue_item_get+0x54>
    e276:	b196      	cbz	r6, e29e <am_hal_queue_item_get+0x42>
    e278:	6863      	ldr	r3, [r4, #4]
    e27a:	b1dd      	cbz	r5, e2b4 <am_hal_queue_item_get+0x58>
    e27c:	4629      	mov	r1, r5
    e27e:	19af      	adds	r7, r5, r6
    e280:	6962      	ldr	r2, [r4, #20]
    e282:	5cd3      	ldrb	r3, [r2, r3]
    e284:	f801 3b01 	strb.w	r3, [r1], #1
    e288:	6863      	ldr	r3, [r4, #4]
    e28a:	68e5      	ldr	r5, [r4, #12]
    e28c:	3301      	adds	r3, #1
    e28e:	428f      	cmp	r7, r1
    e290:	fbb3 f0f5 	udiv	r0, r3, r5
    e294:	fb05 3310 	mls	r3, r5, r0, r3
    e298:	6063      	str	r3, [r4, #4]
    e29a:	d1f1      	bne.n	e280 <am_hal_queue_item_get+0x24>
    e29c:	68a2      	ldr	r2, [r4, #8]
    e29e:	1b92      	subs	r2, r2, r6
    e2a0:	60a2      	str	r2, [r4, #8]
    e2a2:	2401      	movs	r4, #1
    e2a4:	9801      	ldr	r0, [sp, #4]
    e2a6:	f7ff f99d 	bl	d5e4 <am_hal_interrupt_master_set>
    e2aa:	4620      	mov	r0, r4
    e2ac:	b003      	add	sp, #12
    e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2b0:	2400      	movs	r4, #0
    e2b2:	e7f7      	b.n	e2a4 <am_hal_queue_item_get+0x48>
    e2b4:	68e0      	ldr	r0, [r4, #12]
    e2b6:	4629      	mov	r1, r5
    e2b8:	3101      	adds	r1, #1
    e2ba:	3301      	adds	r3, #1
    e2bc:	428e      	cmp	r6, r1
    e2be:	fbb3 f5f0 	udiv	r5, r3, r0
    e2c2:	fb00 3315 	mls	r3, r0, r5, r3
    e2c6:	d1f7      	bne.n	e2b8 <am_hal_queue_item_get+0x5c>
    e2c8:	6063      	str	r3, [r4, #4]
    e2ca:	e7e8      	b.n	e29e <am_hal_queue_item_get+0x42>
    e2cc:	72617053 	.word	0x72617053
    e2d0:	6e75466b 	.word	0x6e75466b
    e2d4:	67644520 	.word	0x67644520
    e2d8:	72502065 	.word	0x72502065
    e2dc:	63656a6f 	.word	0x63656a6f
    e2e0:	65542074 	.word	0x65542074
    e2e4:	616c706d 	.word	0x616c706d
    e2e8:	000a6574 	.word	0x000a6574
    e2ec:	303a3331 	.word	0x303a3331
    e2f0:	34343a31 	.word	0x34343a31
    e2f4:	00000000 	.word	0x00000000
    e2f8:	20626546 	.word	0x20626546
    e2fc:	32203232 	.word	0x32203232
    e300:	00393130 	.word	0x00393130
    e304:	706d6f43 	.word	0x706d6f43
    e308:	64656c69 	.word	0x64656c69
    e30c:	206e6f20 	.word	0x206e6f20
    e310:	202c7325 	.word	0x202c7325
    e314:	0a0a7325 	.word	0x0a0a7325
    e318:	00000000 	.word	0x00000000
    e31c:	72617053 	.word	0x72617053
    e320:	6e75466b 	.word	0x6e75466b
    e324:	67644520 	.word	0x67644520
    e328:	65442065 	.word	0x65442065
    e32c:	20677562 	.word	0x20677562
    e330:	7074754f 	.word	0x7074754f
    e334:	28207475 	.word	0x28207475
    e338:	54524155 	.word	0x54524155
    e33c:	000a0d29 	.word	0x000a0d29
    e340:	6c6c6548 	.word	0x6c6c6548
    e344:	57202c6f 	.word	0x57202c6f
    e348:	646c726f 	.word	0x646c726f
    e34c:	000a0d21 	.word	0x000a0d21
    e350:	73696854 	.word	0x73696854
    e354:	6f727020 	.word	0x6f727020
    e358:	7463656a 	.word	0x7463656a
    e35c:	20736920 	.word	0x20736920
    e360:	6e61656d 	.word	0x6e61656d
    e364:	6f742074 	.word	0x6f742074
    e368:	72657320 	.word	0x72657320
    e36c:	61206576 	.word	0x61206576
    e370:	20612073 	.word	0x20612073
    e374:	706d6574 	.word	0x706d6574
    e378:	6574616c 	.word	0x6574616c
    e37c:	726f6620 	.word	0x726f6620
    e380:	6b616d20 	.word	0x6b616d20
    e384:	20676e69 	.word	0x20676e69
    e388:	72756f79 	.word	0x72756f79
    e38c:	6e776f20 	.word	0x6e776f20
    e390:	70706120 	.word	0x70706120
    e394:	73612073 	.word	0x73612073
    e398:	6d206120 	.word	0x6d206120
    e39c:	66656b61 	.word	0x66656b61
    e3a0:	20656c69 	.word	0x20656c69
    e3a4:	6a6f7270 	.word	0x6a6f7270
    e3a8:	0d746365 	.word	0x0d746365
    e3ac:	0000000a 	.word	0x0000000a
    e3b0:	756c6156 	.word	0x756c6156
    e3b4:	6e6f2065 	.word	0x6e6f2065
    e3b8:	74756220 	.word	0x74756220
    e3bc:	206e6f74 	.word	0x206e6f74
    e3c0:	69203431 	.word	0x69203431
    e3c4:	25203a73 	.word	0x25203a73
    e3c8:	000a0d64 	.word	0x000a0d64
    e3cc:	0a0a0a0a 	.word	0x0a0a0a0a
    e3d0:	0a0a0a0a 	.word	0x0a0a0a0a
    e3d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e3d8:	0a0a0a0a 	.word	0x0a0a0a0a
    e3dc:	00000a0a 	.word	0x00000a0a

0000e3e0 <g_sBspUartConfig>:
    e3e0:	0001c200 00000060 00000000 00000000     ....`...........
    e3f0:	00000000 00000012 00000000 00000000     ................
	...

0000e408 <g_AM_BSP_GPIO_COM_UART_RX>:
    e408:	00000000                                ....

0000e40c <g_AM_BSP_GPIO_COM_UART_TX>:
    e40c:	00000000                                ....

0000e410 <am_hal_cachectrl_defaults>:
    e410:	00000308                                ....

0000e414 <g_AM_HAL_GPIO_INPUT>:
    e414:	00001003                                ....

0000e418 <g_ui8Bit76Capabilities>:
    e418:	02800101 80010180 80800101 80808080     ................
    e428:	80808080 80808008 01800180 80808080     ................
    e438:	80808080 01800402 01010401 80808080     ................
    e448:	00000101                                ....

0000e44c <g_ui8NCEtable>:
    e44c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e45c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e46c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e47c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e48c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e49c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e4ac:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e4bc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e4cc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e4dc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e4ec:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e4fc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e50c:	32221202 43231303                       .."2..#C

0000e514 <g_ui8Inpen>:
    e514:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e524:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e534:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e544:	00003130                                01..

0000e548 <g_AM_HAL_GPIO_DISABLE>:
    e548:	00000003                                ....

0000e54c <g_AM_HAL_GPIO_OUTPUT>:
    e54c:	00000403                                ....

0000e550 <g_ui8nCEpins>:
    e550:	02070707 00080802 01020202 01010101     ................
    e560:	01010101 01010101 01010101 01010101     ................
    e570:	01010101 08010101 01010008 01010101     ................
    e580:	00000101                                ....

0000e584 <g_AM_HAL_GPIO_OUTPUT_12>:
    e584:	00000703                                ....

0000e588 <g_am_hal_mcuctrl_flash_size>:
    e588:	00004000 00008000 00010000 00020000     .@..............
    e598:	00040000 00080000 00100000 00200000     .............. .
	...

0000e5c8 <g_am_hal_mcuctrl_sram_size>:
    e5c8:	00004000 00008000 00010000 00020000     .@..............
    e5d8:	00040000 00080000 00100000 00060000     ................
	...

0000e608 <am_hal_pwrctrl_peripheral_control>:
	...
    e614:	00000001 00000004 00000004 00000002     ................
    e624:	00000008 00000008 00000004 00000008     ................
    e634:	00000008 00000008 00000008 00000008     ................
    e644:	00000010 00000010 00000010 00000020     ............ ...
    e654:	00000010 00000010 00000040 00000010     ........@.......
    e664:	00000010 00000080 00000004 00000004     ................
    e674:	00000100 00000004 00000004 00000200     ................
    e684:	00000020 00000020 00000400 00000004      ... ...........
    e694:	00000004 00000800 00000040 00000040     ........@...@...
    e6a4:	00001000 00000080 00000080 00002000     ............. ..
    e6b4:	00000100 00000100                       ........
