
bin/example2_dual_mic_dma.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 a5 d5 00 00 0d d6 00 00 d9 c6 00 00     ................
    c010:	d9 c6 00 00 d9 c6 00 00 d9 c6 00 00 00 00 00 00     ................
	...
    c02c:	13 d6 00 00 13 d6 00 00 00 00 00 00 13 d6 00 00     ................
    c03c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c04c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c05c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c06c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c07c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 dd c1 00 00     ................
    c08c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c09c:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c0ac:	13 d6 00 00 13 d6 00 00 13 d6 00 00 13 d6 00 00     ................
    c0bc:	13 d6 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	79fb      	ldrb	r3, [r7, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4907      	ldr	r1, [pc, #28]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c1e2:	4b17      	ldr	r3, [pc, #92]	; (c240 <am_adc_isr+0x64>)
    c1e4:	681b      	ldr	r3, [r3, #0]
    c1e6:	1d39      	adds	r1, r7, #4
    c1e8:	2200      	movs	r2, #0
    c1ea:	4618      	mov	r0, r3
    c1ec:	f001 fb64 	bl	d8b8 <am_hal_adc_interrupt_status>
    c1f0:	4603      	mov	r3, r0
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d002      	beq.n	c1fc <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC0 interrupt status\n");
    c1f6:	4813      	ldr	r0, [pc, #76]	; (c244 <am_adc_isr+0x68>)
    c1f8:	f001 f9a6 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c1fc:	4b10      	ldr	r3, [pc, #64]	; (c240 <am_adc_isr+0x64>)
    c1fe:	681b      	ldr	r3, [r3, #0]
    c200:	687a      	ldr	r2, [r7, #4]
    c202:	4611      	mov	r1, r2
    c204:	4618      	mov	r0, r3
    c206:	f001 fb75 	bl	d8f4 <am_hal_adc_interrupt_clear>
    c20a:	4603      	mov	r3, r0
    c20c:	2b00      	cmp	r3, #0
    c20e:	d002      	beq.n	c216 <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC0 interrupt status\n");
    c210:	480d      	ldr	r0, [pc, #52]	; (c248 <am_adc_isr+0x6c>)
    c212:	f001 f999 	bl	d548 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c21c:	2b00      	cmp	r3, #0
    c21e:	d002      	beq.n	c226 <am_adc_isr+0x4a>
    {
        g_bADCDMAComplete = true;
    c220:	4b0a      	ldr	r3, [pc, #40]	; (c24c <am_adc_isr+0x70>)
    c222:	2201      	movs	r2, #1
    c224:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c22c:	2b00      	cmp	r3, #0
    c22e:	d002      	beq.n	c236 <am_adc_isr+0x5a>
    {
        g_bADCDMAError = true;
    c230:	4b07      	ldr	r3, [pc, #28]	; (c250 <am_adc_isr+0x74>)
    c232:	2201      	movs	r2, #1
    c234:	701a      	strb	r2, [r3, #0]
    }
}
    c236:	bf00      	nop
    c238:	3708      	adds	r7, #8
    c23a:	46bd      	mov	sp, r7
    c23c:	bd80      	pop	{r7, pc}
    c23e:	bf00      	nop
    c240:	10001010 	.word	0x10001010
    c244:	0000eb64 	.word	0x0000eb64
    c248:	0000eb8c 	.word	0x0000eb8c
    c24c:	10003128 	.word	0x10003128
    c250:	1000712c 	.word	0x1000712c

0000c254 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c254:	b580      	push	{r7, lr}
    c256:	af00      	add	r7, sp, #0
#endif

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c258:	2001      	movs	r0, #1
    c25a:	f001 fffb 	bl	e254 <am_hal_sysctrl_sleep>
    // Re-enable peripherals for run mode.
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_enable();
#endif
}
    c25e:	bf00      	nop
    c260:	bd80      	pop	{r7, pc}
	...

0000c264 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    c264:	b580      	push	{r7, lr}
    c266:	b084      	sub	sp, #16
    c268:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    c26a:	2301      	movs	r3, #1
    c26c:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    c26e:	2301      	movs	r3, #1
    c270:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    c272:	2301      	movs	r3, #1
    c274:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c276:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c27a:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    c27c:	4b0c      	ldr	r3, [pc, #48]	; (c2b0 <adc_config_dma+0x4c>)
    c27e:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    c280:	4b0c      	ldr	r3, [pc, #48]	; (c2b4 <adc_config_dma+0x50>)
    c282:	681b      	ldr	r3, [r3, #0]
    c284:	1d3a      	adds	r2, r7, #4
    c286:	4611      	mov	r1, r2
    c288:	4618      	mov	r0, r3
    c28a:	f001 faa7 	bl	d7dc <am_hal_adc_configure_dma>
    c28e:	4603      	mov	r3, r0
    c290:	2b00      	cmp	r3, #0
    c292:	d002      	beq.n	c29a <adc_config_dma+0x36>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    c294:	4808      	ldr	r0, [pc, #32]	; (c2b8 <adc_config_dma+0x54>)
    c296:	f001 f957 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    c29a:	4b08      	ldr	r3, [pc, #32]	; (c2bc <adc_config_dma+0x58>)
    c29c:	2200      	movs	r2, #0
    c29e:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    c2a0:	4b07      	ldr	r3, [pc, #28]	; (c2c0 <adc_config_dma+0x5c>)
    c2a2:	2200      	movs	r2, #0
    c2a4:	701a      	strb	r2, [r3, #0]
}
    c2a6:	bf00      	nop
    c2a8:	3710      	adds	r7, #16
    c2aa:	46bd      	mov	sp, r7
    c2ac:	bd80      	pop	{r7, pc}
    c2ae:	bf00      	nop
    c2b0:	10001128 	.word	0x10001128
    c2b4:	10001010 	.word	0x10001010
    c2b8:	0000ebb4 	.word	0x0000ebb4
    c2bc:	10003128 	.word	0x10003128
    c2c0:	1000712c 	.word	0x1000712c

0000c2c4 <adc_config0>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config0(void)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2ca:	493c      	ldr	r1, [pc, #240]	; (c3bc <adc_config0+0xf8>)
    c2cc:	2000      	movs	r0, #0
    c2ce:	f001 f9f5 	bl	d6bc <am_hal_adc_initialize>
    c2d2:	4603      	mov	r3, r0
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d002      	beq.n	c2de <adc_config0+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC0 instance failed.\n");
    c2d8:	4839      	ldr	r0, [pc, #228]	; (c3c0 <adc_config0+0xfc>)
    c2da:	f001 f935 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2de:	4b37      	ldr	r3, [pc, #220]	; (c3bc <adc_config0+0xf8>)
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	2200      	movs	r2, #0
    c2e4:	2100      	movs	r1, #0
    c2e6:	4618      	mov	r0, r3
    c2e8:	f001 fb28 	bl	d93c <am_hal_adc_power_control>
    c2ec:	4603      	mov	r3, r0
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d002      	beq.n	c2f8 <adc_config0+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC0 power on failed.\n");
    c2f2:	4834      	ldr	r0, [pc, #208]	; (c3c4 <adc_config0+0x100>)
    c2f4:	f001 f928 	bl	d548 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC_DIV2; // AM_HAL_ADC_CLKSEL_HFRC;
    c2f8:	2302      	movs	r3, #2
    c2fa:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2fc:	2300      	movs	r3, #0
    c2fe:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c300:	2307      	movs	r3, #7
    c302:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;  //AM_HAL_ADC_REFSEL_INT_1P5;
    c304:	2300      	movs	r3, #0
    c306:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    c308:	2301      	movs	r3, #1
    c30a:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c30c:	2300      	movs	r3, #0
    c30e:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c310:	2301      	movs	r3, #1
    c312:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c314:	4b29      	ldr	r3, [pc, #164]	; (c3bc <adc_config0+0xf8>)
    c316:	681b      	ldr	r3, [r3, #0]
    c318:	f107 0208 	add.w	r2, r7, #8
    c31c:	4611      	mov	r1, r2
    c31e:	4618      	mov	r0, r3
    c320:	f001 f9ee 	bl	d700 <am_hal_adc_configure>
    c324:	4603      	mov	r3, r0
    c326:	2b00      	cmp	r3, #0
    c328:	d002      	beq.n	c330 <adc_config0+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC0 failed.\n");
    c32a:	4827      	ldr	r0, [pc, #156]	; (c3c8 <adc_config0+0x104>)
    c32c:	f001 f90c 	bl	d548 <am_util_stdio_printf>


    //
    // Set up an ADC slot (2)
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;  //AM_HAL_ADC_SLOT_AVG_128;
    c330:	2300      	movs	r3, #0
    c332:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c334:	2300      	movs	r3, #0
    c336:	707b      	strb	r3, [r7, #1]
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    c338:	2302      	movs	r3, #2
    c33a:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c33c:	2300      	movs	r3, #0
    c33e:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    c340:	2301      	movs	r3, #1
    c342:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 2, &ADCSlotConfig))
    c344:	4b1d      	ldr	r3, [pc, #116]	; (c3bc <adc_config0+0xf8>)
    c346:	681b      	ldr	r3, [r3, #0]
    c348:	463a      	mov	r2, r7
    c34a:	2102      	movs	r1, #2
    c34c:	4618      	mov	r0, r3
    c34e:	f001 fa0f 	bl	d770 <am_hal_adc_configure_slot>
    c352:	4603      	mov	r3, r0
    c354:	2b00      	cmp	r3, #0
    c356:	d002      	beq.n	c35e <adc_config0+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 2 failed.\n");
    c358:	481c      	ldr	r0, [pc, #112]	; (c3cc <adc_config0+0x108>)
    c35a:	f001 f8f5 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot (1)
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;  //AM_HAL_ADC_SLOT_AVG_128;
    c35e:	2300      	movs	r3, #0
    c360:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c362:	2300      	movs	r3, #0
    c364:	707b      	strb	r3, [r7, #1]
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    c366:	2301      	movs	r3, #1
    c368:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c36a:	2300      	movs	r3, #0
    c36c:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    c36e:	2301      	movs	r3, #1
    c370:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 1, &ADCSlotConfig))
    c372:	4b12      	ldr	r3, [pc, #72]	; (c3bc <adc_config0+0xf8>)
    c374:	681b      	ldr	r3, [r3, #0]
    c376:	463a      	mov	r2, r7
    c378:	2101      	movs	r1, #1
    c37a:	4618      	mov	r0, r3
    c37c:	f001 f9f8 	bl	d770 <am_hal_adc_configure_slot>
    c380:	4603      	mov	r3, r0
    c382:	2b00      	cmp	r3, #0
    c384:	d002      	beq.n	c38c <adc_config0+0xc8>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 1 failed.\n");
    c386:	4812      	ldr	r0, [pc, #72]	; (c3d0 <adc_config0+0x10c>)
    c388:	f001 f8de 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    c38c:	f7ff ff6a 	bl	c264 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    c390:	4b0a      	ldr	r3, [pc, #40]	; (c3bc <adc_config0+0xf8>)
    c392:	681b      	ldr	r3, [r3, #0]
    c394:	21c0      	movs	r1, #192	; 0xc0
    c396:	4618      	mov	r0, r3
    c398:	f001 fa78 	bl	d88c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c39c:	4b07      	ldr	r3, [pc, #28]	; (c3bc <adc_config0+0xf8>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	4618      	mov	r0, r3
    c3a2:	f001 fa53 	bl	d84c <am_hal_adc_enable>
    c3a6:	4603      	mov	r3, r0
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d002      	beq.n	c3b2 <adc_config0+0xee>
    {
        am_util_stdio_printf("Error - enabling ADC0 failed.\n");
    c3ac:	4809      	ldr	r0, [pc, #36]	; (c3d4 <adc_config0+0x110>)
    c3ae:	f001 f8cb 	bl	d548 <am_util_stdio_printf>
    }
}
    c3b2:	bf00      	nop
    c3b4:	3710      	adds	r7, #16
    c3b6:	46bd      	mov	sp, r7
    c3b8:	bd80      	pop	{r7, pc}
    c3ba:	bf00      	nop
    c3bc:	10001010 	.word	0x10001010
    c3c0:	0000ebdc 	.word	0x0000ebdc
    c3c4:	0000ec10 	.word	0x0000ec10
    c3c8:	0000ec30 	.word	0x0000ec30
    c3cc:	0000ec54 	.word	0x0000ec54
    c3d0:	0000ec7c 	.word	0x0000ec7c
    c3d4:	0000eca4 	.word	0x0000eca4

0000c3d8 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    c3d8:	b580      	push	{r7, lr}
    c3da:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (1 second).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    c3dc:	f240 2242 	movw	r2, #578	; 0x242
    c3e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3e4:	2003      	movs	r0, #3
    c3e6:	f001 fbcb 	bl	db80 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     |
                                AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);
    c3ea:	2040      	movs	r0, #64	; 0x40
    c3ec:	f001 fc9a 	bl	dd24 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 374);
    c3f0:	f44f 73bb 	mov.w	r3, #374	; 0x176
    c3f4:	f240 22ee 	movw	r2, #750	; 0x2ee
    c3f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3fc:	2003      	movs	r0, #3
    c3fe:	f001 fc29 	bl	dc54 <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    c402:	f001 fc7d 	bl	dd00 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    c406:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c40a:	2003      	movs	r0, #3
    c40c:	f001 fbf8 	bl	dc00 <am_hal_ctimer_start>
}
    c410:	bf00      	nop
    c412:	bd80      	pop	{r7, pc}

0000c414 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c414:	b580      	push	{r7, lr}
    c416:	b088      	sub	sp, #32
    c418:	af00      	add	r7, sp, #0
    am_bsp_uart_printf_enable();                                            // Enable UART - will set debug output to UART. Replaces icm print enable
    c41a:	f001 f921 	bl	d660 <am_bsp_uart_printf_enable>
    am_util_stdio_terminal_clear();
    c41e:	f001 f8b7 	bl	d590 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge DMA ADC Test\n");
    c422:	4884      	ldr	r0, [pc, #528]	; (c634 <main+0x220>)
    c424:	f001 f890 	bl	d548 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c428:	4a83      	ldr	r2, [pc, #524]	; (c638 <main+0x224>)
    c42a:	4984      	ldr	r1, [pc, #528]	; (c63c <main+0x228>)
    c42c:	4884      	ldr	r0, [pc, #528]	; (c640 <main+0x22c>)
    c42e:	f001 f88b 	bl	d548 <am_util_stdio_printf>


    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c432:	2100      	movs	r1, #0
    c434:	2000      	movs	r0, #0
    c436:	f001 fb19 	bl	da6c <am_hal_clkgen_control>
    c43a:	4603      	mov	r3, r0
    c43c:	2b00      	cmp	r3, #0
    c43e:	d002      	beq.n	c446 <main+0x32>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c440:	4880      	ldr	r0, [pc, #512]	; (c644 <main+0x230>)
    c442:	f001 f881 	bl	d548 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c446:	4880      	ldr	r0, [pc, #512]	; (c648 <main+0x234>)
    c448:	f001 fadc 	bl	da04 <am_hal_cachectrl_config>
    c44c:	4603      	mov	r3, r0
    c44e:	2b00      	cmp	r3, #0
    c450:	d002      	beq.n	c458 <main+0x44>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c452:	487e      	ldr	r0, [pc, #504]	; (c64c <main+0x238>)
    c454:	f001 f878 	bl	d548 <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c458:	f001 fafe 	bl	da58 <am_hal_cachectrl_enable>
    c45c:	4603      	mov	r3, r0
    c45e:	2b00      	cmp	r3, #0
    c460:	d002      	beq.n	c468 <main+0x54>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c462:	487b      	ldr	r0, [pc, #492]	; (c650 <main+0x23c>)
    c464:	f001 f870 	bl	d548 <am_util_stdio_printf>


    //
    // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K))
    c468:	200e      	movs	r0, #14
    c46a:	f001 feab 	bl	e1c4 <am_hal_pwrctrl_memory_enable>
    c46e:	4603      	mov	r3, r0
    c470:	2b00      	cmp	r3, #0
    c472:	d002      	beq.n	c47a <main+0x66>
    {
        am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c474:	4877      	ldr	r0, [pc, #476]	; (c654 <main+0x240>)
    c476:	f001 f867 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Enable the first 32K of TCM SRAM.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c47a:	2002      	movs	r0, #2
    c47c:	f001 fea2 	bl	e1c4 <am_hal_pwrctrl_memory_enable>
    c480:	4603      	mov	r3, r0
    c482:	2b00      	cmp	r3, #0
    c484:	d002      	beq.n	c48c <main+0x78>
    {
        am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c486:	4874      	ldr	r0, [pc, #464]	; (c658 <main+0x244>)
    c488:	f001 f85e 	bl	d548 <am_util_stdio_printf>
    }

    am_util_stdio_printf("Ayyy boo\n");
    c48c:	4873      	ldr	r0, [pc, #460]	; (c65c <main+0x248>)
    c48e:	f001 f85b 	bl	d548 <am_util_stdio_printf>


    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    c492:	f7ff ffa1 	bl	c3d8 <init_timerA3_for_ADC>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ(ADC_IRQn);
    c496:	2012      	movs	r0, #18
    c498:	f7ff fe82 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c49c:	f001 fd9a 	bl	dfd4 <am_hal_interrupt_master_enable>

    //
    // Set a pin(s) to act as our ADC input
    //
    am_hal_gpio_pinconfig(SF_EDGE_PIN_MIC0, g_SF_EDGE_PIN_MIC0);
    c4a0:	4b6f      	ldr	r3, [pc, #444]	; (c660 <main+0x24c>)
    c4a2:	6819      	ldr	r1, [r3, #0]
    c4a4:	200b      	movs	r0, #11
    c4a6:	f001 fc55 	bl	dd54 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(SF_EDGE_PIN_MIC1, g_SF_EDGE_PIN_MIC1);
    c4aa:	4b6e      	ldr	r3, [pc, #440]	; (c664 <main+0x250>)
    c4ac:	6819      	ldr	r1, [r3, #0]
    c4ae:	201d      	movs	r0, #29
    c4b0:	f001 fc50 	bl	dd54 <am_hal_gpio_pinconfig>

    //
    // Configure the ADC
    //
    adc_config0();
    c4b4:	f7ff ff06 	bl	c2c4 <adc_config0>

    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c4b8:	4b6b      	ldr	r3, [pc, #428]	; (c668 <main+0x254>)
    c4ba:	681b      	ldr	r3, [r3, #0]
    c4bc:	4618      	mov	r0, r3
    c4be:	f001 fa2b 	bl	d918 <am_hal_adc_sw_trigger>
    c4c2:	4603      	mov	r3, r0
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d002      	beq.n	c4ce <main+0xba>
    {
        am_util_stdio_printf("Error - triggering the ADC0 failed.\n");
    c4c8:	4868      	ldr	r0, [pc, #416]	; (c66c <main+0x258>)
    c4ca:	f001 f83d 	bl	d548 <am_util_stdio_printf>
    }

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c4ce:	f001 f85f 	bl	d590 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example with 1.2Msps and LPMODE=0\n");
    c4d2:	4867      	ldr	r0, [pc, #412]	; (c670 <main+0x25c>)
    c4d4:	f001 f838 	bl	d548 <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c4d8:	200a      	movs	r0, #10
    c4da:	f000 f8df 	bl	c69c <am_util_delay_ms>
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_disable();
#endif

    am_util_stdio_printf("Entering the loop...\n");
    c4de:	4865      	ldr	r0, [pc, #404]	; (c674 <main+0x260>)
    c4e0:	f001 f832 	bl	d548 <am_util_stdio_printf>
    {
 
        //
        // Go to Deep Sleep.
        //
        if (!g_bADCDMAComplete)
    c4e4:	4b64      	ldr	r3, [pc, #400]	; (c678 <main+0x264>)
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	b2db      	uxtb	r3, r3
    c4ea:	f083 0301 	eor.w	r3, r3, #1
    c4ee:	b2db      	uxtb	r3, r3
    c4f0:	2b00      	cmp	r3, #0
    c4f2:	d001      	beq.n	c4f8 <main+0xe4>
        {
            sleep();
    c4f4:	f7ff feae 	bl	c254 <sleep>
        }

        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c4f8:	4b60      	ldr	r3, [pc, #384]	; (c67c <main+0x268>)
    c4fa:	781b      	ldrb	r3, [r3, #0]
    c4fc:	b2db      	uxtb	r3, r3
    c4fe:	2b00      	cmp	r3, #0
    c500:	d003      	beq.n	c50a <main+0xf6>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c502:	485f      	ldr	r0, [pc, #380]	; (c680 <main+0x26c>)
    c504:	f001 f820 	bl	d548 <am_util_stdio_printf>
            while(1);
    c508:	e7fe      	b.n	c508 <main+0xf4>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c50a:	4b5b      	ldr	r3, [pc, #364]	; (c678 <main+0x264>)
    c50c:	781b      	ldrb	r3, [r3, #0]
    c50e:	b2db      	uxtb	r3, r3
    c510:	2b00      	cmp	r3, #0
    c512:	d0e7      	beq.n	c4e4 <main+0xd0>
        {
#if ADC_EXAMPLE_DEBUG
            {
                // uint32_t        ui32SampleCount;
                am_util_stdio_printf("DMA Complete\n");
    c514:	485b      	ldr	r0, [pc, #364]	; (c684 <main+0x270>)
    c516:	f001 f817 	bl	d548 <am_util_stdio_printf>
                //      .ui32Slot field actually gets set

                // I tried to write a function to take the raw samples fromt the ADC and sort them into the right buffer. It was close but I bailed to just hard-code it for now

                // For slot 1:
                uint32_t slotCount = 0;
    c51a:	2300      	movs	r3, #0
    c51c:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c51e:	2300      	movs	r3, #0
    c520:	61bb      	str	r3, [r7, #24]
    c522:	e022      	b.n	c56a <main+0x156>
                    am_hal_adc_sample_t temp;

                    temp.ui32Slot   = AM_HAL_ADC_FIFO_SLOT(g_ui32ADCSampleBuffer[indi]);
    c524:	4a58      	ldr	r2, [pc, #352]	; (c688 <main+0x274>)
    c526:	69bb      	ldr	r3, [r7, #24]
    c528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52c:	0f1b      	lsrs	r3, r3, #28
    c52e:	f003 0307 	and.w	r3, r3, #7
    c532:	60fb      	str	r3, [r7, #12]
                    temp.ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(g_ui32ADCSampleBuffer[indi]);
    c534:	4a54      	ldr	r2, [pc, #336]	; (c688 <main+0x274>)
    c536:	69bb      	ldr	r3, [r7, #24]
    c538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c53c:	099b      	lsrs	r3, r3, #6
    c53e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c542:	60bb      	str	r3, [r7, #8]

                    if( temp.ui32Slot == 1 ){
    c544:	68fb      	ldr	r3, [r7, #12]
    c546:	2b01      	cmp	r3, #1
    c548:	d10c      	bne.n	c564 <main+0x150>
                        SampleBuffer1[slotCount] = temp;
    c54a:	4a50      	ldr	r2, [pc, #320]	; (c68c <main+0x278>)
    c54c:	69fb      	ldr	r3, [r7, #28]
    c54e:	00db      	lsls	r3, r3, #3
    c550:	4413      	add	r3, r2
    c552:	f107 0208 	add.w	r2, r7, #8
    c556:	e892 0003 	ldmia.w	r2, {r0, r1}
    c55a:	e883 0003 	stmia.w	r3, {r0, r1}
                        slotCount++;
    c55e:	69fb      	ldr	r3, [r7, #28]
    c560:	3301      	adds	r3, #1
    c562:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c564:	69bb      	ldr	r3, [r7, #24]
    c566:	3301      	adds	r3, #1
    c568:	61bb      	str	r3, [r7, #24]
    c56a:	69bb      	ldr	r3, [r7, #24]
    c56c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c570:	d3d8      	bcc.n	c524 <main+0x110>
                    }
                }


                slotCount = 0;
    c572:	2300      	movs	r3, #0
    c574:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c576:	2300      	movs	r3, #0
    c578:	617b      	str	r3, [r7, #20]
    c57a:	e021      	b.n	c5c0 <main+0x1ac>
                    am_hal_adc_sample_t temp;

                    temp.ui32Slot   = AM_HAL_ADC_FIFO_SLOT(g_ui32ADCSampleBuffer[indi]);
    c57c:	4a42      	ldr	r2, [pc, #264]	; (c688 <main+0x274>)
    c57e:	697b      	ldr	r3, [r7, #20]
    c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c584:	0f1b      	lsrs	r3, r3, #28
    c586:	f003 0307 	and.w	r3, r3, #7
    c58a:	607b      	str	r3, [r7, #4]
                    temp.ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(g_ui32ADCSampleBuffer[indi]);
    c58c:	4a3e      	ldr	r2, [pc, #248]	; (c688 <main+0x274>)
    c58e:	697b      	ldr	r3, [r7, #20]
    c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c594:	099b      	lsrs	r3, r3, #6
    c596:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c59a:	603b      	str	r3, [r7, #0]

                    if( temp.ui32Slot == 2 ){
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	2b02      	cmp	r3, #2
    c5a0:	d10b      	bne.n	c5ba <main+0x1a6>
                        SampleBuffer0[slotCount] = temp;
    c5a2:	4a3b      	ldr	r2, [pc, #236]	; (c690 <main+0x27c>)
    c5a4:	69fb      	ldr	r3, [r7, #28]
    c5a6:	00db      	lsls	r3, r3, #3
    c5a8:	4413      	add	r3, r2
    c5aa:	463a      	mov	r2, r7
    c5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    c5b0:	e883 0003 	stmia.w	r3, {r0, r1}
                        slotCount++;
    c5b4:	69fb      	ldr	r3, [r7, #28]
    c5b6:	3301      	adds	r3, #1
    c5b8:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c5ba:	697b      	ldr	r3, [r7, #20]
    c5bc:	3301      	adds	r3, #1
    c5be:	617b      	str	r3, [r7, #20]
    c5c0:	697b      	ldr	r3, [r7, #20]
    c5c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c5c6:	d3d9      	bcc.n	c57c <main+0x168>
                    }
                }

                // Print out the results over UART for visual verification
                for(uint32_t indi = 0; indi < ADC_SAMPLES_PER_SLOT; indi++){
    c5c8:	2300      	movs	r3, #0
    c5ca:	613b      	str	r3, [r7, #16]
    c5cc:	e00e      	b.n	c5ec <main+0x1d8>
                    // am_util_stdio_printf("%d, %d\n", SampleBuffer0[indi].ui32Slot, SampleBuffer1[indi].ui32Slot);           // Show slot numbers

                    am_util_stdio_printf("%d, %d\n", SampleBuffer0[indi].ui32Sample, SampleBuffer1[indi].ui32Sample);    // Show values
    c5ce:	4a30      	ldr	r2, [pc, #192]	; (c690 <main+0x27c>)
    c5d0:	693b      	ldr	r3, [r7, #16]
    c5d2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    c5d6:	4a2d      	ldr	r2, [pc, #180]	; (c68c <main+0x278>)
    c5d8:	693b      	ldr	r3, [r7, #16]
    c5da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    c5de:	461a      	mov	r2, r3
    c5e0:	482c      	ldr	r0, [pc, #176]	; (c694 <main+0x280>)
    c5e2:	f000 ffb1 	bl	d548 <am_util_stdio_printf>
                for(uint32_t indi = 0; indi < ADC_SAMPLES_PER_SLOT; indi++){
    c5e6:	693b      	ldr	r3, [r7, #16]
    c5e8:	3301      	adds	r3, #1
    c5ea:	613b      	str	r3, [r7, #16]
    c5ec:	693b      	ldr	r3, [r7, #16]
    c5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c5f2:	d3ec      	bcc.n	c5ce <main+0x1ba>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c5f4:	4b20      	ldr	r3, [pc, #128]	; (c678 <main+0x264>)
    c5f6:	2200      	movs	r2, #0
    c5f8:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c5fa:	f7ff fe33 	bl	c264 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c5fe:	4b1a      	ldr	r3, [pc, #104]	; (c668 <main+0x254>)
    c600:	681b      	ldr	r3, [r3, #0]
    c602:	f04f 31ff 	mov.w	r1, #4294967295
    c606:	4618      	mov	r0, r3
    c608:	f001 f974 	bl	d8f4 <am_hal_adc_interrupt_clear>
    c60c:	4603      	mov	r3, r0
    c60e:	2b00      	cmp	r3, #0
    c610:	d002      	beq.n	c618 <main+0x204>
            {
                am_util_stdio_printf("Error - clearing the ADC0 interrupts failed.\n");
    c612:	4821      	ldr	r0, [pc, #132]	; (c698 <main+0x284>)
    c614:	f000 ff98 	bl	d548 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c618:	4b13      	ldr	r3, [pc, #76]	; (c668 <main+0x254>)
    c61a:	681b      	ldr	r3, [r3, #0]
    c61c:	4618      	mov	r0, r3
    c61e:	f001 f97b 	bl	d918 <am_hal_adc_sw_trigger>
    c622:	4603      	mov	r3, r0
    c624:	2b00      	cmp	r3, #0
    c626:	f43f af5d 	beq.w	c4e4 <main+0xd0>
            {
                am_util_stdio_printf("Error - triggering the ADC0 failed.\n");
    c62a:	4810      	ldr	r0, [pc, #64]	; (c66c <main+0x258>)
    c62c:	f000 ff8c 	bl	d548 <am_util_stdio_printf>
        if (!g_bADCDMAComplete)
    c630:	e758      	b.n	c4e4 <main+0xd0>
    c632:	bf00      	nop
    c634:	0000ecc4 	.word	0x0000ecc4
    c638:	0000ece0 	.word	0x0000ece0
    c63c:	0000ecec 	.word	0x0000ecec
    c640:	0000ecf8 	.word	0x0000ecf8
    c644:	0000ed10 	.word	0x0000ed10
    c648:	0000ef10 	.word	0x0000ef10
    c64c:	0000ed40 	.word	0x0000ed40
    c650:	0000ed70 	.word	0x0000ed70
    c654:	0000ed9c 	.word	0x0000ed9c
    c658:	0000edcc 	.word	0x0000edcc
    c65c:	0000edf4 	.word	0x0000edf4
    c660:	0000eed8 	.word	0x0000eed8
    c664:	0000eedc 	.word	0x0000eedc
    c668:	10001010 	.word	0x10001010
    c66c:	0000ee00 	.word	0x0000ee00
    c670:	0000ee28 	.word	0x0000ee28
    c674:	0000ee50 	.word	0x0000ee50
    c678:	10003128 	.word	0x10003128
    c67c:	1000712c 	.word	0x1000712c
    c680:	0000ee68 	.word	0x0000ee68
    c684:	0000ee7c 	.word	0x0000ee7c
    c688:	10001128 	.word	0x10001128
    c68c:	1000512c 	.word	0x1000512c
    c690:	1000312c 	.word	0x1000312c
    c694:	0000ee8c 	.word	0x0000ee8c
    c698:	0000ee94 	.word	0x0000ee94

0000c69c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b088      	sub	sp, #32
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c6a4:	f107 030c 	add.w	r3, r7, #12
    c6a8:	4618      	mov	r0, r3
    c6aa:	f001 fa4b 	bl	db44 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c6ae:	68fb      	ldr	r3, [r7, #12]
    c6b0:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c6b2:	69fb      	ldr	r3, [r7, #28]
    c6b4:	4a07      	ldr	r2, [pc, #28]	; (c6d4 <am_util_delay_ms+0x38>)
    c6b6:	fba2 2303 	umull	r2, r3, r2, r3
    c6ba:	099a      	lsrs	r2, r3, #6
    c6bc:	687b      	ldr	r3, [r7, #4]
    c6be:	fb02 f303 	mul.w	r3, r2, r3
    c6c2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c6c4:	69b8      	ldr	r0, [r7, #24]
    c6c6:	f001 fb41 	bl	dd4c <am_hal_flash_delay>
}
    c6ca:	bf00      	nop
    c6cc:	3720      	adds	r7, #32
    c6ce:	46bd      	mov	sp, r7
    c6d0:	bd80      	pop	{r7, pc}
    c6d2:	bf00      	nop
    c6d4:	057619f1 	.word	0x057619f1

0000c6d8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6d8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6da:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6de:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6e0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c6e4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c6e8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c6ec:	f000 f80a 	bl	c704 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c6f0:	bd01      	pop	{r0, pc}
}
    c6f2:	bf00      	nop
    c6f4:	4618      	mov	r0, r3

0000c6f6 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c6f6:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c6f8:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c6fa:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c6fc:	4770      	bx	lr
}
    c6fe:	bf00      	nop
    c700:	4618      	mov	r0, r3
	...

0000c704 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c704:	b580      	push	{r7, lr}
    c706:	b096      	sub	sp, #88	; 0x58
    c708:	af00      	add	r7, sp, #0
    c70a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c70c:	f107 030c 	add.w	r3, r7, #12
    c710:	2200      	movs	r2, #0
    c712:	601a      	str	r2, [r3, #0]
    c714:	605a      	str	r2, [r3, #4]
    c716:	609a      	str	r2, [r3, #8]
    c718:	60da      	str	r2, [r3, #12]
    c71a:	611a      	str	r2, [r3, #16]
    c71c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c71e:	2300      	movs	r3, #0
    c720:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c724:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c726:	4b2e      	ldr	r3, [pc, #184]	; (c7e0 <am_util_faultisr_collect_data+0xdc>)
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c72e:	b2db      	uxtb	r3, r3
    c730:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c736:	0a1b      	lsrs	r3, r3, #8
    c738:	b2db      	uxtb	r3, r3
    c73a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c740:	0c1b      	lsrs	r3, r3, #16
    c742:	b29b      	uxth	r3, r3
    c744:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c748:	4b26      	ldr	r3, [pc, #152]	; (c7e4 <am_util_faultisr_collect_data+0xe0>)
    c74a:	681b      	ldr	r3, [r3, #0]
    c74c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c74e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c752:	b2db      	uxtb	r3, r3
    c754:	f003 0302 	and.w	r3, r3, #2
    c758:	2b00      	cmp	r3, #0
    c75a:	d005      	beq.n	c768 <am_util_faultisr_collect_data+0x64>
    c75c:	6879      	ldr	r1, [r7, #4]
    c75e:	2006      	movs	r0, #6
    c760:	f7ff ffc9 	bl	c6f6 <getStackedReg>
    c764:	4603      	mov	r3, r0
    c766:	e001      	b.n	c76c <am_util_faultisr_collect_data+0x68>
    c768:	f04f 33ff 	mov.w	r3, #4294967295
    c76c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76e:	6879      	ldr	r1, [r7, #4]
    c770:	2000      	movs	r0, #0
    c772:	f7ff ffc0 	bl	c6f6 <getStackedReg>
    c776:	4603      	mov	r3, r0
    c778:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c77a:	6879      	ldr	r1, [r7, #4]
    c77c:	2001      	movs	r0, #1
    c77e:	f7ff ffba 	bl	c6f6 <getStackedReg>
    c782:	4603      	mov	r3, r0
    c784:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c786:	6879      	ldr	r1, [r7, #4]
    c788:	2002      	movs	r0, #2
    c78a:	f7ff ffb4 	bl	c6f6 <getStackedReg>
    c78e:	4603      	mov	r3, r0
    c790:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c792:	6879      	ldr	r1, [r7, #4]
    c794:	2003      	movs	r0, #3
    c796:	f7ff ffae 	bl	c6f6 <getStackedReg>
    c79a:	4603      	mov	r3, r0
    c79c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79e:	6879      	ldr	r1, [r7, #4]
    c7a0:	2004      	movs	r0, #4
    c7a2:	f7ff ffa8 	bl	c6f6 <getStackedReg>
    c7a6:	4603      	mov	r3, r0
    c7a8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7aa:	6879      	ldr	r1, [r7, #4]
    c7ac:	2005      	movs	r0, #5
    c7ae:	f7ff ffa2 	bl	c6f6 <getStackedReg>
    c7b2:	4603      	mov	r3, r0
    c7b4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b6:	6879      	ldr	r1, [r7, #4]
    c7b8:	2006      	movs	r0, #6
    c7ba:	f7ff ff9c 	bl	c6f6 <getStackedReg>
    c7be:	4603      	mov	r3, r0
    c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c2:	6879      	ldr	r1, [r7, #4]
    c7c4:	2007      	movs	r0, #7
    c7c6:	f7ff ff96 	bl	c6f6 <getStackedReg>
    c7ca:	4603      	mov	r3, r0
    c7cc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7ce:	f107 030c 	add.w	r3, r7, #12
    c7d2:	4619      	mov	r1, r3
    c7d4:	2002      	movs	r0, #2
    c7d6:	f001 fc09 	bl	dfec <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c7da:	2300      	movs	r3, #0
    c7dc:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c7de:	e7fe      	b.n	c7de <am_util_faultisr_collect_data+0xda>
    c7e0:	e000ed28 	.word	0xe000ed28
    c7e4:	e000ed38 	.word	0xe000ed38

0000c7e8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c7e8:	b480      	push	{r7}
    c7ea:	b083      	sub	sp, #12
    c7ec:	af00      	add	r7, sp, #0
    c7ee:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c7f0:	4a04      	ldr	r2, [pc, #16]	; (c804 <am_util_stdio_printf_init+0x1c>)
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	6013      	str	r3, [r2, #0]
}
    c7f6:	bf00      	nop
    c7f8:	370c      	adds	r7, #12
    c7fa:	46bd      	mov	sp, r7
    c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c800:	4770      	bx	lr
    c802:	bf00      	nop
    c804:	10007130 	.word	0x10007130

0000c808 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c808:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c80c:	b098      	sub	sp, #96	; 0x60
    c80e:	af00      	add	r7, sp, #0
    c810:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c814:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c818:	f04f 0100 	mov.w	r1, #0
    c81c:	f04f 0200 	mov.w	r2, #0
    c820:	0021      	movs	r1, r4
    c822:	2200      	movs	r2, #0
    c824:	ea51 0302 	orrs.w	r3, r1, r2
    c828:	f000 80b5 	beq.w	c996 <divu64_10+0x18e>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c82c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c830:	f04f 0500 	mov.w	r5, #0
    c834:	f04f 0600 	mov.w	r6, #0
    c838:	085d      	lsrs	r5, r3, #1
    c83a:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
    c83e:	0866      	lsrs	r6, r4, #1
    c840:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c844:	f04f 0100 	mov.w	r1, #0
    c848:	f04f 0200 	mov.w	r2, #0
    c84c:	0899      	lsrs	r1, r3, #2
    c84e:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
    c852:	08a2      	lsrs	r2, r4, #2
    c854:	eb15 0a01 	adds.w	sl, r5, r1
    c858:	eb46 0b02 	adc.w	fp, r6, r2
    c85c:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
        q64 += (q64 >> 4);
    c860:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c864:	f04f 0100 	mov.w	r1, #0
    c868:	f04f 0200 	mov.w	r2, #0
    c86c:	0919      	lsrs	r1, r3, #4
    c86e:	ea41 7104 	orr.w	r1, r1, r4, lsl #28
    c872:	0922      	lsrs	r2, r4, #4
    c874:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c878:	1858      	adds	r0, r3, r1
    c87a:	62b8      	str	r0, [r7, #40]	; 0x28
    c87c:	eb44 0302 	adc.w	r3, r4, r2
    c880:	62fb      	str	r3, [r7, #44]	; 0x2c
    c882:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
    c886:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 8);
    c88a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c88e:	f04f 0100 	mov.w	r1, #0
    c892:	f04f 0200 	mov.w	r2, #0
    c896:	0a19      	lsrs	r1, r3, #8
    c898:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    c89c:	0a22      	lsrs	r2, r4, #8
    c89e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c8a2:	1858      	adds	r0, r3, r1
    c8a4:	6238      	str	r0, [r7, #32]
    c8a6:	eb44 0302 	adc.w	r3, r4, r2
    c8aa:	627b      	str	r3, [r7, #36]	; 0x24
    c8ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    c8b0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 16);
    c8b4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c8b8:	f04f 0100 	mov.w	r1, #0
    c8bc:	f04f 0200 	mov.w	r2, #0
    c8c0:	0c19      	lsrs	r1, r3, #16
    c8c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    c8c6:	0c22      	lsrs	r2, r4, #16
    c8c8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c8cc:	1858      	adds	r0, r3, r1
    c8ce:	61b8      	str	r0, [r7, #24]
    c8d0:	eb44 0302 	adc.w	r3, r4, r2
    c8d4:	61fb      	str	r3, [r7, #28]
    c8d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    c8da:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 32);
    c8de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c8e2:	f04f 0300 	mov.w	r3, #0
    c8e6:	f04f 0400 	mov.w	r4, #0
    c8ea:	0013      	movs	r3, r2
    c8ec:	2400      	movs	r4, #0
    c8ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c8f2:	18c8      	adds	r0, r1, r3
    c8f4:	6138      	str	r0, [r7, #16]
    c8f6:	eb42 0304 	adc.w	r3, r2, r4
    c8fa:	617b      	str	r3, [r7, #20]
    c8fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c900:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 >>= 3;
    c904:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c908:	f04f 0300 	mov.w	r3, #0
    c90c:	f04f 0400 	mov.w	r4, #0
    c910:	08cb      	lsrs	r3, r1, #3
    c912:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c916:	08d4      	lsrs	r4, r2, #3
    c918:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        r64 = ui64Val - q64*10;
    c91c:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
    c920:	462b      	mov	r3, r5
    c922:	4634      	mov	r4, r6
    c924:	f04f 0100 	mov.w	r1, #0
    c928:	f04f 0200 	mov.w	r2, #0
    c92c:	00a2      	lsls	r2, r4, #2
    c92e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    c932:	0099      	lsls	r1, r3, #2
    c934:	460b      	mov	r3, r1
    c936:	4614      	mov	r4, r2
    c938:	195b      	adds	r3, r3, r5
    c93a:	eb46 0404 	adc.w	r4, r6, r4
    c93e:	18da      	adds	r2, r3, r3
    c940:	60ba      	str	r2, [r7, #8]
    c942:	eb44 0304 	adc.w	r3, r4, r4
    c946:	60fb      	str	r3, [r7, #12]
    c948:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c94c:	4619      	mov	r1, r3
    c94e:	4622      	mov	r2, r4
    c950:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c954:	1a58      	subs	r0, r3, r1
    c956:	6038      	str	r0, [r7, #0]
    c958:	eb64 0302 	sbc.w	r3, r4, r2
    c95c:	607b      	str	r3, [r7, #4]
    c95e:	e9d7 3400 	ldrd	r3, r4, [r7]
    c962:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        return q64 + ((r64 + 6) >> 4);
    c966:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c96a:	f113 0806 	adds.w	r8, r3, #6
    c96e:	f144 0900 	adc.w	r9, r4, #0
    c972:	f04f 0300 	mov.w	r3, #0
    c976:	f04f 0400 	mov.w	r4, #0
    c97a:	ea4f 1318 	mov.w	r3, r8, lsr #4
    c97e:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    c982:	ea4f 1419 	mov.w	r4, r9, lsr #4
    c986:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c98a:	1858      	adds	r0, r3, r1
    c98c:	6338      	str	r0, [r7, #48]	; 0x30
    c98e:	eb44 0302 	adc.w	r3, r4, r2
    c992:	637b      	str	r3, [r7, #52]	; 0x34
    c994:	e02c      	b.n	c9f0 <divu64_10+0x1e8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c998:	64fb      	str	r3, [r7, #76]	; 0x4c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c99c:	085a      	lsrs	r2, r3, #1
    c99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c9a0:	089b      	lsrs	r3, r3, #2
    c9a2:	4413      	add	r3, r2
    c9a4:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 4);
    c9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c9a8:	091b      	lsrs	r3, r3, #4
    c9aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c9ac:	4413      	add	r3, r2
    c9ae:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 8);
    c9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c9b2:	0a1b      	lsrs	r3, r3, #8
    c9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c9b6:	4413      	add	r3, r2
    c9b8:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 16);
    c9ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c9bc:	0c1b      	lsrs	r3, r3, #16
    c9be:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c9c0:	4413      	add	r3, r2
    c9c2:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 >>= 3;
    c9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c9c6:	08db      	lsrs	r3, r3, #3
    c9c8:	64bb      	str	r3, [r7, #72]	; 0x48
        r32 = ui32Val - q32*10;
    c9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c9cc:	4613      	mov	r3, r2
    c9ce:	009b      	lsls	r3, r3, #2
    c9d0:	4413      	add	r3, r2
    c9d2:	005b      	lsls	r3, r3, #1
    c9d4:	461a      	mov	r2, r3
    c9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c9d8:	1a9b      	subs	r3, r3, r2
    c9da:	647b      	str	r3, [r7, #68]	; 0x44
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9de:	3306      	adds	r3, #6
    c9e0:	091a      	lsrs	r2, r3, #4
    c9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c9e4:	4413      	add	r3, r2
    c9e6:	4619      	mov	r1, r3
    c9e8:	f04f 0200 	mov.w	r2, #0
    c9ec:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
    c9f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    }
}
    c9f4:	4618      	mov	r0, r3
    c9f6:	4621      	mov	r1, r4
    c9f8:	3760      	adds	r7, #96	; 0x60
    c9fa:	46bd      	mov	sp, r7
    c9fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ca00:	4770      	bx	lr

0000ca02 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    ca02:	b590      	push	{r4, r7, lr}
    ca04:	b085      	sub	sp, #20
    ca06:	af00      	add	r7, sp, #0
    ca08:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    ca0c:	683a      	ldr	r2, [r7, #0]
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	4313      	orrs	r3, r2
    ca12:	2b00      	cmp	r3, #0
    ca14:	bf0c      	ite	eq
    ca16:	2301      	moveq	r3, #1
    ca18:	2300      	movne	r3, #0
    ca1a:	b2db      	uxtb	r3, r3
    ca1c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    ca1e:	e008      	b.n	ca32 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    ca20:	e9d7 0100 	ldrd	r0, r1, [r7]
    ca24:	f7ff fef0 	bl	c808 <divu64_10>
    ca28:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    ca2c:	68fb      	ldr	r3, [r7, #12]
    ca2e:	3301      	adds	r3, #1
    ca30:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    ca32:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca36:	4323      	orrs	r3, r4
    ca38:	d1f2      	bne.n	ca20 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    ca3a:	68fb      	ldr	r3, [r7, #12]
}
    ca3c:	4618      	mov	r0, r3
    ca3e:	3714      	adds	r7, #20
    ca40:	46bd      	mov	sp, r7
    ca42:	bd90      	pop	{r4, r7, pc}

0000ca44 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    ca44:	b590      	push	{r4, r7, lr}
    ca46:	b083      	sub	sp, #12
    ca48:	af00      	add	r7, sp, #0
    ca4a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    ca4e:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca52:	2b00      	cmp	r3, #0
    ca54:	f174 0300 	sbcs.w	r3, r4, #0
    ca58:	da06      	bge.n	ca68 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    ca5a:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca5e:	425b      	negs	r3, r3
    ca60:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    ca64:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    ca68:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca6c:	4618      	mov	r0, r3
    ca6e:	4621      	mov	r1, r4
    ca70:	f7ff ffc7 	bl	ca02 <ndigits_in_u64>
    ca74:	4603      	mov	r3, r0
}
    ca76:	4618      	mov	r0, r3
    ca78:	370c      	adds	r7, #12
    ca7a:	46bd      	mov	sp, r7
    ca7c:	bd90      	pop	{r4, r7, pc}

0000ca7e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    ca7e:	b490      	push	{r4, r7}
    ca80:	b084      	sub	sp, #16
    ca82:	af00      	add	r7, sp, #0
    ca84:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    ca88:	683a      	ldr	r2, [r7, #0]
    ca8a:	687b      	ldr	r3, [r7, #4]
    ca8c:	4313      	orrs	r3, r2
    ca8e:	2b00      	cmp	r3, #0
    ca90:	bf0c      	ite	eq
    ca92:	2301      	moveq	r3, #1
    ca94:	2300      	movne	r3, #0
    ca96:	b2db      	uxtb	r3, r3
    ca98:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    ca9a:	e00e      	b.n	caba <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    ca9c:	e9d7 1200 	ldrd	r1, r2, [r7]
    caa0:	f04f 0300 	mov.w	r3, #0
    caa4:	f04f 0400 	mov.w	r4, #0
    caa8:	090b      	lsrs	r3, r1, #4
    caaa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    caae:	0914      	lsrs	r4, r2, #4
    cab0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    cab4:	68fb      	ldr	r3, [r7, #12]
    cab6:	3301      	adds	r3, #1
    cab8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    caba:	e9d7 3400 	ldrd	r3, r4, [r7]
    cabe:	4323      	orrs	r3, r4
    cac0:	d1ec      	bne.n	ca9c <ndigits_in_hex+0x1e>
    }

    return iDigits;
    cac2:	68fb      	ldr	r3, [r7, #12]
}
    cac4:	4618      	mov	r0, r3
    cac6:	3710      	adds	r7, #16
    cac8:	46bd      	mov	sp, r7
    caca:	bc90      	pop	{r4, r7}
    cacc:	4770      	bx	lr

0000cace <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cace:	b480      	push	{r7}
    cad0:	b087      	sub	sp, #28
    cad2:	af00      	add	r7, sp, #0
    cad4:	6078      	str	r0, [r7, #4]
    cad6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    cad8:	2300      	movs	r3, #0
    cada:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cadc:	2300      	movs	r3, #0
    cade:	613b      	str	r3, [r7, #16]
    cae0:	2300      	movs	r3, #0
    cae2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    cae4:	687b      	ldr	r3, [r7, #4]
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	2b2d      	cmp	r3, #45	; 0x2d
    caea:	d11b      	bne.n	cb24 <decstr_to_int+0x56>
    {
        bNeg = true;
    caec:	2301      	movs	r3, #1
    caee:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    caf0:	687b      	ldr	r3, [r7, #4]
    caf2:	3301      	adds	r3, #1
    caf4:	607b      	str	r3, [r7, #4]
        uCnt++;
    caf6:	68fb      	ldr	r3, [r7, #12]
    caf8:	3301      	adds	r3, #1
    cafa:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cafc:	e012      	b.n	cb24 <decstr_to_int+0x56>
    {
        ++uCnt;
    cafe:	68fb      	ldr	r3, [r7, #12]
    cb00:	3301      	adds	r3, #1
    cb02:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cb04:	693a      	ldr	r2, [r7, #16]
    cb06:	4613      	mov	r3, r2
    cb08:	009b      	lsls	r3, r3, #2
    cb0a:	4413      	add	r3, r2
    cb0c:	005b      	lsls	r3, r3, #1
    cb0e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	461a      	mov	r2, r3
    cb16:	693b      	ldr	r3, [r7, #16]
    cb18:	4413      	add	r3, r2
    cb1a:	3b30      	subs	r3, #48	; 0x30
    cb1c:	613b      	str	r3, [r7, #16]
        pcStr++;
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	3301      	adds	r3, #1
    cb22:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb24:	687b      	ldr	r3, [r7, #4]
    cb26:	781b      	ldrb	r3, [r3, #0]
    cb28:	2b2f      	cmp	r3, #47	; 0x2f
    cb2a:	d903      	bls.n	cb34 <decstr_to_int+0x66>
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	781b      	ldrb	r3, [r3, #0]
    cb30:	2b39      	cmp	r3, #57	; 0x39
    cb32:	d9e4      	bls.n	cafe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cb34:	683b      	ldr	r3, [r7, #0]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d002      	beq.n	cb40 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cb3a:	683b      	ldr	r3, [r7, #0]
    cb3c:	68fa      	ldr	r2, [r7, #12]
    cb3e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cb40:	7dfb      	ldrb	r3, [r7, #23]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d002      	beq.n	cb4c <decstr_to_int+0x7e>
    cb46:	693b      	ldr	r3, [r7, #16]
    cb48:	425b      	negs	r3, r3
    cb4a:	e000      	b.n	cb4e <decstr_to_int+0x80>
    cb4c:	693b      	ldr	r3, [r7, #16]
}
    cb4e:	4618      	mov	r0, r3
    cb50:	371c      	adds	r7, #28
    cb52:	46bd      	mov	sp, r7
    cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb58:	4770      	bx	lr

0000cb5a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cb5a:	b590      	push	{r4, r7, lr}
    cb5c:	b091      	sub	sp, #68	; 0x44
    cb5e:	af00      	add	r7, sp, #0
    cb60:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cb64:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cb66:	2300      	movs	r3, #0
    cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb6a:	2300      	movs	r3, #0
    cb6c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cb6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    cb72:	f7ff fe49 	bl	c808 <divu64_10>
    cb76:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cb7a:	68b9      	ldr	r1, [r7, #8]
    cb7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb7e:	4613      	mov	r3, r2
    cb80:	009b      	lsls	r3, r3, #2
    cb82:	4413      	add	r3, r2
    cb84:	005b      	lsls	r3, r3, #1
    cb86:	1acb      	subs	r3, r1, r3
    cb88:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb8c:	b2da      	uxtb	r2, r3
    cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb90:	1c59      	adds	r1, r3, #1
    cb92:	63f9      	str	r1, [r7, #60]	; 0x3c
    cb94:	3230      	adds	r2, #48	; 0x30
    cb96:	b2d2      	uxtb	r2, r2
    cb98:	f107 0140 	add.w	r1, r7, #64	; 0x40
    cb9c:	440b      	add	r3, r1
    cb9e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cba2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cba6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    cbaa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cbae:	4323      	orrs	r3, r4
    cbb0:	d1dd      	bne.n	cb6e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbb4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cbb6:	687b      	ldr	r3, [r7, #4]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d011      	beq.n	cbe0 <uint64_to_str+0x86>
    {
        while ( ix-- )
    cbbc:	e008      	b.n	cbd0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    cbbe:	687b      	ldr	r3, [r7, #4]
    cbc0:	1c5a      	adds	r2, r3, #1
    cbc2:	607a      	str	r2, [r7, #4]
    cbc4:	f107 0110 	add.w	r1, r7, #16
    cbc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cbca:	440a      	add	r2, r1
    cbcc:	7812      	ldrb	r2, [r2, #0]
    cbce:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbd2:	1e5a      	subs	r2, r3, #1
    cbd4:	63fa      	str	r2, [r7, #60]	; 0x3c
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d1f1      	bne.n	cbbe <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cbda:	687b      	ldr	r3, [r7, #4]
    cbdc:	2200      	movs	r2, #0
    cbde:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    cbe2:	4618      	mov	r0, r3
    cbe4:	3744      	adds	r7, #68	; 0x44
    cbe6:	46bd      	mov	sp, r7
    cbe8:	bd90      	pop	{r4, r7, pc}

0000cbea <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cbea:	b490      	push	{r4, r7}
    cbec:	b08c      	sub	sp, #48	; 0x30
    cbee:	af00      	add	r7, sp, #0
    cbf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cbf4:	607a      	str	r2, [r7, #4]
    cbf6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cbf8:	2300      	movs	r3, #0
    cbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cbfc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cc00:	4323      	orrs	r3, r4
    cc02:	d135      	bne.n	cc70 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc06:	1c5a      	adds	r2, r3, #1
    cc08:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    cc0e:	4413      	add	r3, r2
    cc10:	2230      	movs	r2, #48	; 0x30
    cc12:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cc16:	e02b      	b.n	cc70 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    cc18:	7a3b      	ldrb	r3, [r7, #8]
    cc1a:	f003 030f 	and.w	r3, r3, #15
    cc1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cc22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cc26:	2b09      	cmp	r3, #9
    cc28:	d90a      	bls.n	cc40 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cc2a:	78fb      	ldrb	r3, [r7, #3]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d001      	beq.n	cc34 <uint64_to_hexstr+0x4a>
    cc30:	2227      	movs	r2, #39	; 0x27
    cc32:	e000      	b.n	cc36 <uint64_to_hexstr+0x4c>
    cc34:	2207      	movs	r2, #7
    cc36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cc3a:	4413      	add	r3, r2
    cc3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc42:	1c5a      	adds	r2, r3, #1
    cc44:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc46:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cc4a:	3230      	adds	r2, #48	; 0x30
    cc4c:	b2d2      	uxtb	r2, r2
    cc4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cc52:	440b      	add	r3, r1
    cc54:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cc58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    cc5c:	f04f 0300 	mov.w	r3, #0
    cc60:	f04f 0400 	mov.w	r4, #0
    cc64:	090b      	lsrs	r3, r1, #4
    cc66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    cc6a:	0914      	lsrs	r4, r2, #4
    cc6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    cc70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cc74:	4323      	orrs	r3, r4
    cc76:	d1cf      	bne.n	cc18 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc7a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d011      	beq.n	cca6 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    cc82:	e008      	b.n	cc96 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	1c5a      	adds	r2, r3, #1
    cc88:	607a      	str	r2, [r7, #4]
    cc8a:	f107 0110 	add.w	r1, r7, #16
    cc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc90:	440a      	add	r2, r1
    cc92:	7812      	ldrb	r2, [r2, #0]
    cc94:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc98:	1e5a      	subs	r2, r3, #1
    cc9a:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d1f1      	bne.n	cc84 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	2200      	movs	r2, #0
    cca4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cca8:	4618      	mov	r0, r3
    ccaa:	3730      	adds	r7, #48	; 0x30
    ccac:	46bd      	mov	sp, r7
    ccae:	bc90      	pop	{r4, r7}
    ccb0:	4770      	bx	lr

0000ccb2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ccb2:	b480      	push	{r7}
    ccb4:	b085      	sub	sp, #20
    ccb6:	af00      	add	r7, sp, #0
    ccb8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    ccba:	2300      	movs	r3, #0
    ccbc:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d104      	bne.n	ccce <simple_strlen+0x1c>
    {
        return ui32RetVal;
    ccc4:	68fb      	ldr	r3, [r7, #12]
    ccc6:	e009      	b.n	ccdc <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ccc8:	68fb      	ldr	r3, [r7, #12]
    ccca:	3301      	adds	r3, #1
    cccc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    ccce:	687b      	ldr	r3, [r7, #4]
    ccd0:	1c5a      	adds	r2, r3, #1
    ccd2:	607a      	str	r2, [r7, #4]
    ccd4:	781b      	ldrb	r3, [r3, #0]
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d1f6      	bne.n	ccc8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    ccda:	68fb      	ldr	r3, [r7, #12]
}
    ccdc:	4618      	mov	r0, r3
    ccde:	3714      	adds	r7, #20
    cce0:	46bd      	mov	sp, r7
    cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cce6:	4770      	bx	lr

0000cce8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cce8:	b480      	push	{r7}
    ccea:	b087      	sub	sp, #28
    ccec:	af00      	add	r7, sp, #0
    ccee:	60f8      	str	r0, [r7, #12]
    ccf0:	460b      	mov	r3, r1
    ccf2:	607a      	str	r2, [r7, #4]
    ccf4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    ccf6:	2300      	movs	r3, #0
    ccf8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    ccfa:	687b      	ldr	r3, [r7, #4]
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	dc0c      	bgt.n	cd1a <padbuffer+0x32>
    {
        return i32Cnt;
    cd00:	697b      	ldr	r3, [r7, #20]
    cd02:	e010      	b.n	cd26 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cd04:	68fb      	ldr	r3, [r7, #12]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d004      	beq.n	cd14 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cd0a:	68fb      	ldr	r3, [r7, #12]
    cd0c:	1c5a      	adds	r2, r3, #1
    cd0e:	60fa      	str	r2, [r7, #12]
    cd10:	7afa      	ldrb	r2, [r7, #11]
    cd12:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cd14:	697b      	ldr	r3, [r7, #20]
    cd16:	3301      	adds	r3, #1
    cd18:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cd1a:	687b      	ldr	r3, [r7, #4]
    cd1c:	1e5a      	subs	r2, r3, #1
    cd1e:	607a      	str	r2, [r7, #4]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d1ef      	bne.n	cd04 <padbuffer+0x1c>
    }

    return i32Cnt;
    cd24:	697b      	ldr	r3, [r7, #20]
}
    cd26:	4618      	mov	r0, r3
    cd28:	371c      	adds	r7, #28
    cd2a:	46bd      	mov	sp, r7
    cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd30:	4770      	bx	lr
	...

0000cd34 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cd34:	b590      	push	{r4, r7, lr}
    cd36:	b08f      	sub	sp, #60	; 0x3c
    cd38:	af00      	add	r7, sp, #0
    cd3a:	ed87 0a03 	vstr	s0, [r7, #12]
    cd3e:	60b8      	str	r0, [r7, #8]
    cd40:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cd42:	68bb      	ldr	r3, [r7, #8]
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd4a:	2b03      	cmp	r3, #3
    cd4c:	dc02      	bgt.n	cd54 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cd4e:	f06f 0302 	mvn.w	r3, #2
    cd52:	e0e7      	b.n	cf24 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    cd54:	edd7 7a03 	vldr	s15, [r7, #12]
    cd58:	eef5 7a40 	vcmp.f32	s15, #0.0
    cd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd60:	d104      	bne.n	cd6c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cd62:	68bb      	ldr	r3, [r7, #8]
    cd64:	4a71      	ldr	r2, [pc, #452]	; (cf2c <ftoa+0x1f8>)
    cd66:	601a      	str	r2, [r3, #0]
        return 3;
    cd68:	2303      	movs	r3, #3
    cd6a:	e0db      	b.n	cf24 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    cd6c:	68bb      	ldr	r3, [r7, #8]
    cd6e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cd70:	68fb      	ldr	r3, [r7, #12]
    cd72:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cd74:	693b      	ldr	r3, [r7, #16]
    cd76:	15db      	asrs	r3, r3, #23
    cd78:	b2db      	uxtb	r3, r3
    cd7a:	3b7f      	subs	r3, #127	; 0x7f
    cd7c:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cd7e:	693b      	ldr	r3, [r7, #16]
    cd80:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cd84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cd88:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cd8a:	2300      	movs	r3, #0
    cd8c:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cd8e:	2300      	movs	r3, #0
    cd90:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cd92:	69fb      	ldr	r3, [r7, #28]
    cd94:	2b1e      	cmp	r3, #30
    cd96:	dd02      	ble.n	cd9e <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cd98:	f06f 0301 	mvn.w	r3, #1
    cd9c:	e0c2      	b.n	cf24 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    cd9e:	69fb      	ldr	r3, [r7, #28]
    cda0:	f113 0f17 	cmn.w	r3, #23
    cda4:	da02      	bge.n	cdac <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cda6:	f04f 33ff 	mov.w	r3, #4294967295
    cdaa:	e0bb      	b.n	cf24 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    cdac:	69fb      	ldr	r3, [r7, #28]
    cdae:	2b16      	cmp	r3, #22
    cdb0:	dd06      	ble.n	cdc0 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cdb2:	69fb      	ldr	r3, [r7, #28]
    cdb4:	3b17      	subs	r3, #23
    cdb6:	69ba      	ldr	r2, [r7, #24]
    cdb8:	fa02 f303 	lsl.w	r3, r2, r3
    cdbc:	637b      	str	r3, [r7, #52]	; 0x34
    cdbe:	e01a      	b.n	cdf6 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    cdc0:	69fb      	ldr	r3, [r7, #28]
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	db0f      	blt.n	cde6 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cdc6:	69fb      	ldr	r3, [r7, #28]
    cdc8:	f1c3 0317 	rsb	r3, r3, #23
    cdcc:	69ba      	ldr	r2, [r7, #24]
    cdce:	fa42 f303 	asr.w	r3, r2, r3
    cdd2:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cdd4:	69fb      	ldr	r3, [r7, #28]
    cdd6:	3301      	adds	r3, #1
    cdd8:	69ba      	ldr	r2, [r7, #24]
    cdda:	fa02 f303 	lsl.w	r3, r2, r3
    cdde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cde2:	633b      	str	r3, [r7, #48]	; 0x30
    cde4:	e007      	b.n	cdf6 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cde6:	69bb      	ldr	r3, [r7, #24]
    cde8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cdec:	69fb      	ldr	r3, [r7, #28]
    cdee:	43db      	mvns	r3, r3
    cdf0:	fa42 f303 	asr.w	r3, r2, r3
    cdf4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cdf6:	693b      	ldr	r3, [r7, #16]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	da04      	bge.n	ce06 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    cdfc:	68bb      	ldr	r3, [r7, #8]
    cdfe:	1c5a      	adds	r2, r3, #1
    ce00:	60ba      	str	r2, [r7, #8]
    ce02:	222d      	movs	r2, #45	; 0x2d
    ce04:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ce06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d105      	bne.n	ce18 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    ce0c:	68bb      	ldr	r3, [r7, #8]
    ce0e:	1c5a      	adds	r2, r3, #1
    ce10:	60ba      	str	r2, [r7, #8]
    ce12:	2230      	movs	r2, #48	; 0x30
    ce14:	701a      	strb	r2, [r3, #0]
    ce16:	e021      	b.n	ce5c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	dd08      	ble.n	ce30 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ce1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce20:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ce24:	68ba      	ldr	r2, [r7, #8]
    ce26:	4618      	mov	r0, r3
    ce28:	4621      	mov	r1, r4
    ce2a:	f7ff fe96 	bl	cb5a <uint64_to_str>
    ce2e:	e011      	b.n	ce54 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    ce30:	68bb      	ldr	r3, [r7, #8]
    ce32:	1c5a      	adds	r2, r3, #1
    ce34:	60ba      	str	r2, [r7, #8]
    ce36:	222d      	movs	r2, #45	; 0x2d
    ce38:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce3c:	425b      	negs	r3, r3
    ce3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ce42:	68ba      	ldr	r2, [r7, #8]
    ce44:	4618      	mov	r0, r3
    ce46:	4621      	mov	r1, r4
    ce48:	f7ff fe87 	bl	cb5a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ce4c:	e002      	b.n	ce54 <ftoa+0x120>
        {
            pcBuf++;
    ce4e:	68bb      	ldr	r3, [r7, #8]
    ce50:	3301      	adds	r3, #1
    ce52:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ce54:	68bb      	ldr	r3, [r7, #8]
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d1f8      	bne.n	ce4e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ce5c:	68bb      	ldr	r3, [r7, #8]
    ce5e:	1c5a      	adds	r2, r3, #1
    ce60:	60ba      	str	r2, [r7, #8]
    ce62:	222e      	movs	r2, #46	; 0x2e
    ce64:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d105      	bne.n	ce78 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    ce6c:	68bb      	ldr	r3, [r7, #8]
    ce6e:	1c5a      	adds	r2, r3, #1
    ce70:	60ba      	str	r2, [r7, #8]
    ce72:	2230      	movs	r2, #48	; 0x30
    ce74:	701a      	strb	r2, [r3, #0]
    ce76:	e04f      	b.n	cf18 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce78:	68ba      	ldr	r2, [r7, #8]
    ce7a:	6a3b      	ldr	r3, [r7, #32]
    ce7c:	1ad3      	subs	r3, r2, r3
    ce7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce80:	1ad3      	subs	r3, r2, r3
    ce82:	3b01      	subs	r3, #1
    ce84:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ce86:	697a      	ldr	r2, [r7, #20]
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	4293      	cmp	r3, r2
    ce8c:	bfa8      	it	ge
    ce8e:	4613      	movge	r3, r2
    ce90:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    ce92:	2300      	movs	r3, #0
    ce94:	62bb      	str	r3, [r7, #40]	; 0x28
    ce96:	e015      	b.n	cec4 <ftoa+0x190>
        {
            i32FracPart *= 10;
    ce98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ce9a:	4613      	mov	r3, r2
    ce9c:	009b      	lsls	r3, r3, #2
    ce9e:	4413      	add	r3, r2
    cea0:	005b      	lsls	r3, r3, #1
    cea2:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cea6:	161b      	asrs	r3, r3, #24
    cea8:	b2da      	uxtb	r2, r3
    ceaa:	68bb      	ldr	r3, [r7, #8]
    ceac:	1c59      	adds	r1, r3, #1
    ceae:	60b9      	str	r1, [r7, #8]
    ceb0:	3230      	adds	r2, #48	; 0x30
    ceb2:	b2d2      	uxtb	r2, r2
    ceb4:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ceb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cebc:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cec0:	3301      	adds	r3, #1
    cec2:	62bb      	str	r3, [r7, #40]	; 0x28
    cec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cec6:	697b      	ldr	r3, [r7, #20]
    cec8:	429a      	cmp	r2, r3
    ceca:	dbe5      	blt.n	ce98 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cece:	4613      	mov	r3, r2
    ced0:	009b      	lsls	r3, r3, #2
    ced2:	4413      	add	r3, r2
    ced4:	005b      	lsls	r3, r3, #1
    ced6:	161b      	asrs	r3, r3, #24
    ced8:	2b04      	cmp	r3, #4
    ceda:	dd1d      	ble.n	cf18 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cedc:	68bb      	ldr	r3, [r7, #8]
    cede:	3b01      	subs	r3, #1
    cee0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cee2:	e015      	b.n	cf10 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cee6:	781b      	ldrb	r3, [r3, #0]
    cee8:	2b2e      	cmp	r3, #46	; 0x2e
    ceea:	d00e      	beq.n	cf0a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	2b39      	cmp	r3, #57	; 0x39
    cef2:	d103      	bne.n	cefc <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cef6:	2230      	movs	r2, #48	; 0x30
    cef8:	701a      	strb	r2, [r3, #0]
    cefa:	e006      	b.n	cf0a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	3301      	adds	r3, #1
    cf02:	b2da      	uxtb	r2, r3
    cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf06:	701a      	strb	r2, [r3, #0]
                    break;
    cf08:	e006      	b.n	cf18 <ftoa+0x1e4>
                }
                pcBuftmp--;
    cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf0c:	3b01      	subs	r3, #1
    cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cf10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cf12:	6a3b      	ldr	r3, [r7, #32]
    cf14:	429a      	cmp	r2, r3
    cf16:	d2e5      	bcs.n	cee4 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cf18:	68bb      	ldr	r3, [r7, #8]
    cf1a:	2200      	movs	r2, #0
    cf1c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cf1e:	68ba      	ldr	r2, [r7, #8]
    cf20:	6a3b      	ldr	r3, [r7, #32]
    cf22:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cf24:	4618      	mov	r0, r3
    cf26:	373c      	adds	r7, #60	; 0x3c
    cf28:	46bd      	mov	sp, r7
    cf2a:	bd90      	pop	{r4, r7, pc}
    cf2c:	00302e30 	.word	0x00302e30

0000cf30 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cf30:	b590      	push	{r4, r7, lr}
    cf32:	b095      	sub	sp, #84	; 0x54
    cf34:	af00      	add	r7, sp, #0
    cf36:	60f8      	str	r0, [r7, #12]
    cf38:	60b9      	str	r1, [r7, #8]
    cf3a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cf3c:	2300      	movs	r3, #0
    cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cf40:	2300      	movs	r3, #0
    cf42:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cf44:	e2e9      	b.n	d51a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cf46:	2306      	movs	r3, #6
    cf48:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cf4a:	68bb      	ldr	r3, [r7, #8]
    cf4c:	781b      	ldrb	r3, [r3, #0]
    cf4e:	2b25      	cmp	r3, #37	; 0x25
    cf50:	d01f      	beq.n	cf92 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cf52:	68fb      	ldr	r3, [r7, #12]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d015      	beq.n	cf84 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cf58:	68bb      	ldr	r3, [r7, #8]
    cf5a:	781b      	ldrb	r3, [r3, #0]
    cf5c:	2b0a      	cmp	r3, #10
    cf5e:	d10b      	bne.n	cf78 <am_util_stdio_vsprintf+0x48>
    cf60:	4bb2      	ldr	r3, [pc, #712]	; (d22c <am_util_stdio_vsprintf+0x2fc>)
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	2b00      	cmp	r3, #0
    cf66:	d007      	beq.n	cf78 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cf68:	68fb      	ldr	r3, [r7, #12]
    cf6a:	1c5a      	adds	r2, r3, #1
    cf6c:	60fa      	str	r2, [r7, #12]
    cf6e:	220d      	movs	r2, #13
    cf70:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf74:	3301      	adds	r3, #1
    cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cf78:	68fb      	ldr	r3, [r7, #12]
    cf7a:	1c5a      	adds	r2, r3, #1
    cf7c:	60fa      	str	r2, [r7, #12]
    cf7e:	68ba      	ldr	r2, [r7, #8]
    cf80:	7812      	ldrb	r2, [r2, #0]
    cf82:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cf84:	68bb      	ldr	r3, [r7, #8]
    cf86:	3301      	adds	r3, #1
    cf88:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf8c:	3301      	adds	r3, #1
    cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cf90:	e2c3      	b.n	d51a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cf92:	68bb      	ldr	r3, [r7, #8]
    cf94:	3301      	adds	r3, #1
    cf96:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cf98:	2300      	movs	r3, #0
    cf9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cf9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cfa6:	2320      	movs	r3, #32
    cfa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cfac:	68bb      	ldr	r3, [r7, #8]
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	2b30      	cmp	r3, #48	; 0x30
    cfb2:	d105      	bne.n	cfc0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cfb4:	2330      	movs	r3, #48	; 0x30
    cfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cfba:	68bb      	ldr	r3, [r7, #8]
    cfbc:	3301      	adds	r3, #1
    cfbe:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cfc0:	f107 0310 	add.w	r3, r7, #16
    cfc4:	4619      	mov	r1, r3
    cfc6:	68b8      	ldr	r0, [r7, #8]
    cfc8:	f7ff fd81 	bl	cace <decstr_to_int>
    cfcc:	4603      	mov	r3, r0
    cfce:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cfd0:	693b      	ldr	r3, [r7, #16]
    cfd2:	68ba      	ldr	r2, [r7, #8]
    cfd4:	4413      	add	r3, r2
    cfd6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cfd8:	68bb      	ldr	r3, [r7, #8]
    cfda:	781b      	ldrb	r3, [r3, #0]
    cfdc:	2b73      	cmp	r3, #115	; 0x73
    cfde:	d005      	beq.n	cfec <am_util_stdio_vsprintf+0xbc>
    cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	da02      	bge.n	cfec <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfe8:	425b      	negs	r3, r3
    cfea:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cfec:	68bb      	ldr	r3, [r7, #8]
    cfee:	781b      	ldrb	r3, [r3, #0]
    cff0:	2b2e      	cmp	r3, #46	; 0x2e
    cff2:	d10e      	bne.n	d012 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cff4:	68bb      	ldr	r3, [r7, #8]
    cff6:	3301      	adds	r3, #1
    cff8:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cffa:	f107 0310 	add.w	r3, r7, #16
    cffe:	4619      	mov	r1, r3
    d000:	68b8      	ldr	r0, [r7, #8]
    d002:	f7ff fd64 	bl	cace <decstr_to_int>
    d006:	4603      	mov	r3, r0
    d008:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d00a:	693b      	ldr	r3, [r7, #16]
    d00c:	68ba      	ldr	r2, [r7, #8]
    d00e:	4413      	add	r3, r2
    d010:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d012:	68bb      	ldr	r3, [r7, #8]
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	2b6c      	cmp	r3, #108	; 0x6c
    d018:	d10c      	bne.n	d034 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d01a:	68bb      	ldr	r3, [r7, #8]
    d01c:	3301      	adds	r3, #1
    d01e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d020:	68bb      	ldr	r3, [r7, #8]
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	2b6c      	cmp	r3, #108	; 0x6c
    d026:	d105      	bne.n	d034 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d028:	68bb      	ldr	r3, [r7, #8]
    d02a:	3301      	adds	r3, #1
    d02c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d02e:	2301      	movs	r3, #1
    d030:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d034:	68bb      	ldr	r3, [r7, #8]
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	3b46      	subs	r3, #70	; 0x46
    d03a:	2b32      	cmp	r3, #50	; 0x32
    d03c:	f200 825a 	bhi.w	d4f4 <am_util_stdio_vsprintf+0x5c4>
    d040:	a201      	add	r2, pc, #4	; (adr r2, d048 <am_util_stdio_vsprintf+0x118>)
    d042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d046:	bf00      	nop
    d048:	0000d47b 	.word	0x0000d47b
    d04c:	0000d4f5 	.word	0x0000d4f5
    d050:	0000d4f5 	.word	0x0000d4f5
    d054:	0000d4f5 	.word	0x0000d4f5
    d058:	0000d4f5 	.word	0x0000d4f5
    d05c:	0000d4f5 	.word	0x0000d4f5
    d060:	0000d4f5 	.word	0x0000d4f5
    d064:	0000d4f5 	.word	0x0000d4f5
    d068:	0000d4f5 	.word	0x0000d4f5
    d06c:	0000d4f5 	.word	0x0000d4f5
    d070:	0000d4f5 	.word	0x0000d4f5
    d074:	0000d4f5 	.word	0x0000d4f5
    d078:	0000d4f5 	.word	0x0000d4f5
    d07c:	0000d4f5 	.word	0x0000d4f5
    d080:	0000d4f5 	.word	0x0000d4f5
    d084:	0000d4f5 	.word	0x0000d4f5
    d088:	0000d4f5 	.word	0x0000d4f5
    d08c:	0000d4f5 	.word	0x0000d4f5
    d090:	0000d20f 	.word	0x0000d20f
    d094:	0000d4f5 	.word	0x0000d4f5
    d098:	0000d4f5 	.word	0x0000d4f5
    d09c:	0000d4f5 	.word	0x0000d4f5
    d0a0:	0000d4f5 	.word	0x0000d4f5
    d0a4:	0000d4f5 	.word	0x0000d4f5
    d0a8:	0000d4f5 	.word	0x0000d4f5
    d0ac:	0000d4f5 	.word	0x0000d4f5
    d0b0:	0000d4f5 	.word	0x0000d4f5
    d0b4:	0000d4f5 	.word	0x0000d4f5
    d0b8:	0000d4f5 	.word	0x0000d4f5
    d0bc:	0000d115 	.word	0x0000d115
    d0c0:	0000d341 	.word	0x0000d341
    d0c4:	0000d4f5 	.word	0x0000d4f5
    d0c8:	0000d47b 	.word	0x0000d47b
    d0cc:	0000d4f5 	.word	0x0000d4f5
    d0d0:	0000d4f5 	.word	0x0000d4f5
    d0d4:	0000d341 	.word	0x0000d341
    d0d8:	0000d4f5 	.word	0x0000d4f5
    d0dc:	0000d4f5 	.word	0x0000d4f5
    d0e0:	0000d4f5 	.word	0x0000d4f5
    d0e4:	0000d4f5 	.word	0x0000d4f5
    d0e8:	0000d4f5 	.word	0x0000d4f5
    d0ec:	0000d4f5 	.word	0x0000d4f5
    d0f0:	0000d4f5 	.word	0x0000d4f5
    d0f4:	0000d4f5 	.word	0x0000d4f5
    d0f8:	0000d4f5 	.word	0x0000d4f5
    d0fc:	0000d13b 	.word	0x0000d13b
    d100:	0000d4f5 	.word	0x0000d4f5
    d104:	0000d2ad 	.word	0x0000d2ad
    d108:	0000d4f5 	.word	0x0000d4f5
    d10c:	0000d4f5 	.word	0x0000d4f5
    d110:	0000d209 	.word	0x0000d209
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	1d1a      	adds	r2, r3, #4
    d118:	607a      	str	r2, [r7, #4]
    d11a:	681b      	ldr	r3, [r3, #0]
    d11c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d120:	68fb      	ldr	r3, [r7, #12]
    d122:	2b00      	cmp	r3, #0
    d124:	d005      	beq.n	d132 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d126:	68fb      	ldr	r3, [r7, #12]
    d128:	1c5a      	adds	r2, r3, #1
    d12a:	60fa      	str	r2, [r7, #12]
    d12c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d130:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d134:	3301      	adds	r3, #1
    d136:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d138:	e1ec      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d13a:	687b      	ldr	r3, [r7, #4]
    d13c:	1d1a      	adds	r2, r3, #4
    d13e:	607a      	str	r2, [r7, #4]
    d140:	681b      	ldr	r3, [r3, #0]
    d142:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d144:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d146:	f7ff fdb4 	bl	ccb2 <simple_strlen>
    d14a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d14e:	2b00      	cmp	r3, #0
    d150:	dd2e      	ble.n	d1b0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d156:	429a      	cmp	r2, r3
    d158:	d22a      	bcs.n	d1b0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d15e:	1ad3      	subs	r3, r2, r3
    d160:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d166:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d168:	4619      	mov	r1, r3
    d16a:	68f8      	ldr	r0, [r7, #12]
    d16c:	f7ff fdbc 	bl	cce8 <padbuffer>
    d170:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d172:	68fb      	ldr	r3, [r7, #12]
    d174:	2b00      	cmp	r3, #0
    d176:	d001      	beq.n	d17c <am_util_stdio_vsprintf+0x24c>
    d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d17a:	e000      	b.n	d17e <am_util_stdio_vsprintf+0x24e>
    d17c:	2300      	movs	r3, #0
    d17e:	68fa      	ldr	r2, [r7, #12]
    d180:	4413      	add	r3, r2
    d182:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d188:	4413      	add	r3, r2
    d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d18c:	2300      	movs	r3, #0
    d18e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d190:	e00e      	b.n	d1b0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d192:	68fb      	ldr	r3, [r7, #12]
    d194:	2b00      	cmp	r3, #0
    d196:	d005      	beq.n	d1a4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d198:	68fb      	ldr	r3, [r7, #12]
    d19a:	1c5a      	adds	r2, r3, #1
    d19c:	60fa      	str	r2, [r7, #12]
    d19e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d1a0:	7812      	ldrb	r2, [r2, #0]
    d1a2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d1a6:	3301      	adds	r3, #1
    d1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1ac:	3301      	adds	r3, #1
    d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d1b2:	781b      	ldrb	r3, [r3, #0]
    d1b4:	2b00      	cmp	r3, #0
    d1b6:	d1ec      	bne.n	d192 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	f000 81a7 	beq.w	d50e <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1c2:	425b      	negs	r3, r3
    d1c4:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d1ca:	429a      	cmp	r2, r3
    d1cc:	f080 819f 	bcs.w	d50e <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d1d4:	1ad3      	subs	r3, r2, r3
    d1d6:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1de:	4619      	mov	r1, r3
    d1e0:	68f8      	ldr	r0, [r7, #12]
    d1e2:	f7ff fd81 	bl	cce8 <padbuffer>
    d1e6:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d1e8:	68fb      	ldr	r3, [r7, #12]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d001      	beq.n	d1f2 <am_util_stdio_vsprintf+0x2c2>
    d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1f0:	e000      	b.n	d1f4 <am_util_stdio_vsprintf+0x2c4>
    d1f2:	2300      	movs	r3, #0
    d1f4:	68fa      	ldr	r2, [r7, #12]
    d1f6:	4413      	add	r3, r2
    d1f8:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1fe:	4413      	add	r3, r2
    d200:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d202:	2300      	movs	r3, #0
    d204:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d206:	e182      	b.n	d50e <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
    d208:	2301      	movs	r3, #1
    d20a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d20e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d212:	2b00      	cmp	r3, #0
    d214:	d00c      	beq.n	d230 <am_util_stdio_vsprintf+0x300>
    d216:	687b      	ldr	r3, [r7, #4]
    d218:	3307      	adds	r3, #7
    d21a:	f023 0307 	bic.w	r3, r3, #7
    d21e:	f103 0208 	add.w	r2, r3, #8
    d222:	607a      	str	r2, [r7, #4]
    d224:	e9d3 3400 	ldrd	r3, r4, [r3]
    d228:	e008      	b.n	d23c <am_util_stdio_vsprintf+0x30c>
    d22a:	bf00      	nop
    d22c:	10001114 	.word	0x10001114
                                      va_arg(pArgs, uint32_t);
    d230:	687b      	ldr	r3, [r7, #4]
    d232:	1d1a      	adds	r2, r3, #4
    d234:	607a      	str	r2, [r7, #4]
    d236:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d238:	f04f 0400 	mov.w	r4, #0
    d23c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d242:	2b00      	cmp	r3, #0
    d244:	d01e      	beq.n	d284 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d246:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d24a:	f7ff fc18 	bl	ca7e <ndigits_in_hex>
    d24e:	4602      	mov	r2, r0
    d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d252:	1a9b      	subs	r3, r3, r2
    d254:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d25a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d25c:	4619      	mov	r1, r3
    d25e:	68f8      	ldr	r0, [r7, #12]
    d260:	f7ff fd42 	bl	cce8 <padbuffer>
    d264:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d266:	68fb      	ldr	r3, [r7, #12]
    d268:	2b00      	cmp	r3, #0
    d26a:	d001      	beq.n	d270 <am_util_stdio_vsprintf+0x340>
    d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d26e:	e000      	b.n	d272 <am_util_stdio_vsprintf+0x342>
    d270:	2300      	movs	r3, #0
    d272:	68fa      	ldr	r2, [r7, #12]
    d274:	4413      	add	r3, r2
    d276:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d27a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d27c:	4413      	add	r3, r2
    d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d280:	2300      	movs	r3, #0
    d282:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d284:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d288:	68fa      	ldr	r2, [r7, #12]
    d28a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d28e:	f7ff fcac 	bl	cbea <uint64_to_hexstr>
    d292:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d294:	68fb      	ldr	r3, [r7, #12]
    d296:	2b00      	cmp	r3, #0
    d298:	d003      	beq.n	d2a2 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
    d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d29c:	68fa      	ldr	r2, [r7, #12]
    d29e:	4413      	add	r3, r2
    d2a0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2a6:	4413      	add	r3, r2
    d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2aa:	e133      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d009      	beq.n	d2c8 <am_util_stdio_vsprintf+0x398>
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	3307      	adds	r3, #7
    d2b8:	f023 0307 	bic.w	r3, r3, #7
    d2bc:	f103 0208 	add.w	r2, r3, #8
    d2c0:	607a      	str	r2, [r7, #4]
    d2c2:	e9d3 3400 	ldrd	r3, r4, [r3]
    d2c6:	e005      	b.n	d2d4 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    d2c8:	687b      	ldr	r3, [r7, #4]
    d2ca:	1d1a      	adds	r2, r3, #4
    d2cc:	607a      	str	r2, [r7, #4]
    d2ce:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2d0:	f04f 0400 	mov.w	r4, #0
    d2d4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d01e      	beq.n	d31c <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d2de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2e2:	f7ff fb8e 	bl	ca02 <ndigits_in_u64>
    d2e6:	4602      	mov	r2, r0
    d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2ea:	1a9b      	subs	r3, r3, r2
    d2ec:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d2f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d2f4:	4619      	mov	r1, r3
    d2f6:	68f8      	ldr	r0, [r7, #12]
    d2f8:	f7ff fcf6 	bl	cce8 <padbuffer>
    d2fc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d2fe:	68fb      	ldr	r3, [r7, #12]
    d300:	2b00      	cmp	r3, #0
    d302:	d001      	beq.n	d308 <am_util_stdio_vsprintf+0x3d8>
    d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d306:	e000      	b.n	d30a <am_util_stdio_vsprintf+0x3da>
    d308:	2300      	movs	r3, #0
    d30a:	68fa      	ldr	r2, [r7, #12]
    d30c:	4413      	add	r3, r2
    d30e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d314:	4413      	add	r3, r2
    d316:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d318:	2300      	movs	r3, #0
    d31a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d31c:	68fa      	ldr	r2, [r7, #12]
    d31e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d322:	f7ff fc1a 	bl	cb5a <uint64_to_str>
    d326:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d328:	68fb      	ldr	r3, [r7, #12]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d003      	beq.n	d336 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d330:	68fa      	ldr	r2, [r7, #12]
    d332:	4413      	add	r3, r2
    d334:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d33a:	4413      	add	r3, r2
    d33c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d33e:	e0e9      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d340:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d344:	2b00      	cmp	r3, #0
    d346:	d009      	beq.n	d35c <am_util_stdio_vsprintf+0x42c>
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	3307      	adds	r3, #7
    d34c:	f023 0307 	bic.w	r3, r3, #7
    d350:	f103 0208 	add.w	r2, r3, #8
    d354:	607a      	str	r2, [r7, #4]
    d356:	e9d3 3400 	ldrd	r3, r4, [r3]
    d35a:	e005      	b.n	d368 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	1d1a      	adds	r2, r3, #4
    d360:	607a      	str	r2, [r7, #4]
    d362:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d364:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d368:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d36c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d370:	2b00      	cmp	r3, #0
    d372:	f174 0300 	sbcs.w	r3, r4, #0
    d376:	da0a      	bge.n	d38e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d378:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d37c:	425b      	negs	r3, r3
    d37e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d382:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d386:	2301      	movs	r3, #1
    d388:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d38c:	e006      	b.n	d39c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d38e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d392:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d396:	2300      	movs	r3, #0
    d398:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d04a      	beq.n	d438 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d3a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d3a6:	4618      	mov	r0, r3
    d3a8:	4621      	mov	r1, r4
    d3aa:	f7ff fb4b 	bl	ca44 <ndigits_in_i64>
    d3ae:	4602      	mov	r2, r0
    d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3b2:	1a9b      	subs	r3, r3, r2
    d3b4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d3b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d011      	beq.n	d3e2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3c0:	3b01      	subs	r3, #1
    d3c2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3c8:	2b30      	cmp	r3, #48	; 0x30
    d3ca:	d10a      	bne.n	d3e2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d3cc:	68fb      	ldr	r3, [r7, #12]
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d004      	beq.n	d3dc <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d3d2:	68fb      	ldr	r3, [r7, #12]
    d3d4:	1c5a      	adds	r2, r3, #1
    d3d6:	60fa      	str	r2, [r7, #12]
    d3d8:	222d      	movs	r2, #45	; 0x2d
    d3da:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3de:	3301      	adds	r3, #1
    d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d3e8:	4619      	mov	r1, r3
    d3ea:	68f8      	ldr	r0, [r7, #12]
    d3ec:	f7ff fc7c 	bl	cce8 <padbuffer>
    d3f0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	d001      	beq.n	d3fc <am_util_stdio_vsprintf+0x4cc>
    d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3fa:	e000      	b.n	d3fe <am_util_stdio_vsprintf+0x4ce>
    d3fc:	2300      	movs	r3, #0
    d3fe:	68fa      	ldr	r2, [r7, #12]
    d400:	4413      	add	r3, r2
    d402:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d408:	4413      	add	r3, r2
    d40a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d40c:	2300      	movs	r3, #0
    d40e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d410:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d414:	2b00      	cmp	r3, #0
    d416:	d01e      	beq.n	d456 <am_util_stdio_vsprintf+0x526>
    d418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d41c:	2b20      	cmp	r3, #32
    d41e:	d11a      	bne.n	d456 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d420:	68fb      	ldr	r3, [r7, #12]
    d422:	2b00      	cmp	r3, #0
    d424:	d004      	beq.n	d430 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d426:	68fb      	ldr	r3, [r7, #12]
    d428:	1c5a      	adds	r2, r3, #1
    d42a:	60fa      	str	r2, [r7, #12]
    d42c:	222d      	movs	r2, #45	; 0x2d
    d42e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d432:	3301      	adds	r3, #1
    d434:	63fb      	str	r3, [r7, #60]	; 0x3c
    d436:	e00e      	b.n	d456 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d43c:	2b00      	cmp	r3, #0
    d43e:	d00a      	beq.n	d456 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d440:	68fb      	ldr	r3, [r7, #12]
    d442:	2b00      	cmp	r3, #0
    d444:	d004      	beq.n	d450 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d446:	68fb      	ldr	r3, [r7, #12]
    d448:	1c5a      	adds	r2, r3, #1
    d44a:	60fa      	str	r2, [r7, #12]
    d44c:	222d      	movs	r2, #45	; 0x2d
    d44e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d452:	3301      	adds	r3, #1
    d454:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d456:	68fa      	ldr	r2, [r7, #12]
    d458:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d45c:	f7ff fb7d 	bl	cb5a <uint64_to_str>
    d460:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d462:	68fb      	ldr	r3, [r7, #12]
    d464:	2b00      	cmp	r3, #0
    d466:	d003      	beq.n	d470 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d46a:	68fa      	ldr	r2, [r7, #12]
    d46c:	4413      	add	r3, r2
    d46e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d474:	4413      	add	r3, r2
    d476:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d478:	e04c      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	2b00      	cmp	r3, #0
    d47e:	d048      	beq.n	d512 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	3307      	adds	r3, #7
    d484:	f023 0307 	bic.w	r3, r3, #7
    d488:	f103 0208 	add.w	r2, r3, #8
    d48c:	607a      	str	r2, [r7, #4]
    d48e:	e9d3 3400 	ldrd	r3, r4, [r3]
    d492:	4618      	mov	r0, r3
    d494:	4621      	mov	r1, r4
    d496:	f7fe fe33 	bl	c100 <__aeabi_d2f>
    d49a:	4603      	mov	r3, r0
    d49c:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d49e:	68fb      	ldr	r3, [r7, #12]
    d4a0:	2214      	movs	r2, #20
    d4a2:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d4a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d4a6:	68f8      	ldr	r0, [r7, #12]
    d4a8:	ed97 0a05 	vldr	s0, [r7, #20]
    d4ac:	f7ff fc42 	bl	cd34 <ftoa>
    d4b0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	da14      	bge.n	d4e2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4be:	d102      	bne.n	d4c6 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d4c0:	4b1e      	ldr	r3, [pc, #120]	; (d53c <am_util_stdio_vsprintf+0x60c>)
    d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    d4c4:	e008      	b.n	d4d8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4c8:	f113 0f02 	cmn.w	r3, #2
    d4cc:	d102      	bne.n	d4d4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d4ce:	4b1c      	ldr	r3, [pc, #112]	; (d540 <am_util_stdio_vsprintf+0x610>)
    d4d0:	62bb      	str	r3, [r7, #40]	; 0x28
    d4d2:	e001      	b.n	d4d8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d4d4:	4b1b      	ldr	r3, [pc, #108]	; (d544 <am_util_stdio_vsprintf+0x614>)
    d4d6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d4d8:	68fb      	ldr	r3, [r7, #12]
    d4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d4dc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d4de:	2303      	movs	r3, #3
    d4e0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4e6:	4413      	add	r3, r2
    d4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4ec:	68fa      	ldr	r2, [r7, #12]
    d4ee:	4413      	add	r3, r2
    d4f0:	60fb      	str	r3, [r7, #12]
                }
                break;
    d4f2:	e00e      	b.n	d512 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d4f4:	68fb      	ldr	r3, [r7, #12]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d005      	beq.n	d506 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d4fa:	68fb      	ldr	r3, [r7, #12]
    d4fc:	1c5a      	adds	r2, r3, #1
    d4fe:	60fa      	str	r2, [r7, #12]
    d500:	68ba      	ldr	r2, [r7, #8]
    d502:	7812      	ldrb	r2, [r2, #0]
    d504:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d508:	3301      	adds	r3, #1
    d50a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d50c:	e002      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>
                break;
    d50e:	bf00      	nop
    d510:	e000      	b.n	d514 <am_util_stdio_vsprintf+0x5e4>
                break;
    d512:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d514:	68bb      	ldr	r3, [r7, #8]
    d516:	3301      	adds	r3, #1
    d518:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d51a:	68bb      	ldr	r3, [r7, #8]
    d51c:	781b      	ldrb	r3, [r3, #0]
    d51e:	2b00      	cmp	r3, #0
    d520:	f47f ad11 	bne.w	cf46 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	2b00      	cmp	r3, #0
    d528:	d002      	beq.n	d530 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d52a:	68fb      	ldr	r3, [r7, #12]
    d52c:	2200      	movs	r2, #0
    d52e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d532:	4618      	mov	r0, r3
    d534:	3754      	adds	r7, #84	; 0x54
    d536:	46bd      	mov	sp, r7
    d538:	bd90      	pop	{r4, r7, pc}
    d53a:	bf00      	nop
    d53c:	00302e30 	.word	0x00302e30
    d540:	00232e23 	.word	0x00232e23
    d544:	003f2e3f 	.word	0x003f2e3f

0000d548 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d548:	b40f      	push	{r0, r1, r2, r3}
    d54a:	b580      	push	{r7, lr}
    d54c:	b082      	sub	sp, #8
    d54e:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d550:	4b0d      	ldr	r3, [pc, #52]	; (d588 <am_util_stdio_printf+0x40>)
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	2b00      	cmp	r3, #0
    d556:	d101      	bne.n	d55c <am_util_stdio_printf+0x14>
    {
        return 0;
    d558:	2300      	movs	r3, #0
    d55a:	e00d      	b.n	d578 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d55c:	f107 0314 	add.w	r3, r7, #20
    d560:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d562:	683a      	ldr	r2, [r7, #0]
    d564:	6939      	ldr	r1, [r7, #16]
    d566:	4809      	ldr	r0, [pc, #36]	; (d58c <am_util_stdio_printf+0x44>)
    d568:	f7ff fce2 	bl	cf30 <am_util_stdio_vsprintf>
    d56c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d56e:	4b06      	ldr	r3, [pc, #24]	; (d588 <am_util_stdio_printf+0x40>)
    d570:	681b      	ldr	r3, [r3, #0]
    d572:	4806      	ldr	r0, [pc, #24]	; (d58c <am_util_stdio_printf+0x44>)
    d574:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d576:	687b      	ldr	r3, [r7, #4]
}
    d578:	4618      	mov	r0, r3
    d57a:	3708      	adds	r7, #8
    d57c:	46bd      	mov	sp, r7
    d57e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d582:	b004      	add	sp, #16
    d584:	4770      	bx	lr
    d586:	bf00      	nop
    d588:	10007130 	.word	0x10007130
    d58c:	10001014 	.word	0x10001014

0000d590 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d590:	b580      	push	{r7, lr}
    d592:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d594:	4802      	ldr	r0, [pc, #8]	; (d5a0 <am_util_stdio_terminal_clear+0x10>)
    d596:	f7ff ffd7 	bl	d548 <am_util_stdio_printf>
}
    d59a:	bf00      	nop
    d59c:	bd80      	pop	{r7, pc}
    d59e:	bf00      	nop
    d5a0:	0000eec4 	.word	0x0000eec4

0000d5a4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d5a4:	4811      	ldr	r0, [pc, #68]	; (d5ec <zero_loop+0x12>)
    d5a6:	4912      	ldr	r1, [pc, #72]	; (d5f0 <zero_loop+0x16>)
    d5a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d5aa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d5ae:	4811      	ldr	r0, [pc, #68]	; (d5f4 <zero_loop+0x1a>)
    d5b0:	6801      	ldr	r1, [r0, #0]
    d5b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d5b6:	6001      	str	r1, [r0, #0]
    d5b8:	f3bf 8f4f 	dsb	sy
    d5bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d5c0:	480d      	ldr	r0, [pc, #52]	; (d5f8 <zero_loop+0x1e>)
    d5c2:	490e      	ldr	r1, [pc, #56]	; (d5fc <zero_loop+0x22>)
    d5c4:	4a0e      	ldr	r2, [pc, #56]	; (d600 <zero_loop+0x26>)

0000d5c6 <copy_loop>:
    d5c6:	f850 3b04 	ldr.w	r3, [r0], #4
    d5ca:	f841 3b04 	str.w	r3, [r1], #4
    d5ce:	4291      	cmp	r1, r2
    d5d0:	dbf9      	blt.n	d5c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d5d2:	480c      	ldr	r0, [pc, #48]	; (d604 <zero_loop+0x2a>)
    d5d4:	490c      	ldr	r1, [pc, #48]	; (d608 <zero_loop+0x2e>)
    d5d6:	f04f 0200 	mov.w	r2, #0

0000d5da <zero_loop>:
    d5da:	4288      	cmp	r0, r1
    d5dc:	bfb8      	it	lt
    d5de:	f840 2b04 	strlt.w	r2, [r0], #4
    d5e2:	dbfa      	blt.n	d5da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d5e4:	f7fe ff16 	bl	c414 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d5e8:	be00      	bkpt	0x0000
}
    d5ea:	bf00      	nop
    d5ec:	e000ed08 	.word	0xe000ed08
    d5f0:	0000c000 	.word	0x0000c000
    d5f4:	e000ed88 	.word	0xe000ed88
    d5f8:	0000f318 	.word	0x0000f318
    d5fc:	10001000 	.word	0x10001000
    d600:	10001010 	.word	0x10001010
    d604:	10001010 	.word	0x10001010
    d608:	10007240 	.word	0x10007240

0000d60c <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d60c:	b480      	push	{r7}
    d60e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d610:	e7fe      	b.n	d610 <NMI_Handler+0x4>

0000d612 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d612:	b480      	push	{r7}
    d614:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d616:	e7fe      	b.n	d616 <DebugMon_Handler+0x4>

0000d618 <am_bsp_uart_string_print>:
    d618:	b510      	push	{r4, lr}
    d61a:	b086      	sub	sp, #24
    d61c:	7804      	ldrb	r4, [r0, #0]
    d61e:	2300      	movs	r3, #0
    d620:	9300      	str	r3, [sp, #0]
    d622:	b13c      	cbz	r4, d634 <am_bsp_uart_string_print+0x1c>
    d624:	4603      	mov	r3, r0
    d626:	f1c0 0201 	rsb	r2, r0, #1
    d62a:	18d4      	adds	r4, r2, r3
    d62c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d630:	2900      	cmp	r1, #0
    d632:	d1fa      	bne.n	d62a <am_bsp_uart_string_print+0x12>
    d634:	4b09      	ldr	r3, [pc, #36]	; (d65c <am_bsp_uart_string_print+0x44>)
    d636:	9002      	str	r0, [sp, #8]
    d638:	2200      	movs	r2, #0
    d63a:	6818      	ldr	r0, [r3, #0]
    d63c:	9403      	str	r4, [sp, #12]
    d63e:	f04f 33ff 	mov.w	r3, #4294967295
    d642:	a901      	add	r1, sp, #4
    d644:	9304      	str	r3, [sp, #16]
    d646:	9201      	str	r2, [sp, #4]
    d648:	f8cd d014 	str.w	sp, [sp, #20]
    d64c:	f000 ffd4 	bl	e5f8 <am_hal_uart_transfer>
    d650:	9b00      	ldr	r3, [sp, #0]
    d652:	42a3      	cmp	r3, r4
    d654:	d000      	beq.n	d658 <am_bsp_uart_string_print+0x40>
    d656:	e7fe      	b.n	d656 <am_bsp_uart_string_print+0x3e>
    d658:	b006      	add	sp, #24
    d65a:	bd10      	pop	{r4, pc}
    d65c:	10001118 	.word	0x10001118

0000d660 <am_bsp_uart_printf_enable>:
    d660:	b510      	push	{r4, lr}
    d662:	4c10      	ldr	r4, [pc, #64]	; (d6a4 <am_bsp_uart_printf_enable+0x44>)
    d664:	4b10      	ldr	r3, [pc, #64]	; (d6a8 <am_bsp_uart_printf_enable+0x48>)
    d666:	4621      	mov	r1, r4
    d668:	2202      	movs	r2, #2
    d66a:	2000      	movs	r0, #0
    d66c:	601a      	str	r2, [r3, #0]
    d66e:	f000 fe1d 	bl	e2ac <am_hal_uart_initialize>
    d672:	2200      	movs	r2, #0
    d674:	4611      	mov	r1, r2
    d676:	6820      	ldr	r0, [r4, #0]
    d678:	f000 fe40 	bl	e2fc <am_hal_uart_power_control>
    d67c:	6820      	ldr	r0, [r4, #0]
    d67e:	490b      	ldr	r1, [pc, #44]	; (d6ac <am_bsp_uart_printf_enable+0x4c>)
    d680:	f000 feae 	bl	e3e0 <am_hal_uart_configure>
    d684:	4b0a      	ldr	r3, [pc, #40]	; (d6b0 <am_bsp_uart_printf_enable+0x50>)
    d686:	2030      	movs	r0, #48	; 0x30
    d688:	6819      	ldr	r1, [r3, #0]
    d68a:	f000 fb63 	bl	dd54 <am_hal_gpio_pinconfig>
    d68e:	4b09      	ldr	r3, [pc, #36]	; (d6b4 <am_bsp_uart_printf_enable+0x54>)
    d690:	2031      	movs	r0, #49	; 0x31
    d692:	6819      	ldr	r1, [r3, #0]
    d694:	f000 fb5e 	bl	dd54 <am_hal_gpio_pinconfig>
    d698:	4807      	ldr	r0, [pc, #28]	; (d6b8 <am_bsp_uart_printf_enable+0x58>)
    d69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d69e:	f7ff b8a3 	b.w	c7e8 <am_util_stdio_printf_init>
    d6a2:	bf00      	nop
    d6a4:	10001118 	.word	0x10001118
    d6a8:	1000111c 	.word	0x1000111c
    d6ac:	0000eee0 	.word	0x0000eee0
    d6b0:	0000ef0c 	.word	0x0000ef0c
    d6b4:	0000ef08 	.word	0x0000ef08
    d6b8:	0000d619 	.word	0x0000d619

0000d6bc <am_hal_adc_initialize>:
    d6bc:	b108      	cbz	r0, d6c2 <am_hal_adc_initialize+0x6>
    d6be:	2005      	movs	r0, #5
    d6c0:	4770      	bx	lr
    d6c2:	b1a9      	cbz	r1, d6f0 <am_hal_adc_initialize+0x34>
    d6c4:	4a0b      	ldr	r2, [pc, #44]	; (d6f4 <am_hal_adc_initialize+0x38>)
    d6c6:	78d3      	ldrb	r3, [r2, #3]
    d6c8:	f013 0001 	ands.w	r0, r3, #1
    d6cc:	d001      	beq.n	d6d2 <am_hal_adc_initialize+0x16>
    d6ce:	2007      	movs	r0, #7
    d6d0:	4770      	bx	lr
    d6d2:	b430      	push	{r4, r5}
    d6d4:	f043 0301 	orr.w	r3, r3, #1
    d6d8:	70d3      	strb	r3, [r2, #3]
    d6da:	6813      	ldr	r3, [r2, #0]
    d6dc:	4d06      	ldr	r5, [pc, #24]	; (d6f8 <am_hal_adc_initialize+0x3c>)
    d6de:	4c07      	ldr	r4, [pc, #28]	; (d6fc <am_hal_adc_initialize+0x40>)
    d6e0:	6050      	str	r0, [r2, #4]
    d6e2:	f365 0317 	bfi	r3, r5, #0, #24
    d6e6:	6013      	str	r3, [r2, #0]
    d6e8:	6020      	str	r0, [r4, #0]
    d6ea:	600a      	str	r2, [r1, #0]
    d6ec:	bc30      	pop	{r4, r5}
    d6ee:	4770      	bx	lr
    d6f0:	2006      	movs	r0, #6
    d6f2:	4770      	bx	lr
    d6f4:	10007138 	.word	0x10007138
    d6f8:	00afafaf 	.word	0x00afafaf
    d6fc:	10007134 	.word	0x10007134

0000d700 <am_hal_adc_configure>:
    d700:	b128      	cbz	r0, d70e <am_hal_adc_configure+0xe>
    d702:	6803      	ldr	r3, [r0, #0]
    d704:	4a18      	ldr	r2, [pc, #96]	; (d768 <am_hal_adc_configure+0x68>)
    d706:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d70a:	4293      	cmp	r3, r2
    d70c:	d001      	beq.n	d712 <am_hal_adc_configure+0x12>
    d70e:	2002      	movs	r0, #2
    d710:	4770      	bx	lr
    d712:	b5f0      	push	{r4, r5, r6, r7, lr}
    d714:	7808      	ldrb	r0, [r1, #0]
    d716:	784d      	ldrb	r5, [r1, #1]
    d718:	788c      	ldrb	r4, [r1, #2]
    d71a:	f891 e003 	ldrb.w	lr, [r1, #3]
    d71e:	790f      	ldrb	r7, [r1, #4]
    d720:	794a      	ldrb	r2, [r1, #5]
    d722:	798b      	ldrb	r3, [r1, #6]
    d724:	4e11      	ldr	r6, [pc, #68]	; (d76c <am_hal_adc_configure+0x6c>)
    d726:	0600      	lsls	r0, r0, #24
    d728:	04ed      	lsls	r5, r5, #19
    d72a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d72e:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d732:	4328      	orrs	r0, r5
    d734:	0424      	lsls	r4, r4, #16
    d736:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d73a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d73e:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d742:	4304      	orrs	r4, r0
    d744:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d748:	0139      	lsls	r1, r7, #4
    d74a:	4320      	orrs	r0, r4
    d74c:	f001 0110 	and.w	r1, r1, #16
    d750:	00d2      	lsls	r2, r2, #3
    d752:	4301      	orrs	r1, r0
    d754:	f002 0208 	and.w	r2, r2, #8
    d758:	009b      	lsls	r3, r3, #2
    d75a:	430a      	orrs	r2, r1
    d75c:	f003 0304 	and.w	r3, r3, #4
    d760:	4313      	orrs	r3, r2
    d762:	6033      	str	r3, [r6, #0]
    d764:	2000      	movs	r0, #0
    d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d768:	01afafaf 	.word	0x01afafaf
    d76c:	50010000 	.word	0x50010000

0000d770 <am_hal_adc_configure_slot>:
    d770:	b128      	cbz	r0, d77e <am_hal_adc_configure_slot+0xe>
    d772:	6803      	ldr	r3, [r0, #0]
    d774:	4816      	ldr	r0, [pc, #88]	; (d7d0 <am_hal_adc_configure_slot+0x60>)
    d776:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d77a:	4283      	cmp	r3, r0
    d77c:	d001      	beq.n	d782 <am_hal_adc_configure_slot+0x12>
    d77e:	2002      	movs	r0, #2
    d780:	4770      	bx	lr
    d782:	2907      	cmp	r1, #7
    d784:	d901      	bls.n	d78a <am_hal_adc_configure_slot+0x1a>
    d786:	2005      	movs	r0, #5
    d788:	4770      	bx	lr
    d78a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d78c:	7813      	ldrb	r3, [r2, #0]
    d78e:	7854      	ldrb	r4, [r2, #1]
    d790:	7890      	ldrb	r0, [r2, #2]
    d792:	78d7      	ldrb	r7, [r2, #3]
    d794:	f892 e004 	ldrb.w	lr, [r2, #4]
    d798:	4d0e      	ldr	r5, [pc, #56]	; (d7d4 <am_hal_adc_configure_slot+0x64>)
    d79a:	4e0f      	ldr	r6, [pc, #60]	; (d7d8 <am_hal_adc_configure_slot+0x68>)
    d79c:	061b      	lsls	r3, r3, #24
    d79e:	0424      	lsls	r4, r4, #16
    d7a0:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    d7a4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    d7a8:	4323      	orrs	r3, r4
    d7aa:	0202      	lsls	r2, r0, #8
    d7ac:	ea43 0e0e 	orr.w	lr, r3, lr
    d7b0:	440d      	add	r5, r1
    d7b2:	007b      	lsls	r3, r7, #1
    d7b4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    d7b8:	ea4e 0202 	orr.w	r2, lr, r2
    d7bc:	00ad      	lsls	r5, r5, #2
    d7be:	f003 0302 	and.w	r3, r3, #2
    d7c2:	4313      	orrs	r3, r2
    d7c4:	602b      	str	r3, [r5, #0]
    d7c6:	6833      	ldr	r3, [r6, #0]
    d7c8:	3301      	adds	r3, #1
    d7ca:	6033      	str	r3, [r6, #0]
    d7cc:	2000      	movs	r0, #0
    d7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7d0:	01afafaf 	.word	0x01afafaf
    d7d4:	14004003 	.word	0x14004003
    d7d8:	10007134 	.word	0x10007134

0000d7dc <am_hal_adc_configure_dma>:
    d7dc:	b128      	cbz	r0, d7ea <am_hal_adc_configure_dma+0xe>
    d7de:	6803      	ldr	r3, [r0, #0]
    d7e0:	4a17      	ldr	r2, [pc, #92]	; (d840 <am_hal_adc_configure_dma+0x64>)
    d7e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7e6:	4293      	cmp	r3, r2
    d7e8:	d001      	beq.n	d7ee <am_hal_adc_configure_dma+0x12>
    d7ea:	2002      	movs	r0, #2
    d7ec:	4770      	bx	lr
    d7ee:	b410      	push	{r4}
    d7f0:	7808      	ldrb	r0, [r1, #0]
    d7f2:	784b      	ldrb	r3, [r1, #1]
    d7f4:	4c13      	ldr	r4, [pc, #76]	; (d844 <am_hal_adc_configure_dma+0x68>)
    d7f6:	4a14      	ldr	r2, [pc, #80]	; (d848 <am_hal_adc_configure_dma+0x6c>)
    d7f8:	6824      	ldr	r4, [r4, #0]
    d7fa:	0240      	lsls	r0, r0, #9
    d7fc:	021b      	lsls	r3, r3, #8
    d7fe:	f400 7000 	and.w	r0, r0, #512	; 0x200
    d802:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d806:	4303      	orrs	r3, r0
    d808:	2c01      	cmp	r4, #1
    d80a:	bf8c      	ite	hi
    d80c:	2000      	movhi	r0, #0
    d80e:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    d812:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    d816:	4303      	orrs	r3, r0
    d818:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    d81c:	8888      	ldrh	r0, [r1, #4]
    d81e:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    d822:	f360 0391 	bfi	r3, r0, #2, #16
    d826:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    d82a:	688b      	ldr	r3, [r1, #8]
    d82c:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    d830:	2301      	movs	r3, #1
    d832:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    d836:	2000      	movs	r0, #0
    d838:	f85d 4b04 	ldr.w	r4, [sp], #4
    d83c:	4770      	bx	lr
    d83e:	bf00      	nop
    d840:	01afafaf 	.word	0x01afafaf
    d844:	10007134 	.word	0x10007134
    d848:	50010000 	.word	0x50010000

0000d84c <am_hal_adc_enable>:
    d84c:	4603      	mov	r3, r0
    d84e:	b128      	cbz	r0, d85c <am_hal_adc_enable+0x10>
    d850:	6802      	ldr	r2, [r0, #0]
    d852:	490c      	ldr	r1, [pc, #48]	; (d884 <am_hal_adc_enable+0x38>)
    d854:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d858:	428a      	cmp	r2, r1
    d85a:	d001      	beq.n	d860 <am_hal_adc_enable+0x14>
    d85c:	2002      	movs	r0, #2
    d85e:	4770      	bx	lr
    d860:	78c2      	ldrb	r2, [r0, #3]
    d862:	f002 0202 	and.w	r2, r2, #2
    d866:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d86a:	b94a      	cbnz	r2, d880 <am_hal_adc_enable+0x34>
    d86c:	4906      	ldr	r1, [pc, #24]	; (d888 <am_hal_adc_enable+0x3c>)
    d86e:	680a      	ldr	r2, [r1, #0]
    d870:	f042 0201 	orr.w	r2, r2, #1
    d874:	600a      	str	r2, [r1, #0]
    d876:	78da      	ldrb	r2, [r3, #3]
    d878:	f042 0202 	orr.w	r2, r2, #2
    d87c:	70da      	strb	r2, [r3, #3]
    d87e:	4770      	bx	lr
    d880:	2000      	movs	r0, #0
    d882:	4770      	bx	lr
    d884:	01afafaf 	.word	0x01afafaf
    d888:	50010000 	.word	0x50010000

0000d88c <am_hal_adc_interrupt_enable>:
    d88c:	b128      	cbz	r0, d89a <am_hal_adc_interrupt_enable+0xe>
    d88e:	6803      	ldr	r3, [r0, #0]
    d890:	4a07      	ldr	r2, [pc, #28]	; (d8b0 <am_hal_adc_interrupt_enable+0x24>)
    d892:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d896:	4293      	cmp	r3, r2
    d898:	d001      	beq.n	d89e <am_hal_adc_interrupt_enable+0x12>
    d89a:	2002      	movs	r0, #2
    d89c:	4770      	bx	lr
    d89e:	4b05      	ldr	r3, [pc, #20]	; (d8b4 <am_hal_adc_interrupt_enable+0x28>)
    d8a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d8a4:	4311      	orrs	r1, r2
    d8a6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d8aa:	2000      	movs	r0, #0
    d8ac:	4770      	bx	lr
    d8ae:	bf00      	nop
    d8b0:	01afafaf 	.word	0x01afafaf
    d8b4:	50010000 	.word	0x50010000

0000d8b8 <am_hal_adc_interrupt_status>:
    d8b8:	b128      	cbz	r0, d8c6 <am_hal_adc_interrupt_status+0xe>
    d8ba:	6803      	ldr	r3, [r0, #0]
    d8bc:	480b      	ldr	r0, [pc, #44]	; (d8ec <am_hal_adc_interrupt_status+0x34>)
    d8be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8c2:	4283      	cmp	r3, r0
    d8c4:	d001      	beq.n	d8ca <am_hal_adc_interrupt_status+0x12>
    d8c6:	2002      	movs	r0, #2
    d8c8:	4770      	bx	lr
    d8ca:	b92a      	cbnz	r2, d8d8 <am_hal_adc_interrupt_status+0x20>
    d8cc:	4b08      	ldr	r3, [pc, #32]	; (d8f0 <am_hal_adc_interrupt_status+0x38>)
    d8ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d8d2:	600b      	str	r3, [r1, #0]
    d8d4:	4610      	mov	r0, r2
    d8d6:	4770      	bx	lr
    d8d8:	4a05      	ldr	r2, [pc, #20]	; (d8f0 <am_hal_adc_interrupt_status+0x38>)
    d8da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    d8de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d8e2:	4003      	ands	r3, r0
    d8e4:	600b      	str	r3, [r1, #0]
    d8e6:	2000      	movs	r0, #0
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop
    d8ec:	01afafaf 	.word	0x01afafaf
    d8f0:	50010000 	.word	0x50010000

0000d8f4 <am_hal_adc_interrupt_clear>:
    d8f4:	b128      	cbz	r0, d902 <am_hal_adc_interrupt_clear+0xe>
    d8f6:	6803      	ldr	r3, [r0, #0]
    d8f8:	4a05      	ldr	r2, [pc, #20]	; (d910 <am_hal_adc_interrupt_clear+0x1c>)
    d8fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8fe:	4293      	cmp	r3, r2
    d900:	d001      	beq.n	d906 <am_hal_adc_interrupt_clear+0x12>
    d902:	2002      	movs	r0, #2
    d904:	4770      	bx	lr
    d906:	4b03      	ldr	r3, [pc, #12]	; (d914 <am_hal_adc_interrupt_clear+0x20>)
    d908:	2000      	movs	r0, #0
    d90a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    d90e:	4770      	bx	lr
    d910:	01afafaf 	.word	0x01afafaf
    d914:	50010000 	.word	0x50010000

0000d918 <am_hal_adc_sw_trigger>:
    d918:	b128      	cbz	r0, d926 <am_hal_adc_sw_trigger+0xe>
    d91a:	6803      	ldr	r3, [r0, #0]
    d91c:	4a05      	ldr	r2, [pc, #20]	; (d934 <am_hal_adc_sw_trigger+0x1c>)
    d91e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d922:	4293      	cmp	r3, r2
    d924:	d001      	beq.n	d92a <am_hal_adc_sw_trigger+0x12>
    d926:	2002      	movs	r0, #2
    d928:	4770      	bx	lr
    d92a:	4b03      	ldr	r3, [pc, #12]	; (d938 <am_hal_adc_sw_trigger+0x20>)
    d92c:	2237      	movs	r2, #55	; 0x37
    d92e:	609a      	str	r2, [r3, #8]
    d930:	2000      	movs	r0, #0
    d932:	4770      	bx	lr
    d934:	01afafaf 	.word	0x01afafaf
    d938:	50010000 	.word	0x50010000

0000d93c <am_hal_adc_power_control>:
    d93c:	b140      	cbz	r0, d950 <am_hal_adc_power_control+0x14>
    d93e:	6803      	ldr	r3, [r0, #0]
    d940:	b570      	push	{r4, r5, r6, lr}
    d942:	4c2e      	ldr	r4, [pc, #184]	; (d9fc <am_hal_adc_power_control+0xc0>)
    d944:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d948:	42a3      	cmp	r3, r4
    d94a:	d003      	beq.n	d954 <am_hal_adc_power_control+0x18>
    d94c:	2002      	movs	r0, #2
    d94e:	bd70      	pop	{r4, r5, r6, pc}
    d950:	2002      	movs	r0, #2
    d952:	4770      	bx	lr
    d954:	4604      	mov	r4, r0
    d956:	4615      	mov	r5, r2
    d958:	460e      	mov	r6, r1
    d95a:	b329      	cbz	r1, d9a8 <am_hal_adc_power_control+0x6c>
    d95c:	2902      	cmp	r1, #2
    d95e:	d821      	bhi.n	d9a4 <am_hal_adc_power_control+0x68>
    d960:	b1da      	cbz	r2, d99a <am_hal_adc_power_control+0x5e>
    d962:	4b27      	ldr	r3, [pc, #156]	; (da00 <am_hal_adc_power_control+0xc4>)
    d964:	68da      	ldr	r2, [r3, #12]
    d966:	6142      	str	r2, [r0, #20]
    d968:	691a      	ldr	r2, [r3, #16]
    d96a:	6182      	str	r2, [r0, #24]
    d96c:	695a      	ldr	r2, [r3, #20]
    d96e:	61c2      	str	r2, [r0, #28]
    d970:	699a      	ldr	r2, [r3, #24]
    d972:	6202      	str	r2, [r0, #32]
    d974:	69da      	ldr	r2, [r3, #28]
    d976:	6242      	str	r2, [r0, #36]	; 0x24
    d978:	6a1a      	ldr	r2, [r3, #32]
    d97a:	6282      	str	r2, [r0, #40]	; 0x28
    d97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d97e:	62c2      	str	r2, [r0, #44]	; 0x2c
    d980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d982:	6302      	str	r2, [r0, #48]	; 0x30
    d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d986:	6342      	str	r2, [r0, #52]	; 0x34
    d988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d98a:	6382      	str	r2, [r0, #56]	; 0x38
    d98c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d990:	63c2      	str	r2, [r0, #60]	; 0x3c
    d992:	681b      	ldr	r3, [r3, #0]
    d994:	6103      	str	r3, [r0, #16]
    d996:	2301      	movs	r3, #1
    d998:	7303      	strb	r3, [r0, #12]
    d99a:	200a      	movs	r0, #10
    d99c:	f000 fbe6 	bl	e16c <am_hal_pwrctrl_periph_disable>
    d9a0:	2000      	movs	r0, #0
    d9a2:	bd70      	pop	{r4, r5, r6, pc}
    d9a4:	2006      	movs	r0, #6
    d9a6:	bd70      	pop	{r4, r5, r6, pc}
    d9a8:	b11a      	cbz	r2, d9b2 <am_hal_adc_power_control+0x76>
    d9aa:	7b03      	ldrb	r3, [r0, #12]
    d9ac:	b933      	cbnz	r3, d9bc <am_hal_adc_power_control+0x80>
    d9ae:	2007      	movs	r0, #7
    d9b0:	bd70      	pop	{r4, r5, r6, pc}
    d9b2:	200a      	movs	r0, #10
    d9b4:	f000 fbb0 	bl	e118 <am_hal_pwrctrl_periph_enable>
    d9b8:	4628      	mov	r0, r5
    d9ba:	bd70      	pop	{r4, r5, r6, pc}
    d9bc:	200a      	movs	r0, #10
    d9be:	f000 fbab 	bl	e118 <am_hal_pwrctrl_periph_enable>
    d9c2:	4b0f      	ldr	r3, [pc, #60]	; (da00 <am_hal_adc_power_control+0xc4>)
    d9c4:	6962      	ldr	r2, [r4, #20]
    d9c6:	60da      	str	r2, [r3, #12]
    d9c8:	69a2      	ldr	r2, [r4, #24]
    d9ca:	611a      	str	r2, [r3, #16]
    d9cc:	69e2      	ldr	r2, [r4, #28]
    d9ce:	615a      	str	r2, [r3, #20]
    d9d0:	6a22      	ldr	r2, [r4, #32]
    d9d2:	619a      	str	r2, [r3, #24]
    d9d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d9d6:	61da      	str	r2, [r3, #28]
    d9d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d9da:	621a      	str	r2, [r3, #32]
    d9dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d9de:	625a      	str	r2, [r3, #36]	; 0x24
    d9e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d9e2:	629a      	str	r2, [r3, #40]	; 0x28
    d9e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d9e6:	62da      	str	r2, [r3, #44]	; 0x2c
    d9e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d9ea:	631a      	str	r2, [r3, #48]	; 0x30
    d9ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d9ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    d9f2:	6922      	ldr	r2, [r4, #16]
    d9f4:	601a      	str	r2, [r3, #0]
    d9f6:	4630      	mov	r0, r6
    d9f8:	7326      	strb	r6, [r4, #12]
    d9fa:	bd70      	pop	{r4, r5, r6, pc}
    d9fc:	01afafaf 	.word	0x01afafaf
    da00:	50010000 	.word	0x50010000

0000da04 <am_hal_cachectrl_config>:
    da04:	b530      	push	{r4, r5, lr}
    da06:	b083      	sub	sp, #12
    da08:	4605      	mov	r5, r0
    da0a:	f000 fae7 	bl	dfdc <am_hal_interrupt_master_disable>
    da0e:	4c11      	ldr	r4, [pc, #68]	; (da54 <am_hal_cachectrl_config+0x50>)
    da10:	9001      	str	r0, [sp, #4]
    da12:	6823      	ldr	r3, [r4, #0]
    da14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    da18:	6023      	str	r3, [r4, #0]
    da1a:	9801      	ldr	r0, [sp, #4]
    da1c:	f000 fae2 	bl	dfe4 <am_hal_interrupt_master_set>
    da20:	78eb      	ldrb	r3, [r5, #3]
    da22:	782a      	ldrb	r2, [r5, #0]
    da24:	78a8      	ldrb	r0, [r5, #2]
    da26:	7869      	ldrb	r1, [r5, #1]
    da28:	005b      	lsls	r3, r3, #1
    da2a:	0112      	lsls	r2, r2, #4
    da2c:	b2d2      	uxtb	r2, r2
    da2e:	f003 0302 	and.w	r3, r3, #2
    da32:	4313      	orrs	r3, r2
    da34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    da38:	0080      	lsls	r0, r0, #2
    da3a:	f000 000c 	and.w	r0, r0, #12
    da3e:	020a      	lsls	r2, r1, #8
    da40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    da44:	4303      	orrs	r3, r0
    da46:	f402 7240 	and.w	r2, r2, #768	; 0x300
    da4a:	4313      	orrs	r3, r2
    da4c:	2000      	movs	r0, #0
    da4e:	6023      	str	r3, [r4, #0]
    da50:	b003      	add	sp, #12
    da52:	bd30      	pop	{r4, r5, pc}
    da54:	40018000 	.word	0x40018000

0000da58 <am_hal_cachectrl_enable>:
    da58:	4a03      	ldr	r2, [pc, #12]	; (da68 <am_hal_cachectrl_enable+0x10>)
    da5a:	6813      	ldr	r3, [r2, #0]
    da5c:	f043 0301 	orr.w	r3, r3, #1
    da60:	6013      	str	r3, [r2, #0]
    da62:	2000      	movs	r0, #0
    da64:	4770      	bx	lr
    da66:	bf00      	nop
    da68:	40018000 	.word	0x40018000

0000da6c <am_hal_clkgen_control>:
    da6c:	4b32      	ldr	r3, [pc, #200]	; (db38 <am_hal_clkgen_control+0xcc>)
    da6e:	681a      	ldr	r2, [r3, #0]
    da70:	b912      	cbnz	r2, da78 <am_hal_clkgen_control+0xc>
    da72:	4a32      	ldr	r2, [pc, #200]	; (db3c <am_hal_clkgen_control+0xd0>)
    da74:	6812      	ldr	r2, [r2, #0]
    da76:	601a      	str	r2, [r3, #0]
    da78:	2809      	cmp	r0, #9
    da7a:	d85a      	bhi.n	db32 <am_hal_clkgen_control+0xc6>
    da7c:	e8df f000 	tbb	[pc, r0]
    da80:	261e160d 	.word	0x261e160d
    da84:	4640362e 	.word	0x4640362e
    da88:	054e      	.short	0x054e
    da8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da8e:	2000      	movs	r0, #0
    da90:	6a1a      	ldr	r2, [r3, #32]
    da92:	f36f 0200 	bfc	r2, #0, #1
    da96:	621a      	str	r2, [r3, #32]
    da98:	4770      	bx	lr
    da9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da9e:	2200      	movs	r2, #0
    daa0:	2147      	movs	r1, #71	; 0x47
    daa2:	6159      	str	r1, [r3, #20]
    daa4:	4610      	mov	r0, r2
    daa6:	619a      	str	r2, [r3, #24]
    daa8:	615a      	str	r2, [r3, #20]
    daaa:	4770      	bx	lr
    daac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dab0:	2000      	movs	r0, #0
    dab2:	68d3      	ldr	r3, [r2, #12]
    dab4:	f023 0301 	bic.w	r3, r3, #1
    dab8:	60d3      	str	r3, [r2, #12]
    daba:	4770      	bx	lr
    dabc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dac0:	2000      	movs	r0, #0
    dac2:	68d3      	ldr	r3, [r2, #12]
    dac4:	f023 0302 	bic.w	r3, r3, #2
    dac8:	60d3      	str	r3, [r2, #12]
    daca:	4770      	bx	lr
    dacc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dad0:	2000      	movs	r0, #0
    dad2:	68d3      	ldr	r3, [r2, #12]
    dad4:	f043 0301 	orr.w	r3, r3, #1
    dad8:	60d3      	str	r3, [r2, #12]
    dada:	4770      	bx	lr
    dadc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dae0:	2000      	movs	r0, #0
    dae2:	68d3      	ldr	r3, [r2, #12]
    dae4:	f043 0302 	orr.w	r3, r3, #2
    dae8:	60d3      	str	r3, [r2, #12]
    daea:	4770      	bx	lr
    daec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daf0:	2200      	movs	r2, #0
    daf2:	2047      	movs	r0, #71	; 0x47
    daf4:	2101      	movs	r1, #1
    daf6:	6158      	str	r0, [r3, #20]
    daf8:	6199      	str	r1, [r3, #24]
    dafa:	4610      	mov	r0, r2
    dafc:	615a      	str	r2, [r3, #20]
    dafe:	4770      	bx	lr
    db00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db04:	2000      	movs	r0, #0
    db06:	68da      	ldr	r2, [r3, #12]
    db08:	60da      	str	r2, [r3, #12]
    db0a:	4770      	bx	lr
    db0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db10:	2000      	movs	r0, #0
    db12:	68d3      	ldr	r3, [r2, #12]
    db14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    db18:	60d3      	str	r3, [r2, #12]
    db1a:	4770      	bx	lr
    db1c:	b139      	cbz	r1, db2e <am_hal_clkgen_control+0xc2>
    db1e:	680b      	ldr	r3, [r1, #0]
    db20:	f043 0301 	orr.w	r3, r3, #1
    db24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db28:	2000      	movs	r0, #0
    db2a:	6213      	str	r3, [r2, #32]
    db2c:	4770      	bx	lr
    db2e:	4b04      	ldr	r3, [pc, #16]	; (db40 <am_hal_clkgen_control+0xd4>)
    db30:	e7f8      	b.n	db24 <am_hal_clkgen_control+0xb8>
    db32:	2006      	movs	r0, #6
    db34:	4770      	bx	lr
    db36:	bf00      	nop
    db38:	10001120 	.word	0x10001120
    db3c:	4ffff000 	.word	0x4ffff000
    db40:	0025b801 	.word	0x0025b801

0000db44 <am_hal_clkgen_status_get>:
    db44:	b1a8      	cbz	r0, db72 <am_hal_clkgen_status_get+0x2e>
    db46:	b410      	push	{r4}
    db48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db4c:	490a      	ldr	r1, [pc, #40]	; (db78 <am_hal_clkgen_status_get+0x34>)
    db4e:	6994      	ldr	r4, [r2, #24]
    db50:	4b0a      	ldr	r3, [pc, #40]	; (db7c <am_hal_clkgen_status_get+0x38>)
    db52:	f014 0f01 	tst.w	r4, #1
    db56:	bf08      	it	eq
    db58:	460b      	moveq	r3, r1
    db5a:	6003      	str	r3, [r0, #0]
    db5c:	69d3      	ldr	r3, [r2, #28]
    db5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    db62:	f003 0201 	and.w	r2, r3, #1
    db66:	f3c3 0340 	ubfx	r3, r3, #1, #1
    db6a:	6042      	str	r2, [r0, #4]
    db6c:	7203      	strb	r3, [r0, #8]
    db6e:	2000      	movs	r0, #0
    db70:	4770      	bx	lr
    db72:	2006      	movs	r0, #6
    db74:	4770      	bx	lr
    db76:	bf00      	nop
    db78:	02dc6c00 	.word	0x02dc6c00
    db7c:	016e3600 	.word	0x016e3600

0000db80 <am_hal_ctimer_config_single>:
    db80:	b5f0      	push	{r4, r5, r6, r7, lr}
    db82:	b083      	sub	sp, #12
    db84:	460e      	mov	r6, r1
    db86:	4614      	mov	r4, r2
    db88:	0147      	lsls	r7, r0, #5
    db8a:	4605      	mov	r5, r0
    db8c:	f000 fa26 	bl	dfdc <am_hal_interrupt_master_disable>
    db90:	4a19      	ldr	r2, [pc, #100]	; (dbf8 <am_hal_ctimer_config_single+0x78>)
    db92:	9001      	str	r0, [sp, #4]
    db94:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    db98:	58bb      	ldr	r3, [r7, r2]
    db9a:	d021      	beq.n	dbe0 <am_hal_ctimer_config_single+0x60>
    db9c:	ea23 0306 	bic.w	r3, r3, r6
    dba0:	1c71      	adds	r1, r6, #1
    dba2:	ea43 0304 	orr.w	r3, r3, r4
    dba6:	d00c      	beq.n	dbc2 <am_hal_ctimer_config_single+0x42>
    dba8:	50bb      	str	r3, [r7, r2]
    dbaa:	9801      	ldr	r0, [sp, #4]
    dbac:	f000 fa1a 	bl	dfe4 <am_hal_interrupt_master_set>
    dbb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbb4:	429e      	cmp	r6, r3
    dbb6:	d01c      	beq.n	dbf2 <am_hal_ctimer_config_single+0x72>
    dbb8:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dbbc:	d017      	beq.n	dbee <am_hal_ctimer_config_single+0x6e>
    dbbe:	b003      	add	sp, #12
    dbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dbc6:	50bb      	str	r3, [r7, r2]
    dbc8:	9801      	ldr	r0, [sp, #4]
    dbca:	f000 fa0b 	bl	dfe4 <am_hal_interrupt_master_set>
    dbce:	2200      	movs	r2, #0
    dbd0:	4b0a      	ldr	r3, [pc, #40]	; (dbfc <am_hal_ctimer_config_single+0x7c>)
    dbd2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dbd6:	f3c4 0444 	ubfx	r4, r4, #1, #5
    dbda:	54ac      	strb	r4, [r5, r2]
    dbdc:	b003      	add	sp, #12
    dbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbe0:	0424      	lsls	r4, r4, #16
    dbe2:	b29b      	uxth	r3, r3
    dbe4:	4323      	orrs	r3, r4
    dbe6:	50bb      	str	r3, [r7, r2]
    dbe8:	9801      	ldr	r0, [sp, #4]
    dbea:	f000 f9fb 	bl	dfe4 <am_hal_interrupt_master_set>
    dbee:	2201      	movs	r2, #1
    dbf0:	e7ee      	b.n	dbd0 <am_hal_ctimer_config_single+0x50>
    dbf2:	2200      	movs	r2, #0
    dbf4:	e7ec      	b.n	dbd0 <am_hal_ctimer_config_single+0x50>
    dbf6:	bf00      	nop
    dbf8:	4000800c 	.word	0x4000800c
    dbfc:	10001000 	.word	0x10001000

0000dc00 <am_hal_ctimer_start>:
    dc00:	b570      	push	{r4, r5, r6, lr}
    dc02:	b082      	sub	sp, #8
    dc04:	460c      	mov	r4, r1
    dc06:	0146      	lsls	r6, r0, #5
    dc08:	4605      	mov	r5, r0
    dc0a:	f000 f9e7 	bl	dfdc <am_hal_interrupt_master_disable>
    dc0e:	4a0f      	ldr	r2, [pc, #60]	; (dc4c <am_hal_ctimer_start+0x4c>)
    dc10:	9001      	str	r0, [sp, #4]
    dc12:	58b3      	ldr	r3, [r6, r2]
    dc14:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    dc18:	ea23 0301 	bic.w	r3, r3, r1
    dc1c:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    dc20:	430b      	orrs	r3, r1
    dc22:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dc26:	bf0c      	ite	eq
    dc28:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dc2c:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dc30:	50b3      	str	r3, [r6, r2]
    dc32:	4b07      	ldr	r3, [pc, #28]	; (dc50 <am_hal_ctimer_start+0x50>)
    dc34:	9801      	ldr	r0, [sp, #4]
    dc36:	bf0c      	ite	eq
    dc38:	2101      	moveq	r1, #1
    dc3a:	2100      	movne	r1, #0
    dc3c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    dc40:	545c      	strb	r4, [r3, r1]
    dc42:	f000 f9cf 	bl	dfe4 <am_hal_interrupt_master_set>
    dc46:	b002      	add	sp, #8
    dc48:	bd70      	pop	{r4, r5, r6, pc}
    dc4a:	bf00      	nop
    dc4c:	4000800c 	.word	0x4000800c
    dc50:	10001000 	.word	0x10001000

0000dc54 <am_hal_ctimer_period_set>:
    dc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc58:	b082      	sub	sp, #8
    dc5a:	4689      	mov	r9, r1
    dc5c:	4698      	mov	r8, r3
    dc5e:	0147      	lsls	r7, r0, #5
    dc60:	4614      	mov	r4, r2
    dc62:	f000 f9bb 	bl	dfdc <am_hal_interrupt_master_disable>
    dc66:	f8df a094 	ldr.w	sl, [pc, #148]	; dcfc <am_hal_ctimer_period_set+0xa8>
    dc6a:	9001      	str	r0, [sp, #4]
    dc6c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dc70:	4d20      	ldr	r5, [pc, #128]	; (dcf4 <am_hal_ctimer_period_set+0xa0>)
    dc72:	4e21      	ldr	r6, [pc, #132]	; (dcf8 <am_hal_ctimer_period_set+0xa4>)
    dc74:	f857 300a 	ldr.w	r3, [r7, sl]
    dc78:	d01a      	beq.n	dcb0 <am_hal_ctimer_period_set+0x5c>
    dc7a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dc7e:	2b80      	cmp	r3, #128	; 0x80
    dc80:	d01b      	beq.n	dcba <am_hal_ctimer_period_set+0x66>
    dc82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc86:	2000      	movs	r0, #0
    dc88:	4591      	cmp	r9, r2
    dc8a:	4603      	mov	r3, r0
    dc8c:	d01e      	beq.n	dccc <am_hal_ctimer_period_set+0x78>
    dc8e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dc92:	d025      	beq.n	dce0 <am_hal_ctimer_period_set+0x8c>
    dc94:	0c1b      	lsrs	r3, r3, #16
    dc96:	b2a2      	uxth	r2, r4
    dc98:	041b      	lsls	r3, r3, #16
    dc9a:	4310      	orrs	r0, r2
    dc9c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dca0:	5178      	str	r0, [r7, r5]
    dca2:	51bb      	str	r3, [r7, r6]
    dca4:	9801      	ldr	r0, [sp, #4]
    dca6:	f000 f99d 	bl	dfe4 <am_hal_interrupt_master_set>
    dcaa:	b002      	add	sp, #8
    dcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcb0:	0c1b      	lsrs	r3, r3, #16
    dcb2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dcb6:	2b80      	cmp	r3, #128	; 0x80
    dcb8:	d111      	bne.n	dcde <am_hal_ctimer_period_set+0x8a>
    dcba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dcbe:	4591      	cmp	r9, r2
    dcc0:	ea4f 4004 	mov.w	r0, r4, lsl #16
    dcc4:	4623      	mov	r3, r4
    dcc6:	ebc8 0404 	rsb	r4, r8, r4
    dcca:	d1e0      	bne.n	dc8e <am_hal_ctimer_period_set+0x3a>
    dccc:	b2a3      	uxth	r3, r4
    dcce:	4318      	orrs	r0, r3
    dcd0:	5178      	str	r0, [r7, r5]
    dcd2:	9801      	ldr	r0, [sp, #4]
    dcd4:	f000 f986 	bl	dfe4 <am_hal_interrupt_master_set>
    dcd8:	b002      	add	sp, #8
    dcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcde:	2000      	movs	r0, #0
    dce0:	b2a3      	uxth	r3, r4
    dce2:	4318      	orrs	r0, r3
    dce4:	51b8      	str	r0, [r7, r6]
    dce6:	9801      	ldr	r0, [sp, #4]
    dce8:	f000 f97c 	bl	dfe4 <am_hal_interrupt_master_set>
    dcec:	b002      	add	sp, #8
    dcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcf2:	bf00      	nop
    dcf4:	40008004 	.word	0x40008004
    dcf8:	40008008 	.word	0x40008008
    dcfc:	4000800c 	.word	0x4000800c

0000dd00 <am_hal_ctimer_adc_trigger_enable>:
    dd00:	b500      	push	{lr}
    dd02:	b083      	sub	sp, #12
    dd04:	f000 f96a 	bl	dfdc <am_hal_interrupt_master_disable>
    dd08:	4a05      	ldr	r2, [pc, #20]	; (dd20 <am_hal_ctimer_adc_trigger_enable+0x20>)
    dd0a:	9001      	str	r0, [sp, #4]
    dd0c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    dd0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dd12:	66d3      	str	r3, [r2, #108]	; 0x6c
    dd14:	9801      	ldr	r0, [sp, #4]
    dd16:	f000 f965 	bl	dfe4 <am_hal_interrupt_master_set>
    dd1a:	b003      	add	sp, #12
    dd1c:	f85d fb04 	ldr.w	pc, [sp], #4
    dd20:	40008000 	.word	0x40008000

0000dd24 <am_hal_ctimer_int_enable>:
    dd24:	b510      	push	{r4, lr}
    dd26:	b082      	sub	sp, #8
    dd28:	4604      	mov	r4, r0
    dd2a:	f000 f957 	bl	dfdc <am_hal_interrupt_master_disable>
    dd2e:	4b06      	ldr	r3, [pc, #24]	; (dd48 <am_hal_ctimer_int_enable+0x24>)
    dd30:	9001      	str	r0, [sp, #4]
    dd32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd36:	4314      	orrs	r4, r2
    dd38:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    dd3c:	9801      	ldr	r0, [sp, #4]
    dd3e:	f000 f951 	bl	dfe4 <am_hal_interrupt_master_set>
    dd42:	b002      	add	sp, #8
    dd44:	bd10      	pop	{r4, pc}
    dd46:	bf00      	nop
    dd48:	40008000 	.word	0x40008000

0000dd4c <am_hal_flash_delay>:
    dd4c:	4b00      	ldr	r3, [pc, #0]	; (dd50 <am_hal_flash_delay+0x4>)
    dd4e:	4718      	bx	r3
    dd50:	0800009d 	.word	0x0800009d

0000dd54 <am_hal_gpio_pinconfig>:
    dd54:	2831      	cmp	r0, #49	; 0x31
    dd56:	d901      	bls.n	dd5c <am_hal_gpio_pinconfig+0x8>
    dd58:	2006      	movs	r0, #6
    dd5a:	4770      	bx	lr
    dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd60:	f001 0307 	and.w	r3, r1, #7
    dd64:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    dd68:	b085      	sub	sp, #20
    dd6a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    dd6e:	d014      	beq.n	dd9a <am_hal_gpio_pinconfig+0x46>
    dd70:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dd74:	1db4      	adds	r4, r6, #6
    dd76:	f004 0407 	and.w	r4, r4, #7
    dd7a:	2c03      	cmp	r4, #3
    dd7c:	f042 0201 	orr.w	r2, r2, #1
    dd80:	f200 80ae 	bhi.w	dee0 <am_hal_gpio_pinconfig+0x18c>
    dd84:	4c85      	ldr	r4, [pc, #532]	; (df9c <am_hal_gpio_pinconfig+0x248>)
    dd86:	5c24      	ldrb	r4, [r4, r0]
    dd88:	07e7      	lsls	r7, r4, #31
    dd8a:	d403      	bmi.n	dd94 <am_hal_gpio_pinconfig+0x40>
    dd8c:	4884      	ldr	r0, [pc, #528]	; (dfa0 <am_hal_gpio_pinconfig+0x24c>)
    dd8e:	b005      	add	sp, #20
    dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd94:	3e02      	subs	r6, #2
    dd96:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dd9a:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    dd9e:	2c00      	cmp	r4, #0
    dda0:	f040 8098 	bne.w	ded4 <am_hal_gpio_pinconfig+0x180>
    dda4:	4c7f      	ldr	r4, [pc, #508]	; (dfa4 <am_hal_gpio_pinconfig+0x250>)
    dda6:	4d80      	ldr	r5, [pc, #512]	; (dfa8 <am_hal_gpio_pinconfig+0x254>)
    dda8:	5c24      	ldrb	r4, [r4, r0]
    ddaa:	5c2d      	ldrb	r5, [r5, r0]
    ddac:	411c      	asrs	r4, r3
    ddae:	f014 0f01 	tst.w	r4, #1
    ddb2:	bf0c      	ite	eq
    ddb4:	2400      	moveq	r4, #0
    ddb6:	2402      	movne	r4, #2
    ddb8:	42ab      	cmp	r3, r5
    ddba:	ea42 0204 	orr.w	r2, r2, r4
    ddbe:	f000 809b 	beq.w	def8 <am_hal_gpio_pinconfig+0x1a4>
    ddc2:	f3c1 3341 	ubfx	r3, r1, #13, #2
    ddc6:	105d      	asrs	r5, r3, #1
    ddc8:	f3c1 2681 	ubfx	r6, r1, #10, #2
    ddcc:	00db      	lsls	r3, r3, #3
    ddce:	f3c1 2707 	ubfx	r7, r1, #8, #8
    ddd2:	f003 0408 	and.w	r4, r3, #8
    ddd6:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    ddda:	f007 060c 	and.w	r6, r7, #12
    ddde:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dde2:	2e04      	cmp	r6, #4
    dde4:	ea43 0304 	orr.w	r3, r3, r4
    dde8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    ddec:	462c      	mov	r4, r5
    ddee:	f000 8090 	beq.w	df12 <am_hal_gpio_pinconfig+0x1be>
    ddf2:	4c6e      	ldr	r4, [pc, #440]	; (dfac <am_hal_gpio_pinconfig+0x258>)
    ddf4:	6824      	ldr	r4, [r4, #0]
    ddf6:	ebc4 0901 	rsb	r9, r4, r1
    ddfa:	fab9 f989 	clz	r9, r9
    ddfe:	ea4f 1959 	mov.w	r9, r9, lsr #5
    de02:	f017 0f60 	tst.w	r7, #96	; 0x60
    de06:	bf04      	itt	eq
    de08:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    de0c:	f364 0300 	bfieq	r3, r4, #0, #1
    de10:	0084      	lsls	r4, r0, #2
    de12:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de16:	2902      	cmp	r1, #2
    de18:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    de1c:	d07c      	beq.n	df18 <am_hal_gpio_pinconfig+0x1c4>
    de1e:	f200 8082 	bhi.w	df26 <am_hal_gpio_pinconfig+0x1d2>
    de22:	2901      	cmp	r1, #1
    de24:	bf08      	it	eq
    de26:	f042 0204 	orreq.w	r2, r2, #4
    de2a:	f005 0518 	and.w	r5, r5, #24
    de2e:	f04f 0800 	mov.w	r8, #0
    de32:	f004 041c 	and.w	r4, r4, #28
    de36:	0841      	lsrs	r1, r0, #1
    de38:	f020 0a03 	bic.w	sl, r0, #3
    de3c:	270f      	movs	r7, #15
    de3e:	f021 0103 	bic.w	r1, r1, #3
    de42:	40a7      	lsls	r7, r4
    de44:	26ff      	movs	r6, #255	; 0xff
    de46:	fa03 f404 	lsl.w	r4, r3, r4
    de4a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    de4e:	40ae      	lsls	r6, r5
    de50:	9101      	str	r1, [sp, #4]
    de52:	9300      	str	r3, [sp, #0]
    de54:	4683      	mov	fp, r0
    de56:	fa02 f505 	lsl.w	r5, r2, r5
    de5a:	f000 f8bf 	bl	dfdc <am_hal_interrupt_master_disable>
    de5e:	9b00      	ldr	r3, [sp, #0]
    de60:	9003      	str	r0, [sp, #12]
    de62:	43ff      	mvns	r7, r7
    de64:	43f6      	mvns	r6, r6
    de66:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    de6a:	f8df e160 	ldr.w	lr, [pc, #352]	; dfcc <am_hal_gpio_pinconfig+0x278>
    de6e:	4850      	ldr	r0, [pc, #320]	; (dfb0 <am_hal_gpio_pinconfig+0x25c>)
    de70:	9901      	ldr	r1, [sp, #4]
    de72:	f1b9 0f00 	cmp.w	r9, #0
    de76:	d00b      	beq.n	de90 <am_hal_gpio_pinconfig+0x13c>
    de78:	f00b 021f 	and.w	r2, fp, #31
    de7c:	f04f 0901 	mov.w	r9, #1
    de80:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    de84:	f8df c148 	ldr.w	ip, [pc, #328]	; dfd0 <am_hal_gpio_pinconfig+0x27c>
    de88:	fa09 f202 	lsl.w	r2, r9, r2
    de8c:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    de90:	4a48      	ldr	r2, [pc, #288]	; (dfb4 <am_hal_gpio_pinconfig+0x260>)
    de92:	f04f 0c73 	mov.w	ip, #115	; 0x73
    de96:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    de9a:	f8d3 c000 	ldr.w	ip, [r3]
    de9e:	ea06 0c0c 	and.w	ip, r6, ip
    dea2:	ea4c 0505 	orr.w	r5, ip, r5
    dea6:	601d      	str	r5, [r3, #0]
    dea8:	f851 300e 	ldr.w	r3, [r1, lr]
    deac:	403b      	ands	r3, r7
    deae:	4323      	orrs	r3, r4
    deb0:	f841 300e 	str.w	r3, [r1, lr]
    deb4:	f85a 3000 	ldr.w	r3, [sl, r0]
    deb8:	401e      	ands	r6, r3
    deba:	2400      	movs	r4, #0
    debc:	ea46 0608 	orr.w	r6, r6, r8
    dec0:	f84a 6000 	str.w	r6, [sl, r0]
    dec4:	6614      	str	r4, [r2, #96]	; 0x60
    dec6:	9803      	ldr	r0, [sp, #12]
    dec8:	f000 f88c 	bl	dfe4 <am_hal_interrupt_master_set>
    decc:	4620      	mov	r0, r4
    dece:	b005      	add	sp, #20
    ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ded4:	2c01      	cmp	r4, #1
    ded6:	d015      	beq.n	df04 <am_hal_gpio_pinconfig+0x1b0>
    ded8:	2c02      	cmp	r4, #2
    deda:	d032      	beq.n	df42 <am_hal_gpio_pinconfig+0x1ee>
    dedc:	4836      	ldr	r0, [pc, #216]	; (dfb8 <am_hal_gpio_pinconfig+0x264>)
    dede:	e756      	b.n	dd8e <am_hal_gpio_pinconfig+0x3a>
    dee0:	2dc0      	cmp	r5, #192	; 0xc0
    dee2:	d029      	beq.n	df38 <am_hal_gpio_pinconfig+0x1e4>
    dee4:	2d20      	cmp	r5, #32
    dee6:	f47f af58 	bne.w	dd9a <am_hal_gpio_pinconfig+0x46>
    deea:	4c2c      	ldr	r4, [pc, #176]	; (df9c <am_hal_gpio_pinconfig+0x248>)
    deec:	5c24      	ldrb	r4, [r4, r0]
    deee:	f014 0f09 	tst.w	r4, #9
    def2:	f47f af4b 	bne.w	dd8c <am_hal_gpio_pinconfig+0x38>
    def6:	e750      	b.n	dd9a <am_hal_gpio_pinconfig+0x46>
    def8:	f3c1 4402 	ubfx	r4, r1, #16, #3
    defc:	2c07      	cmp	r4, #7
    defe:	d127      	bne.n	df50 <am_hal_gpio_pinconfig+0x1fc>
    df00:	482e      	ldr	r0, [pc, #184]	; (dfbc <am_hal_gpio_pinconfig+0x268>)
    df02:	e744      	b.n	dd8e <am_hal_gpio_pinconfig+0x3a>
    df04:	4c25      	ldr	r4, [pc, #148]	; (df9c <am_hal_gpio_pinconfig+0x248>)
    df06:	5c24      	ldrb	r4, [r4, r0]
    df08:	07a5      	lsls	r5, r4, #30
    df0a:	d5e7      	bpl.n	dedc <am_hal_gpio_pinconfig+0x188>
    df0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    df10:	e748      	b.n	dda4 <am_hal_gpio_pinconfig+0x50>
    df12:	f04f 0901 	mov.w	r9, #1
    df16:	e774      	b.n	de02 <am_hal_gpio_pinconfig+0xae>
    df18:	f005 0518 	and.w	r5, r5, #24
    df1c:	f04f 0801 	mov.w	r8, #1
    df20:	fa08 f805 	lsl.w	r8, r8, r5
    df24:	e785      	b.n	de32 <am_hal_gpio_pinconfig+0xde>
    df26:	f005 0518 	and.w	r5, r5, #24
    df2a:	f04f 0801 	mov.w	r8, #1
    df2e:	f042 0204 	orr.w	r2, r2, #4
    df32:	fa08 f805 	lsl.w	r8, r8, r5
    df36:	e77c      	b.n	de32 <am_hal_gpio_pinconfig+0xde>
    df38:	2814      	cmp	r0, #20
    df3a:	f43f af2e 	beq.w	dd9a <am_hal_gpio_pinconfig+0x46>
    df3e:	4820      	ldr	r0, [pc, #128]	; (dfc0 <am_hal_gpio_pinconfig+0x26c>)
    df40:	e725      	b.n	dd8e <am_hal_gpio_pinconfig+0x3a>
    df42:	4c16      	ldr	r4, [pc, #88]	; (df9c <am_hal_gpio_pinconfig+0x248>)
    df44:	5c24      	ldrb	r4, [r4, r0]
    df46:	0764      	lsls	r4, r4, #29
    df48:	d5c8      	bpl.n	dedc <am_hal_gpio_pinconfig+0x188>
    df4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    df4e:	e729      	b.n	dda4 <am_hal_gpio_pinconfig+0x50>
    df50:	4d1c      	ldr	r5, [pc, #112]	; (dfc4 <am_hal_gpio_pinconfig+0x270>)
    df52:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    df56:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    df5a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    df5e:	429e      	cmp	r6, r3
    df60:	d00c      	beq.n	df7c <am_hal_gpio_pinconfig+0x228>
    df62:	0084      	lsls	r4, r0, #2
    df64:	4425      	add	r5, r4
    df66:	786e      	ldrb	r6, [r5, #1]
    df68:	429e      	cmp	r6, r3
    df6a:	d013      	beq.n	df94 <am_hal_gpio_pinconfig+0x240>
    df6c:	78ae      	ldrb	r6, [r5, #2]
    df6e:	429e      	cmp	r6, r3
    df70:	d00e      	beq.n	df90 <am_hal_gpio_pinconfig+0x23c>
    df72:	78ed      	ldrb	r5, [r5, #3]
    df74:	429d      	cmp	r5, r3
    df76:	d00f      	beq.n	df98 <am_hal_gpio_pinconfig+0x244>
    df78:	4813      	ldr	r0, [pc, #76]	; (dfc8 <am_hal_gpio_pinconfig+0x274>)
    df7a:	e708      	b.n	dd8e <am_hal_gpio_pinconfig+0x3a>
    df7c:	2300      	movs	r3, #0
    df7e:	0084      	lsls	r4, r0, #2
    df80:	005b      	lsls	r3, r3, #1
    df82:	f3c1 5540 	ubfx	r5, r1, #21, #1
    df86:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    df8a:	f04f 0900 	mov.w	r9, #0
    df8e:	e740      	b.n	de12 <am_hal_gpio_pinconfig+0xbe>
    df90:	2302      	movs	r3, #2
    df92:	e7f5      	b.n	df80 <am_hal_gpio_pinconfig+0x22c>
    df94:	2301      	movs	r3, #1
    df96:	e7f3      	b.n	df80 <am_hal_gpio_pinconfig+0x22c>
    df98:	2303      	movs	r3, #3
    df9a:	e7f1      	b.n	df80 <am_hal_gpio_pinconfig+0x22c>
    df9c:	0000ef14 	.word	0x0000ef14
    dfa0:	08000100 	.word	0x08000100
    dfa4:	0000f010 	.word	0x0000f010
    dfa8:	0000f048 	.word	0x0000f048
    dfac:	0000f044 	.word	0x0000f044
    dfb0:	400100e0 	.word	0x400100e0
    dfb4:	40010000 	.word	0x40010000
    dfb8:	08000102 	.word	0x08000102
    dfbc:	08000103 	.word	0x08000103
    dfc0:	08000101 	.word	0x08000101
    dfc4:	0000ef48 	.word	0x0000ef48
    dfc8:	08000104 	.word	0x08000104
    dfcc:	40010040 	.word	0x40010040
    dfd0:	400100b4 	.word	0x400100b4

0000dfd4 <am_hal_interrupt_master_enable>:
    dfd4:	f3ef 8010 	mrs	r0, PRIMASK
    dfd8:	b662      	cpsie	i
    dfda:	4770      	bx	lr

0000dfdc <am_hal_interrupt_master_disable>:
    dfdc:	f3ef 8010 	mrs	r0, PRIMASK
    dfe0:	b672      	cpsid	i
    dfe2:	4770      	bx	lr

0000dfe4 <am_hal_interrupt_master_set>:
    dfe4:	f380 8810 	msr	PRIMASK, r0
    dfe8:	4770      	bx	lr
    dfea:	bf00      	nop

0000dfec <am_hal_mcuctrl_info_get>:
    dfec:	b4f0      	push	{r4, r5, r6, r7}
    dfee:	b121      	cbz	r1, dffa <am_hal_mcuctrl_info_get+0xe>
    dff0:	2801      	cmp	r0, #1
    dff2:	d038      	beq.n	e066 <am_hal_mcuctrl_info_get+0x7a>
    dff4:	d320      	bcc.n	e038 <am_hal_mcuctrl_info_get+0x4c>
    dff6:	2802      	cmp	r0, #2
    dff8:	d002      	beq.n	e000 <am_hal_mcuctrl_info_get+0x14>
    dffa:	2006      	movs	r0, #6
    dffc:	bcf0      	pop	{r4, r5, r6, r7}
    dffe:	4770      	bx	lr
    e000:	4a41      	ldr	r2, [pc, #260]	; (e108 <am_hal_mcuctrl_info_get+0x11c>)
    e002:	684d      	ldr	r5, [r1, #4]
    e004:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e008:	694c      	ldr	r4, [r1, #20]
    e00a:	f003 0601 	and.w	r6, r3, #1
    e00e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e012:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e016:	700e      	strb	r6, [r1, #0]
    e018:	7208      	strb	r0, [r1, #8]
    e01a:	740b      	strb	r3, [r1, #16]
    e01c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e020:	60cb      	str	r3, [r1, #12]
    e022:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e026:	4328      	orrs	r0, r5
    e028:	6048      	str	r0, [r1, #4]
    e02a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e02e:	4323      	orrs	r3, r4
    e030:	2000      	movs	r0, #0
    e032:	614b      	str	r3, [r1, #20]
    e034:	bcf0      	pop	{r4, r5, r6, r7}
    e036:	4770      	bx	lr
    e038:	4a33      	ldr	r2, [pc, #204]	; (e108 <am_hal_mcuctrl_info_get+0x11c>)
    e03a:	6993      	ldr	r3, [r2, #24]
    e03c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e040:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e044:	7008      	strb	r0, [r1, #0]
    e046:	704b      	strb	r3, [r1, #1]
    e048:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e04c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e050:	710b      	strb	r3, [r1, #4]
    e052:	6953      	ldr	r3, [r2, #20]
    e054:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e058:	f003 0301 	and.w	r3, r3, #1
    e05c:	2000      	movs	r0, #0
    e05e:	708a      	strb	r2, [r1, #2]
    e060:	70cb      	strb	r3, [r1, #3]
    e062:	bcf0      	pop	{r4, r5, r6, r7}
    e064:	4770      	bx	lr
    e066:	4b28      	ldr	r3, [pc, #160]	; (e108 <am_hal_mcuctrl_info_get+0x11c>)
    e068:	4c28      	ldr	r4, [pc, #160]	; (e10c <am_hal_mcuctrl_info_get+0x120>)
    e06a:	681a      	ldr	r2, [r3, #0]
    e06c:	600a      	str	r2, [r1, #0]
    e06e:	6858      	ldr	r0, [r3, #4]
    e070:	6048      	str	r0, [r1, #4]
    e072:	6898      	ldr	r0, [r3, #8]
    e074:	6088      	str	r0, [r1, #8]
    e076:	68d8      	ldr	r0, [r3, #12]
    e078:	60c8      	str	r0, [r1, #12]
    e07a:	691d      	ldr	r5, [r3, #16]
    e07c:	4824      	ldr	r0, [pc, #144]	; (e110 <am_hal_mcuctrl_info_get+0x124>)
    e07e:	610d      	str	r5, [r1, #16]
    e080:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e084:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e088:	695d      	ldr	r5, [r3, #20]
    e08a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e08e:	4b21      	ldr	r3, [pc, #132]	; (e114 <am_hal_mcuctrl_info_get+0x128>)
    e090:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e094:	6208      	str	r0, [r1, #32]
    e096:	f002 0201 	and.w	r2, r2, #1
    e09a:	614d      	str	r5, [r1, #20]
    e09c:	61cc      	str	r4, [r1, #28]
    e09e:	618a      	str	r2, [r1, #24]
    e0a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e0a4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e0a8:	b2d0      	uxtb	r0, r2
    e0aa:	f004 020f 	and.w	r2, r4, #15
    e0ae:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e0b2:	624a      	str	r2, [r1, #36]	; 0x24
    e0b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e0b8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e0bc:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e0c0:	f004 020f 	and.w	r2, r4, #15
    e0c4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e0c8:	628a      	str	r2, [r1, #40]	; 0x28
    e0ca:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e0ce:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e0d2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e0d6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e0da:	4302      	orrs	r2, r0
    e0dc:	62ca      	str	r2, [r1, #44]	; 0x2c
    e0de:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e0e2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e0e6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e0ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e0ee:	b2c0      	uxtb	r0, r0
    e0f0:	0400      	lsls	r0, r0, #16
    e0f2:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e0f6:	b2d2      	uxtb	r2, r2
    e0f8:	431a      	orrs	r2, r3
    e0fa:	b2e3      	uxtb	r3, r4
    e0fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e100:	630b      	str	r3, [r1, #48]	; 0x30
    e102:	2000      	movs	r0, #0
    e104:	bcf0      	pop	{r4, r5, r6, r7}
    e106:	4770      	bx	lr
    e108:	40020000 	.word	0x40020000
    e10c:	0000f07c 	.word	0x0000f07c
    e110:	0000f0bc 	.word	0x0000f0bc
    e114:	f0000f00 	.word	0xf0000f00

0000e118 <am_hal_pwrctrl_periph_enable>:
    e118:	b570      	push	{r4, r5, r6, lr}
    e11a:	b082      	sub	sp, #8
    e11c:	4604      	mov	r4, r0
    e11e:	f7ff ff5d 	bl	dfdc <am_hal_interrupt_master_disable>
    e122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e126:	4d0f      	ldr	r5, [pc, #60]	; (e164 <am_hal_pwrctrl_periph_enable+0x4c>)
    e128:	4e0f      	ldr	r6, [pc, #60]	; (e168 <am_hal_pwrctrl_periph_enable+0x50>)
    e12a:	9001      	str	r0, [sp, #4]
    e12c:	00a4      	lsls	r4, r4, #2
    e12e:	68aa      	ldr	r2, [r5, #8]
    e130:	5933      	ldr	r3, [r6, r4]
    e132:	4313      	orrs	r3, r2
    e134:	60ab      	str	r3, [r5, #8]
    e136:	9801      	ldr	r0, [sp, #4]
    e138:	4434      	add	r4, r6
    e13a:	f7ff ff53 	bl	dfe4 <am_hal_interrupt_master_set>
    e13e:	2077      	movs	r0, #119	; 0x77
    e140:	f7ff fe04 	bl	dd4c <am_hal_flash_delay>
    e144:	69ab      	ldr	r3, [r5, #24]
    e146:	6864      	ldr	r4, [r4, #4]
    e148:	4223      	tst	r3, r4
    e14a:	d103      	bne.n	e154 <am_hal_pwrctrl_periph_enable+0x3c>
    e14c:	2077      	movs	r0, #119	; 0x77
    e14e:	f7ff fdfd 	bl	dd4c <am_hal_flash_delay>
    e152:	69ab      	ldr	r3, [r5, #24]
    e154:	4b03      	ldr	r3, [pc, #12]	; (e164 <am_hal_pwrctrl_periph_enable+0x4c>)
    e156:	699b      	ldr	r3, [r3, #24]
    e158:	4223      	tst	r3, r4
    e15a:	bf0c      	ite	eq
    e15c:	2001      	moveq	r0, #1
    e15e:	2000      	movne	r0, #0
    e160:	b002      	add	sp, #8
    e162:	bd70      	pop	{r4, r5, r6, pc}
    e164:	40021000 	.word	0x40021000
    e168:	0000f0fc 	.word	0x0000f0fc

0000e16c <am_hal_pwrctrl_periph_disable>:
    e16c:	b570      	push	{r4, r5, r6, lr}
    e16e:	b082      	sub	sp, #8
    e170:	4604      	mov	r4, r0
    e172:	f7ff ff33 	bl	dfdc <am_hal_interrupt_master_disable>
    e176:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e17a:	4d10      	ldr	r5, [pc, #64]	; (e1bc <am_hal_pwrctrl_periph_disable+0x50>)
    e17c:	4e10      	ldr	r6, [pc, #64]	; (e1c0 <am_hal_pwrctrl_periph_disable+0x54>)
    e17e:	9001      	str	r0, [sp, #4]
    e180:	00a4      	lsls	r4, r4, #2
    e182:	68ab      	ldr	r3, [r5, #8]
    e184:	5932      	ldr	r2, [r6, r4]
    e186:	ea23 0302 	bic.w	r3, r3, r2
    e18a:	60ab      	str	r3, [r5, #8]
    e18c:	9801      	ldr	r0, [sp, #4]
    e18e:	4434      	add	r4, r6
    e190:	f7ff ff28 	bl	dfe4 <am_hal_interrupt_master_set>
    e194:	2077      	movs	r0, #119	; 0x77
    e196:	f7ff fdd9 	bl	dd4c <am_hal_flash_delay>
    e19a:	69ab      	ldr	r3, [r5, #24]
    e19c:	6864      	ldr	r4, [r4, #4]
    e19e:	4223      	tst	r3, r4
    e1a0:	d003      	beq.n	e1aa <am_hal_pwrctrl_periph_disable+0x3e>
    e1a2:	2077      	movs	r0, #119	; 0x77
    e1a4:	f7ff fdd2 	bl	dd4c <am_hal_flash_delay>
    e1a8:	69ab      	ldr	r3, [r5, #24]
    e1aa:	4b04      	ldr	r3, [pc, #16]	; (e1bc <am_hal_pwrctrl_periph_disable+0x50>)
    e1ac:	699b      	ldr	r3, [r3, #24]
    e1ae:	4223      	tst	r3, r4
    e1b0:	bf14      	ite	ne
    e1b2:	2001      	movne	r0, #1
    e1b4:	2000      	moveq	r0, #0
    e1b6:	b002      	add	sp, #8
    e1b8:	bd70      	pop	{r4, r5, r6, pc}
    e1ba:	bf00      	nop
    e1bc:	40021000 	.word	0x40021000
    e1c0:	0000f0fc 	.word	0x0000f0fc

0000e1c4 <am_hal_pwrctrl_memory_enable>:
    e1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e1c8:	ea4f 0880 	mov.w	r8, r0, lsl #2
    e1cc:	eb08 0300 	add.w	r3, r8, r0
    e1d0:	009b      	lsls	r3, r3, #2
    e1d2:	4d1e      	ldr	r5, [pc, #120]	; (e24c <am_hal_pwrctrl_memory_enable+0x88>)
    e1d4:	58ee      	ldr	r6, [r5, r3]
    e1d6:	18ea      	adds	r2, r5, r3
    e1d8:	43f1      	mvns	r1, r6
    e1da:	4604      	mov	r4, r0
    e1dc:	6917      	ldr	r7, [r2, #16]
    e1de:	d126      	bne.n	e22e <am_hal_pwrctrl_memory_enable+0x6a>
    e1e0:	b95e      	cbnz	r6, e1fa <am_hal_pwrctrl_memory_enable+0x36>
    e1e2:	4444      	add	r4, r8
    e1e4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e1e8:	6868      	ldr	r0, [r5, #4]
    e1ea:	4b19      	ldr	r3, [pc, #100]	; (e250 <am_hal_pwrctrl_memory_enable+0x8c>)
    e1ec:	695b      	ldr	r3, [r3, #20]
    e1ee:	403b      	ands	r3, r7
    e1f0:	1a18      	subs	r0, r3, r0
    e1f2:	bf18      	it	ne
    e1f4:	2001      	movne	r0, #1
    e1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e1fa:	f8df 9054 	ldr.w	r9, [pc, #84]	; e250 <am_hal_pwrctrl_memory_enable+0x8c>
    e1fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
    e202:	4444      	add	r4, r8
    e204:	431e      	orrs	r6, r3
    e206:	2077      	movs	r0, #119	; 0x77
    e208:	f8c9 6010 	str.w	r6, [r9, #16]
    e20c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e210:	f7ff fd9c 	bl	dd4c <am_hal_flash_delay>
    e214:	f8d9 0014 	ldr.w	r0, [r9, #20]
    e218:	686c      	ldr	r4, [r5, #4]
    e21a:	4038      	ands	r0, r7
    e21c:	42a0      	cmp	r0, r4
    e21e:	d0e4      	beq.n	e1ea <am_hal_pwrctrl_memory_enable+0x26>
    e220:	2077      	movs	r0, #119	; 0x77
    e222:	f7ff fd93 	bl	dd4c <am_hal_flash_delay>
    e226:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e22a:	4620      	mov	r0, r4
    e22c:	e7dd      	b.n	e1ea <am_hal_pwrctrl_memory_enable+0x26>
    e22e:	68d3      	ldr	r3, [r2, #12]
    e230:	4807      	ldr	r0, [pc, #28]	; (e250 <am_hal_pwrctrl_memory_enable+0x8c>)
    e232:	400b      	ands	r3, r1
    e234:	43db      	mvns	r3, r3
    e236:	6902      	ldr	r2, [r0, #16]
    e238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e23c:	f043 0301 	orr.w	r3, r3, #1
    e240:	4013      	ands	r3, r2
    e242:	6103      	str	r3, [r0, #16]
    e244:	2001      	movs	r0, #1
    e246:	f7ff fd81 	bl	dd4c <am_hal_flash_delay>
    e24a:	e7c9      	b.n	e1e0 <am_hal_pwrctrl_memory_enable+0x1c>
    e24c:	0000f1b0 	.word	0x0000f1b0
    e250:	40021000 	.word	0x40021000

0000e254 <am_hal_sysctrl_sleep>:
    e254:	b510      	push	{r4, lr}
    e256:	b082      	sub	sp, #8
    e258:	4604      	mov	r4, r0
    e25a:	f7ff febf 	bl	dfdc <am_hal_interrupt_master_disable>
    e25e:	4a0f      	ldr	r2, [pc, #60]	; (e29c <am_hal_sysctrl_sleep+0x48>)
    e260:	9001      	str	r0, [sp, #4]
    e262:	b124      	cbz	r4, e26e <am_hal_sysctrl_sleep+0x1a>
    e264:	4b0e      	ldr	r3, [pc, #56]	; (e2a0 <am_hal_sysctrl_sleep+0x4c>)
    e266:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e26a:	07db      	lsls	r3, r3, #31
    e26c:	d511      	bpl.n	e292 <am_hal_sysctrl_sleep+0x3e>
    e26e:	6913      	ldr	r3, [r2, #16]
    e270:	f023 0304 	bic.w	r3, r3, #4
    e274:	6113      	str	r3, [r2, #16]
    e276:	f3bf 8f4f 	dsb	sy
    e27a:	4a0a      	ldr	r2, [pc, #40]	; (e2a4 <am_hal_sysctrl_sleep+0x50>)
    e27c:	4b0a      	ldr	r3, [pc, #40]	; (e2a8 <am_hal_sysctrl_sleep+0x54>)
    e27e:	6812      	ldr	r2, [r2, #0]
    e280:	601a      	str	r2, [r3, #0]
    e282:	bf30      	wfi
    e284:	f3bf 8f6f 	isb	sy
    e288:	9801      	ldr	r0, [sp, #4]
    e28a:	f7ff feab 	bl	dfe4 <am_hal_interrupt_master_set>
    e28e:	b002      	add	sp, #8
    e290:	bd10      	pop	{r4, pc}
    e292:	6913      	ldr	r3, [r2, #16]
    e294:	f043 0304 	orr.w	r3, r3, #4
    e298:	6113      	str	r3, [r2, #16]
    e29a:	e7ec      	b.n	e276 <am_hal_sysctrl_sleep+0x22>
    e29c:	e000ed00 	.word	0xe000ed00
    e2a0:	40020000 	.word	0x40020000
    e2a4:	5fff0000 	.word	0x5fff0000
    e2a8:	10001124 	.word	0x10001124

0000e2ac <am_hal_uart_initialize>:
    e2ac:	2801      	cmp	r0, #1
    e2ae:	d901      	bls.n	e2b4 <am_hal_uart_initialize+0x8>
    e2b0:	2005      	movs	r0, #5
    e2b2:	4770      	bx	lr
    e2b4:	b169      	cbz	r1, e2d2 <am_hal_uart_initialize+0x26>
    e2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2b8:	2264      	movs	r2, #100	; 0x64
    e2ba:	4e0e      	ldr	r6, [pc, #56]	; (e2f4 <am_hal_uart_initialize+0x48>)
    e2bc:	fb02 f200 	mul.w	r2, r2, r0
    e2c0:	18b4      	adds	r4, r6, r2
    e2c2:	4603      	mov	r3, r0
    e2c4:	78e0      	ldrb	r0, [r4, #3]
    e2c6:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e2ca:	b2fd      	uxtb	r5, r7
    e2cc:	b11d      	cbz	r5, e2d6 <am_hal_uart_initialize+0x2a>
    e2ce:	2007      	movs	r0, #7
    e2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2d2:	2006      	movs	r0, #6
    e2d4:	4770      	bx	lr
    e2d6:	f040 0001 	orr.w	r0, r0, #1
    e2da:	70e0      	strb	r0, [r4, #3]
    e2dc:	58b0      	ldr	r0, [r6, r2]
    e2de:	f8df e018 	ldr.w	lr, [pc, #24]	; e2f8 <am_hal_uart_initialize+0x4c>
    e2e2:	f36e 0017 	bfi	r0, lr, #0, #24
    e2e6:	50b0      	str	r0, [r6, r2]
    e2e8:	6263      	str	r3, [r4, #36]	; 0x24
    e2ea:	7127      	strb	r7, [r4, #4]
    e2ec:	6625      	str	r5, [r4, #96]	; 0x60
    e2ee:	4628      	mov	r0, r5
    e2f0:	600c      	str	r4, [r1, #0]
    e2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2f4:	10007178 	.word	0x10007178
    e2f8:	00ea9e06 	.word	0x00ea9e06

0000e2fc <am_hal_uart_power_control>:
    e2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e300:	6804      	ldr	r4, [r0, #0]
    e302:	4b36      	ldr	r3, [pc, #216]	; (e3dc <am_hal_uart_power_control+0xe0>)
    e304:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e308:	429c      	cmp	r4, r3
    e30a:	b083      	sub	sp, #12
    e30c:	d003      	beq.n	e316 <am_hal_uart_power_control+0x1a>
    e30e:	2002      	movs	r0, #2
    e310:	b003      	add	sp, #12
    e312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e316:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e318:	4605      	mov	r5, r0
    e31a:	f107 0008 	add.w	r0, r7, #8
    e31e:	4691      	mov	r9, r2
    e320:	460e      	mov	r6, r1
    e322:	fa5f f880 	uxtb.w	r8, r0
    e326:	b181      	cbz	r1, e34a <am_hal_uart_power_control+0x4e>
    e328:	2902      	cmp	r1, #2
    e32a:	d80c      	bhi.n	e346 <am_hal_uart_power_control+0x4a>
    e32c:	b992      	cbnz	r2, e354 <am_hal_uart_power_control+0x58>
    e32e:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e332:	371c      	adds	r7, #28
    e334:	033f      	lsls	r7, r7, #12
    e336:	f04f 33ff 	mov.w	r3, #4294967295
    e33a:	647b      	str	r3, [r7, #68]	; 0x44
    e33c:	4640      	mov	r0, r8
    e33e:	f7ff ff15 	bl	e16c <am_hal_pwrctrl_periph_disable>
    e342:	2000      	movs	r0, #0
    e344:	e7e4      	b.n	e310 <am_hal_uart_power_control+0x14>
    e346:	2006      	movs	r0, #6
    e348:	e7e2      	b.n	e310 <am_hal_uart_power_control+0x14>
    e34a:	b322      	cbz	r2, e396 <am_hal_uart_power_control+0x9a>
    e34c:	792b      	ldrb	r3, [r5, #4]
    e34e:	bb3b      	cbnz	r3, e3a0 <am_hal_uart_power_control+0xa4>
    e350:	2007      	movs	r0, #7
    e352:	e7dd      	b.n	e310 <am_hal_uart_power_control+0x14>
    e354:	f7ff fe42 	bl	dfdc <am_hal_interrupt_master_disable>
    e358:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e35c:	331c      	adds	r3, #28
    e35e:	031b      	lsls	r3, r3, #12
    e360:	9001      	str	r0, [sp, #4]
    e362:	6a1a      	ldr	r2, [r3, #32]
    e364:	60aa      	str	r2, [r5, #8]
    e366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e368:	60ea      	str	r2, [r5, #12]
    e36a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e36c:	612a      	str	r2, [r5, #16]
    e36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e370:	616a      	str	r2, [r5, #20]
    e372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e374:	61aa      	str	r2, [r5, #24]
    e376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e378:	61ea      	str	r2, [r5, #28]
    e37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e37c:	622b      	str	r3, [r5, #32]
    e37e:	2301      	movs	r3, #1
    e380:	712b      	strb	r3, [r5, #4]
    e382:	9801      	ldr	r0, [sp, #4]
    e384:	f7ff fe2e 	bl	dfe4 <am_hal_interrupt_master_set>
    e388:	682b      	ldr	r3, [r5, #0]
    e38a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e38e:	42a3      	cmp	r3, r4
    e390:	d1d4      	bne.n	e33c <am_hal_uart_power_control+0x40>
    e392:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e394:	e7cb      	b.n	e32e <am_hal_uart_power_control+0x32>
    e396:	4640      	mov	r0, r8
    e398:	f7ff febe 	bl	e118 <am_hal_pwrctrl_periph_enable>
    e39c:	4648      	mov	r0, r9
    e39e:	e7b7      	b.n	e310 <am_hal_uart_power_control+0x14>
    e3a0:	4640      	mov	r0, r8
    e3a2:	f7ff feb9 	bl	e118 <am_hal_pwrctrl_periph_enable>
    e3a6:	f7ff fe19 	bl	dfdc <am_hal_interrupt_master_disable>
    e3aa:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e3ae:	331c      	adds	r3, #28
    e3b0:	031b      	lsls	r3, r3, #12
    e3b2:	68aa      	ldr	r2, [r5, #8]
    e3b4:	9000      	str	r0, [sp, #0]
    e3b6:	621a      	str	r2, [r3, #32]
    e3b8:	68ea      	ldr	r2, [r5, #12]
    e3ba:	625a      	str	r2, [r3, #36]	; 0x24
    e3bc:	692a      	ldr	r2, [r5, #16]
    e3be:	629a      	str	r2, [r3, #40]	; 0x28
    e3c0:	696a      	ldr	r2, [r5, #20]
    e3c2:	62da      	str	r2, [r3, #44]	; 0x2c
    e3c4:	69aa      	ldr	r2, [r5, #24]
    e3c6:	631a      	str	r2, [r3, #48]	; 0x30
    e3c8:	69ea      	ldr	r2, [r5, #28]
    e3ca:	635a      	str	r2, [r3, #52]	; 0x34
    e3cc:	6a2a      	ldr	r2, [r5, #32]
    e3ce:	639a      	str	r2, [r3, #56]	; 0x38
    e3d0:	9800      	ldr	r0, [sp, #0]
    e3d2:	712e      	strb	r6, [r5, #4]
    e3d4:	f7ff fe06 	bl	dfe4 <am_hal_interrupt_master_set>
    e3d8:	4630      	mov	r0, r6
    e3da:	e799      	b.n	e310 <am_hal_uart_power_control+0x14>
    e3dc:	01ea9e06 	.word	0x01ea9e06

0000e3e0 <am_hal_uart_configure>:
    e3e0:	6803      	ldr	r3, [r0, #0]
    e3e2:	4a7a      	ldr	r2, [pc, #488]	; (e5cc <am_hal_uart_configure+0x1ec>)
    e3e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3e8:	4293      	cmp	r3, r2
    e3ea:	d001      	beq.n	e3f0 <am_hal_uart_configure+0x10>
    e3ec:	2002      	movs	r0, #2
    e3ee:	4770      	bx	lr
    e3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e3f6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e3fa:	351c      	adds	r5, #28
    e3fc:	032d      	lsls	r5, r5, #12
    e3fe:	2700      	movs	r7, #0
    e400:	b084      	sub	sp, #16
    e402:	632f      	str	r7, [r5, #48]	; 0x30
    e404:	460e      	mov	r6, r1
    e406:	4604      	mov	r4, r0
    e408:	f7ff fde8 	bl	dfdc <am_hal_interrupt_master_disable>
    e40c:	9001      	str	r0, [sp, #4]
    e40e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e410:	f043 0308 	orr.w	r3, r3, #8
    e414:	862b      	strh	r3, [r5, #48]	; 0x30
    e416:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e418:	2201      	movs	r2, #1
    e41a:	f362 1306 	bfi	r3, r2, #4, #3
    e41e:	862b      	strh	r3, [r5, #48]	; 0x30
    e420:	9801      	ldr	r0, [sp, #4]
    e422:	f7ff fddf 	bl	dfe4 <am_hal_interrupt_master_set>
    e426:	f7ff fdd9 	bl	dfdc <am_hal_interrupt_master_disable>
    e42a:	9002      	str	r0, [sp, #8]
    e42c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e42e:	f367 0300 	bfi	r3, r7, #0, #1
    e432:	862b      	strh	r3, [r5, #48]	; 0x30
    e434:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e436:	f367 2349 	bfi	r3, r7, #9, #1
    e43a:	862b      	strh	r3, [r5, #48]	; 0x30
    e43c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e43e:	f367 2308 	bfi	r3, r7, #8, #1
    e442:	862b      	strh	r3, [r5, #48]	; 0x30
    e444:	9802      	ldr	r0, [sp, #8]
    e446:	f7ff fdcd 	bl	dfe4 <am_hal_interrupt_master_set>
    e44a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e44c:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e450:	3b01      	subs	r3, #1
    e452:	2b03      	cmp	r3, #3
    e454:	d854      	bhi.n	e500 <am_hal_uart_configure+0x120>
    e456:	e8df f003 	tbb	[pc, r3]
    e45a:	020e      	.short	0x020e
    e45c:	1114      	.short	0x1114
    e45e:	495c      	ldr	r1, [pc, #368]	; (e5d0 <am_hal_uart_configure+0x1f0>)
    e460:	485c      	ldr	r0, [pc, #368]	; (e5d4 <am_hal_uart_configure+0x1f4>)
    e462:	6832      	ldr	r2, [r6, #0]
    e464:	0112      	lsls	r2, r2, #4
    e466:	fbb0 f3f2 	udiv	r3, r0, r2
    e46a:	b96b      	cbnz	r3, e488 <am_hal_uart_configure+0xa8>
    e46c:	485a      	ldr	r0, [pc, #360]	; (e5d8 <am_hal_uart_configure+0x1f8>)
    e46e:	6623      	str	r3, [r4, #96]	; 0x60
    e470:	b004      	add	sp, #16
    e472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e476:	4959      	ldr	r1, [pc, #356]	; (e5dc <am_hal_uart_configure+0x1fc>)
    e478:	4859      	ldr	r0, [pc, #356]	; (e5e0 <am_hal_uart_configure+0x200>)
    e47a:	e7f2      	b.n	e462 <am_hal_uart_configure+0x82>
    e47c:	4959      	ldr	r1, [pc, #356]	; (e5e4 <am_hal_uart_configure+0x204>)
    e47e:	485a      	ldr	r0, [pc, #360]	; (e5e8 <am_hal_uart_configure+0x208>)
    e480:	e7ef      	b.n	e462 <am_hal_uart_configure+0x82>
    e482:	495a      	ldr	r1, [pc, #360]	; (e5ec <am_hal_uart_configure+0x20c>)
    e484:	485a      	ldr	r0, [pc, #360]	; (e5f0 <am_hal_uart_configure+0x210>)
    e486:	e7ec      	b.n	e462 <am_hal_uart_configure+0x82>
    e488:	fbb1 f2f2 	udiv	r2, r1, r2
    e48c:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e490:	626b      	str	r3, [r5, #36]	; 0x24
    e492:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    e496:	626b      	str	r3, [r5, #36]	; 0x24
    e498:	fbb0 f0f1 	udiv	r0, r0, r1
    e49c:	62aa      	str	r2, [r5, #40]	; 0x28
    e49e:	6620      	str	r0, [r4, #96]	; 0x60
    e4a0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4a2:	f36f 338e 	bfc	r3, #14, #1
    e4a6:	862b      	strh	r3, [r5, #48]	; 0x30
    e4a8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4aa:	f36f 33cf 	bfc	r3, #15, #1
    e4ae:	862b      	strh	r3, [r5, #48]	; 0x30
    e4b0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e4b2:	6933      	ldr	r3, [r6, #16]
    e4b4:	4313      	orrs	r3, r2
    e4b6:	632b      	str	r3, [r5, #48]	; 0x30
    e4b8:	6973      	ldr	r3, [r6, #20]
    e4ba:	636b      	str	r3, [r5, #52]	; 0x34
    e4bc:	6871      	ldr	r1, [r6, #4]
    e4be:	68b3      	ldr	r3, [r6, #8]
    e4c0:	68f2      	ldr	r2, [r6, #12]
    e4c2:	430b      	orrs	r3, r1
    e4c4:	f043 0310 	orr.w	r3, r3, #16
    e4c8:	4313      	orrs	r3, r2
    e4ca:	62eb      	str	r3, [r5, #44]	; 0x2c
    e4cc:	f7ff fd86 	bl	dfdc <am_hal_interrupt_master_disable>
    e4d0:	9003      	str	r0, [sp, #12]
    e4d2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4d4:	f043 0301 	orr.w	r3, r3, #1
    e4d8:	862b      	strh	r3, [r5, #48]	; 0x30
    e4da:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e4e0:	862b      	strh	r3, [r5, #48]	; 0x30
    e4e2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e4e8:	862b      	strh	r3, [r5, #48]	; 0x30
    e4ea:	9803      	ldr	r0, [sp, #12]
    e4ec:	f7ff fd7a 	bl	dfe4 <am_hal_interrupt_master_set>
    e4f0:	6825      	ldr	r5, [r4, #0]
    e4f2:	4b36      	ldr	r3, [pc, #216]	; (e5cc <am_hal_uart_configure+0x1ec>)
    e4f4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e4f8:	429d      	cmp	r5, r3
    e4fa:	d005      	beq.n	e508 <am_hal_uart_configure+0x128>
    e4fc:	2000      	movs	r0, #0
    e4fe:	e7b7      	b.n	e470 <am_hal_uart_configure+0x90>
    e500:	2300      	movs	r3, #0
    e502:	6623      	str	r3, [r4, #96]	; 0x60
    e504:	483b      	ldr	r0, [pc, #236]	; (e5f4 <am_hal_uart_configure+0x214>)
    e506:	e7b3      	b.n	e470 <am_hal_uart_configure+0x90>
    e508:	69b1      	ldr	r1, [r6, #24]
    e50a:	6a37      	ldr	r7, [r6, #32]
    e50c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e510:	b109      	cbz	r1, e516 <am_hal_uart_configure+0x136>
    e512:	69f3      	ldr	r3, [r6, #28]
    e514:	bb3b      	cbnz	r3, e566 <am_hal_uart_configure+0x186>
    e516:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e518:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e51c:	f103 021c 	add.w	r2, r3, #28
    e520:	0312      	lsls	r2, r2, #12
    e522:	2100      	movs	r1, #0
    e524:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e528:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e52a:	f021 0120 	bic.w	r1, r1, #32
    e52e:	6391      	str	r1, [r2, #56]	; 0x38
    e530:	b1b7      	cbz	r7, e560 <am_hal_uart_configure+0x180>
    e532:	f1b8 0f00 	cmp.w	r8, #0
    e536:	d12e      	bne.n	e596 <am_hal_uart_configure+0x1b6>
    e538:	6823      	ldr	r3, [r4, #0]
    e53a:	4a24      	ldr	r2, [pc, #144]	; (e5cc <am_hal_uart_configure+0x1ec>)
    e53c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e540:	2100      	movs	r1, #0
    e542:	4293      	cmp	r3, r2
    e544:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e548:	d1d8      	bne.n	e4fc <am_hal_uart_configure+0x11c>
    e54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e54c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e550:	331c      	adds	r3, #28
    e552:	031b      	lsls	r3, r3, #12
    e554:	2000      	movs	r0, #0
    e556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e558:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e55c:	639a      	str	r2, [r3, #56]	; 0x38
    e55e:	e787      	b.n	e470 <am_hal_uart_configure+0x90>
    e560:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e564:	e7f4      	b.n	e550 <am_hal_uart_configure+0x170>
    e566:	2201      	movs	r2, #1
    e568:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e56c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e570:	f000 fa7c 	bl	ea6c <am_hal_queue_init>
    e574:	6823      	ldr	r3, [r4, #0]
    e576:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e57a:	42ab      	cmp	r3, r5
    e57c:	d1be      	bne.n	e4fc <am_hal_uart_configure+0x11c>
    e57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e580:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e584:	331c      	adds	r3, #28
    e586:	031b      	lsls	r3, r3, #12
    e588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e58a:	f042 0220 	orr.w	r2, r2, #32
    e58e:	639a      	str	r2, [r3, #56]	; 0x38
    e590:	2f00      	cmp	r7, #0
    e592:	d1ce      	bne.n	e532 <am_hal_uart_configure+0x152>
    e594:	e7d0      	b.n	e538 <am_hal_uart_configure+0x158>
    e596:	2201      	movs	r2, #1
    e598:	4643      	mov	r3, r8
    e59a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e59e:	4639      	mov	r1, r7
    e5a0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e5a4:	f000 fa62 	bl	ea6c <am_hal_queue_init>
    e5a8:	6823      	ldr	r3, [r4, #0]
    e5aa:	4a08      	ldr	r2, [pc, #32]	; (e5cc <am_hal_uart_configure+0x1ec>)
    e5ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5b0:	4293      	cmp	r3, r2
    e5b2:	d1a3      	bne.n	e4fc <am_hal_uart_configure+0x11c>
    e5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e5b6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e5ba:	331c      	adds	r3, #28
    e5bc:	031b      	lsls	r3, r3, #12
    e5be:	2000      	movs	r0, #0
    e5c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e5c2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e5c6:	639a      	str	r2, [r3, #56]	; 0x38
    e5c8:	e752      	b.n	e470 <am_hal_uart_configure+0x90>
    e5ca:	bf00      	nop
    e5cc:	01ea9e06 	.word	0x01ea9e06
    e5d0:	2dc6c000 	.word	0x2dc6c000
    e5d4:	00b71b00 	.word	0x00b71b00
    e5d8:	08000003 	.word	0x08000003
    e5dc:	5b8d8000 	.word	0x5b8d8000
    e5e0:	016e3600 	.word	0x016e3600
    e5e4:	0b71b000 	.word	0x0b71b000
    e5e8:	002dc6c0 	.word	0x002dc6c0
    e5ec:	16e36000 	.word	0x16e36000
    e5f0:	005b8d80 	.word	0x005b8d80
    e5f4:	08000002 	.word	0x08000002

0000e5f8 <am_hal_uart_transfer>:
    e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5fc:	680f      	ldr	r7, [r1, #0]
    e5fe:	b091      	sub	sp, #68	; 0x44
    e600:	4605      	mov	r5, r0
    e602:	b13f      	cbz	r7, e614 <am_hal_uart_transfer+0x1c>
    e604:	2f01      	cmp	r7, #1
    e606:	bf18      	it	ne
    e608:	2707      	movne	r7, #7
    e60a:	d024      	beq.n	e656 <am_hal_uart_transfer+0x5e>
    e60c:	4638      	mov	r0, r7
    e60e:	b011      	add	sp, #68	; 0x44
    e610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e614:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e618:	690b      	ldr	r3, [r1, #16]
    e61a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e61e:	688e      	ldr	r6, [r1, #8]
    e620:	9300      	str	r3, [sp, #0]
    e622:	f1b9 0f00 	cmp.w	r9, #0
    e626:	d031      	beq.n	e68c <am_hal_uart_transfer+0x94>
    e628:	2e00      	cmp	r6, #0
    e62a:	f000 819c 	beq.w	e966 <am_hal_uart_transfer+0x36e>
    e62e:	2800      	cmp	r0, #0
    e630:	f000 8097 	beq.w	e762 <am_hal_uart_transfer+0x16a>
    e634:	6803      	ldr	r3, [r0, #0]
    e636:	4aa9      	ldr	r2, [pc, #676]	; (e8dc <am_hal_uart_transfer+0x2e4>)
    e638:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e63c:	4293      	cmp	r3, r2
    e63e:	f000 8092 	beq.w	e766 <am_hal_uart_transfer+0x16e>
    e642:	46b8      	mov	r8, r7
    e644:	9b00      	ldr	r3, [sp, #0]
    e646:	b10b      	cbz	r3, e64c <am_hal_uart_transfer+0x54>
    e648:	f8c3 8000 	str.w	r8, [r3]
    e64c:	2702      	movs	r7, #2
    e64e:	4638      	mov	r0, r7
    e650:	b011      	add	sp, #68	; 0x44
    e652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e656:	1d0b      	adds	r3, r1, #4
    e658:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e65c:	f1b9 0f00 	cmp.w	r9, #0
    e660:	d043      	beq.n	e6ea <am_hal_uart_transfer+0xf2>
    e662:	2f00      	cmp	r7, #0
    e664:	f000 8185 	beq.w	e972 <am_hal_uart_transfer+0x37a>
    e668:	2800      	cmp	r0, #0
    e66a:	f000 80eb 	beq.w	e844 <am_hal_uart_transfer+0x24c>
    e66e:	6802      	ldr	r2, [r0, #0]
    e670:	499a      	ldr	r1, [pc, #616]	; (e8dc <am_hal_uart_transfer+0x2e4>)
    e672:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e676:	428a      	cmp	r2, r1
    e678:	f000 80e7 	beq.w	e84a <am_hal_uart_transfer+0x252>
    e67c:	2600      	movs	r6, #0
    e67e:	2702      	movs	r7, #2
    e680:	f1bb 0f00 	cmp.w	fp, #0
    e684:	d0c2      	beq.n	e60c <am_hal_uart_transfer+0x14>
    e686:	f8cb 6000 	str.w	r6, [fp]
    e68a:	e7bf      	b.n	e60c <am_hal_uart_transfer+0x14>
    e68c:	2800      	cmp	r0, #0
    e68e:	d0dd      	beq.n	e64c <am_hal_uart_transfer+0x54>
    e690:	6803      	ldr	r3, [r0, #0]
    e692:	4a92      	ldr	r2, [pc, #584]	; (e8dc <am_hal_uart_transfer+0x2e4>)
    e694:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e698:	4293      	cmp	r3, r2
    e69a:	d1d7      	bne.n	e64c <am_hal_uart_transfer+0x54>
    e69c:	9b00      	ldr	r3, [sp, #0]
    e69e:	b10b      	cbz	r3, e6a4 <am_hal_uart_transfer+0xac>
    e6a0:	f8c3 9000 	str.w	r9, [r3]
    e6a4:	b1fe      	cbz	r6, e6e6 <am_hal_uart_transfer+0xee>
    e6a6:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	f040 8165 	bne.w	e97a <am_hal_uart_transfer+0x382>
    e6b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e6b2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e6b6:	311c      	adds	r1, #28
    e6b8:	0309      	lsls	r1, r1, #12
    e6ba:	698a      	ldr	r2, [r1, #24]
    e6bc:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e6c0:	2a00      	cmp	r2, #0
    e6c2:	f040 818d 	bne.w	e9e0 <am_hal_uart_transfer+0x3e8>
    e6c6:	f10a 33ff 	add.w	r3, sl, #4294967295
    e6ca:	e003      	b.n	e6d4 <am_hal_uart_transfer+0xdc>
    e6cc:	6988      	ldr	r0, [r1, #24]
    e6ce:	0680      	lsls	r0, r0, #26
    e6d0:	f100 8151 	bmi.w	e976 <am_hal_uart_transfer+0x37e>
    e6d4:	3201      	adds	r2, #1
    e6d6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e6da:	6008      	str	r0, [r1, #0]
    e6dc:	4296      	cmp	r6, r2
    e6de:	d1f5      	bne.n	e6cc <am_hal_uart_transfer+0xd4>
    e6e0:	9b00      	ldr	r3, [sp, #0]
    e6e2:	b103      	cbz	r3, e6e6 <am_hal_uart_transfer+0xee>
    e6e4:	601e      	str	r6, [r3, #0]
    e6e6:	2700      	movs	r7, #0
    e6e8:	e790      	b.n	e60c <am_hal_uart_transfer+0x14>
    e6ea:	2800      	cmp	r0, #0
    e6ec:	d0ae      	beq.n	e64c <am_hal_uart_transfer+0x54>
    e6ee:	6802      	ldr	r2, [r0, #0]
    e6f0:	497a      	ldr	r1, [pc, #488]	; (e8dc <am_hal_uart_transfer+0x2e4>)
    e6f2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e6f6:	428a      	cmp	r2, r1
    e6f8:	d1a8      	bne.n	e64c <am_hal_uart_transfer+0x54>
    e6fa:	f1bb 0f00 	cmp.w	fp, #0
    e6fe:	d001      	beq.n	e704 <am_hal_uart_transfer+0x10c>
    e700:	f8cb 9000 	str.w	r9, [fp]
    e704:	2f00      	cmp	r7, #0
    e706:	d0ee      	beq.n	e6e6 <am_hal_uart_transfer+0xee>
    e708:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e70c:	2c00      	cmp	r4, #0
    e70e:	f040 816c 	bne.w	e9ea <am_hal_uart_transfer+0x3f2>
    e712:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e714:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e718:	321c      	adds	r2, #28
    e71a:	0312      	lsls	r2, r2, #12
    e71c:	6990      	ldr	r0, [r2, #24]
    e71e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e722:	2800      	cmp	r0, #0
    e724:	f040 819d 	bne.w	ea62 <am_hal_uart_transfer+0x46a>
    e728:	6811      	ldr	r1, [r2, #0]
    e72a:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e72e:	bf08      	it	eq
    e730:	f103 33ff 	addeq.w	r3, r3, #4294967295
    e734:	d008      	beq.n	e748 <am_hal_uart_transfer+0x150>
    e736:	e190      	b.n	ea5a <am_hal_uart_transfer+0x462>
    e738:	6991      	ldr	r1, [r2, #24]
    e73a:	06c8      	lsls	r0, r1, #27
    e73c:	d409      	bmi.n	e752 <am_hal_uart_transfer+0x15a>
    e73e:	6811      	ldr	r1, [r2, #0]
    e740:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e744:	f040 814e 	bne.w	e9e4 <am_hal_uart_transfer+0x3ec>
    e748:	3401      	adds	r4, #1
    e74a:	42a7      	cmp	r7, r4
    e74c:	f803 1f01 	strb.w	r1, [r3, #1]!
    e750:	d1f2      	bne.n	e738 <am_hal_uart_transfer+0x140>
    e752:	2700      	movs	r7, #0
    e754:	f1bb 0f00 	cmp.w	fp, #0
    e758:	f43f af58 	beq.w	e60c <am_hal_uart_transfer+0x14>
    e75c:	f8cb 4000 	str.w	r4, [fp]
    e760:	e754      	b.n	e60c <am_hal_uart_transfer+0x14>
    e762:	4680      	mov	r8, r0
    e764:	e76e      	b.n	e644 <am_hal_uart_transfer+0x4c>
    e766:	9301      	str	r3, [sp, #4]
    e768:	4651      	mov	r1, sl
    e76a:	46bb      	mov	fp, r7
    e76c:	46b8      	mov	r8, r7
    e76e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e772:	b9f2      	cbnz	r2, e7b2 <am_hal_uart_transfer+0x1ba>
    e774:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e776:	b19e      	cbz	r6, e7a0 <am_hal_uart_transfer+0x1a8>
    e778:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e77c:	321c      	adds	r2, #28
    e77e:	0312      	lsls	r2, r2, #12
    e780:	3901      	subs	r1, #1
    e782:	6994      	ldr	r4, [r2, #24]
    e784:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e788:	b11c      	cbz	r4, e792 <am_hal_uart_transfer+0x19a>
    e78a:	e047      	b.n	e81c <am_hal_uart_transfer+0x224>
    e78c:	6993      	ldr	r3, [r2, #24]
    e78e:	069b      	lsls	r3, r3, #26
    e790:	d441      	bmi.n	e816 <am_hal_uart_transfer+0x21e>
    e792:	3401      	adds	r4, #1
    e794:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e798:	6013      	str	r3, [r2, #0]
    e79a:	42b4      	cmp	r4, r6
    e79c:	d1f6      	bne.n	e78c <am_hal_uart_transfer+0x194>
    e79e:	44a0      	add	r8, r4
    e7a0:	9b00      	ldr	r3, [sp, #0]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d09f      	beq.n	e6e6 <am_hal_uart_transfer+0xee>
    e7a6:	4638      	mov	r0, r7
    e7a8:	f8c3 8000 	str.w	r8, [r3]
    e7ac:	b011      	add	sp, #68	; 0x44
    e7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e7b4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e7b6:	1b14      	subs	r4, r2, r4
    e7b8:	42b4      	cmp	r4, r6
    e7ba:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e7be:	bf28      	it	cs
    e7c0:	4634      	movcs	r4, r6
    e7c2:	4622      	mov	r2, r4
    e7c4:	4618      	mov	r0, r3
    e7c6:	9302      	str	r3, [sp, #8]
    e7c8:	f000 f95c 	bl	ea84 <am_hal_queue_item_add>
    e7cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7ce:	9303      	str	r3, [sp, #12]
    e7d0:	f7ff fc04 	bl	dfdc <am_hal_interrupt_master_disable>
    e7d4:	9b03      	ldr	r3, [sp, #12]
    e7d6:	9008      	str	r0, [sp, #32]
    e7d8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e7dc:	331c      	adds	r3, #28
    e7de:	031b      	lsls	r3, r3, #12
    e7e0:	9303      	str	r3, [sp, #12]
    e7e2:	e00d      	b.n	e800 <am_hal_uart_transfer+0x208>
    e7e4:	f000 f986 	bl	eaf4 <am_hal_queue_item_get>
    e7e8:	b190      	cbz	r0, e810 <am_hal_uart_transfer+0x218>
    e7ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7ec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e7f0:	331c      	adds	r3, #28
    e7f2:	031b      	lsls	r3, r3, #12
    e7f4:	699a      	ldr	r2, [r3, #24]
    e7f6:	0692      	lsls	r2, r2, #26
    e7f8:	bf5c      	itt	pl
    e7fa:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e7fe:	601a      	strpl	r2, [r3, #0]
    e800:	9b03      	ldr	r3, [sp, #12]
    e802:	9802      	ldr	r0, [sp, #8]
    e804:	699b      	ldr	r3, [r3, #24]
    e806:	069b      	lsls	r3, r3, #26
    e808:	f04f 0201 	mov.w	r2, #1
    e80c:	a907      	add	r1, sp, #28
    e80e:	d5e9      	bpl.n	e7e4 <am_hal_uart_transfer+0x1ec>
    e810:	9808      	ldr	r0, [sp, #32]
    e812:	f7ff fbe7 	bl	dfe4 <am_hal_interrupt_master_set>
    e816:	1b36      	subs	r6, r6, r4
    e818:	44a0      	add	r8, r4
    e81a:	d0c1      	beq.n	e7a0 <am_hal_uart_transfer+0x1a8>
    e81c:	2001      	movs	r0, #1
    e81e:	f7ff fa95 	bl	dd4c <am_hal_flash_delay>
    e822:	f1b9 3fff 	cmp.w	r9, #4294967295
    e826:	d001      	beq.n	e82c <am_hal_uart_transfer+0x234>
    e828:	f10b 0b01 	add.w	fp, fp, #1
    e82c:	45d9      	cmp	r9, fp
    e82e:	d9b7      	bls.n	e7a0 <am_hal_uart_transfer+0x1a8>
    e830:	682a      	ldr	r2, [r5, #0]
    e832:	9b01      	ldr	r3, [sp, #4]
    e834:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e838:	429a      	cmp	r2, r3
    e83a:	eb0a 0108 	add.w	r1, sl, r8
    e83e:	f47f af01 	bne.w	e644 <am_hal_uart_transfer+0x4c>
    e842:	e794      	b.n	e76e <am_hal_uart_transfer+0x176>
    e844:	4606      	mov	r6, r0
    e846:	2702      	movs	r7, #2
    e848:	e71a      	b.n	e680 <am_hal_uart_transfer+0x88>
    e84a:	9200      	str	r2, [sp, #0]
    e84c:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e850:	f04f 0a00 	mov.w	sl, #0
    e854:	9202      	str	r2, [sp, #8]
    e856:	465a      	mov	r2, fp
    e858:	4698      	mov	r8, r3
    e85a:	469b      	mov	fp, r3
    e85c:	4656      	mov	r6, sl
    e85e:	4613      	mov	r3, r2
    e860:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e864:	2a00      	cmp	r2, #0
    e866:	d152      	bne.n	e90e <am_hal_uart_transfer+0x316>
    e868:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e86a:	b3a7      	cbz	r7, e8d6 <am_hal_uart_transfer+0x2de>
    e86c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e870:	311c      	adds	r1, #28
    e872:	0309      	lsls	r1, r1, #12
    e874:	698a      	ldr	r2, [r1, #24]
    e876:	06d0      	lsls	r0, r2, #27
    e878:	d432      	bmi.n	e8e0 <am_hal_uart_transfer+0x2e8>
    e87a:	680a      	ldr	r2, [r1, #0]
    e87c:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    e880:	f040 80aa 	bne.w	e9d8 <am_hal_uart_transfer+0x3e0>
    e884:	f108 38ff 	add.w	r8, r8, #4294967295
    e888:	e006      	b.n	e898 <am_hal_uart_transfer+0x2a0>
    e88a:	698a      	ldr	r2, [r1, #24]
    e88c:	06d2      	lsls	r2, r2, #27
    e88e:	d41f      	bmi.n	e8d0 <am_hal_uart_transfer+0x2d8>
    e890:	680a      	ldr	r2, [r1, #0]
    e892:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e896:	d161      	bne.n	e95c <am_hal_uart_transfer+0x364>
    e898:	3401      	adds	r4, #1
    e89a:	42bc      	cmp	r4, r7
    e89c:	f808 2f01 	strb.w	r2, [r8, #1]!
    e8a0:	d1f3      	bne.n	e88a <am_hal_uart_transfer+0x292>
    e8a2:	469b      	mov	fp, r3
    e8a4:	4426      	add	r6, r4
    e8a6:	f1bb 0f00 	cmp.w	fp, #0
    e8aa:	f43f af1c 	beq.w	e6e6 <am_hal_uart_transfer+0xee>
    e8ae:	f8cb 6000 	str.w	r6, [fp]
    e8b2:	2700      	movs	r7, #0
    e8b4:	e6aa      	b.n	e60c <am_hal_uart_transfer+0x14>
    e8b6:	9807      	ldr	r0, [sp, #28]
    e8b8:	f7ff fb94 	bl	dfe4 <am_hal_interrupt_master_set>
    e8bc:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e8be:	9802      	ldr	r0, [sp, #8]
    e8c0:	42bc      	cmp	r4, r7
    e8c2:	bf28      	it	cs
    e8c4:	463c      	movcs	r4, r7
    e8c6:	4641      	mov	r1, r8
    e8c8:	4622      	mov	r2, r4
    e8ca:	f000 f913 	bl	eaf4 <am_hal_queue_item_get>
    e8ce:	9b01      	ldr	r3, [sp, #4]
    e8d0:	1b3f      	subs	r7, r7, r4
    e8d2:	4426      	add	r6, r4
    e8d4:	d104      	bne.n	e8e0 <am_hal_uart_transfer+0x2e8>
    e8d6:	469b      	mov	fp, r3
    e8d8:	e7e5      	b.n	e8a6 <am_hal_uart_transfer+0x2ae>
    e8da:	bf00      	nop
    e8dc:	01ea9e06 	.word	0x01ea9e06
    e8e0:	2001      	movs	r0, #1
    e8e2:	9301      	str	r3, [sp, #4]
    e8e4:	f7ff fa32 	bl	dd4c <am_hal_flash_delay>
    e8e8:	f1b9 3fff 	cmp.w	r9, #4294967295
    e8ec:	9b01      	ldr	r3, [sp, #4]
    e8ee:	d001      	beq.n	e8f4 <am_hal_uart_transfer+0x2fc>
    e8f0:	f10a 0a01 	add.w	sl, sl, #1
    e8f4:	45d1      	cmp	r9, sl
    e8f6:	d9ee      	bls.n	e8d6 <am_hal_uart_transfer+0x2de>
    e8f8:	682a      	ldr	r2, [r5, #0]
    e8fa:	9900      	ldr	r1, [sp, #0]
    e8fc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e900:	428a      	cmp	r2, r1
    e902:	eb0b 0806 	add.w	r8, fp, r6
    e906:	d0ab      	beq.n	e860 <am_hal_uart_transfer+0x268>
    e908:	469b      	mov	fp, r3
    e90a:	2702      	movs	r7, #2
    e90c:	e6b8      	b.n	e680 <am_hal_uart_transfer+0x88>
    e90e:	9301      	str	r3, [sp, #4]
    e910:	f7ff fb64 	bl	dfdc <am_hal_interrupt_master_disable>
    e914:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e916:	9007      	str	r0, [sp, #28]
    e918:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e91c:	301c      	adds	r0, #28
    e91e:	9b01      	ldr	r3, [sp, #4]
    e920:	0300      	lsls	r0, r0, #12
    e922:	ac08      	add	r4, sp, #32
    e924:	2200      	movs	r2, #0
    e926:	6981      	ldr	r1, [r0, #24]
    e928:	06c9      	lsls	r1, r1, #27
    e92a:	d409      	bmi.n	e940 <am_hal_uart_transfer+0x348>
    e92c:	6801      	ldr	r1, [r0, #0]
    e92e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e932:	f102 0201 	add.w	r2, r2, #1
    e936:	d118      	bne.n	e96a <am_hal_uart_transfer+0x372>
    e938:	2a20      	cmp	r2, #32
    e93a:	f804 1b01 	strb.w	r1, [r4], #1
    e93e:	d1f2      	bne.n	e926 <am_hal_uart_transfer+0x32e>
    e940:	a908      	add	r1, sp, #32
    e942:	9802      	ldr	r0, [sp, #8]
    e944:	9301      	str	r3, [sp, #4]
    e946:	f000 f89d 	bl	ea84 <am_hal_queue_item_add>
    e94a:	9b01      	ldr	r3, [sp, #4]
    e94c:	2800      	cmp	r0, #0
    e94e:	d1b2      	bne.n	e8b6 <am_hal_uart_transfer+0x2be>
    e950:	4f45      	ldr	r7, [pc, #276]	; (ea68 <am_hal_uart_transfer+0x470>)
    e952:	469b      	mov	fp, r3
    e954:	9807      	ldr	r0, [sp, #28]
    e956:	f7ff fb45 	bl	dfe4 <am_hal_interrupt_master_set>
    e95a:	e691      	b.n	e680 <am_hal_uart_transfer+0x88>
    e95c:	469b      	mov	fp, r3
    e95e:	4426      	add	r6, r4
    e960:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e964:	e68c      	b.n	e680 <am_hal_uart_transfer+0x88>
    e966:	46b8      	mov	r8, r7
    e968:	e71a      	b.n	e7a0 <am_hal_uart_transfer+0x1a8>
    e96a:	469b      	mov	fp, r3
    e96c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e970:	e7f0      	b.n	e954 <am_hal_uart_transfer+0x35c>
    e972:	463e      	mov	r6, r7
    e974:	e797      	b.n	e8a6 <am_hal_uart_transfer+0x2ae>
    e976:	4616      	mov	r6, r2
    e978:	e6b2      	b.n	e6e0 <am_hal_uart_transfer+0xe8>
    e97a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e97c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e97e:	1a9b      	subs	r3, r3, r2
    e980:	429e      	cmp	r6, r3
    e982:	bf28      	it	cs
    e984:	461e      	movcs	r6, r3
    e986:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e98a:	4651      	mov	r1, sl
    e98c:	4632      	mov	r2, r6
    e98e:	4620      	mov	r0, r4
    e990:	f000 f878 	bl	ea84 <am_hal_queue_item_add>
    e994:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e996:	f7ff fb21 	bl	dfdc <am_hal_interrupt_master_disable>
    e99a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e99e:	371c      	adds	r7, #28
    e9a0:	033f      	lsls	r7, r7, #12
    e9a2:	9005      	str	r0, [sp, #20]
    e9a4:	e00d      	b.n	e9c2 <am_hal_uart_transfer+0x3ca>
    e9a6:	f000 f8a5 	bl	eaf4 <am_hal_queue_item_get>
    e9aa:	b188      	cbz	r0, e9d0 <am_hal_uart_transfer+0x3d8>
    e9ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9ae:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9b2:	331c      	adds	r3, #28
    e9b4:	031b      	lsls	r3, r3, #12
    e9b6:	699a      	ldr	r2, [r3, #24]
    e9b8:	0692      	lsls	r2, r2, #26
    e9ba:	bf5c      	itt	pl
    e9bc:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e9c0:	601a      	strpl	r2, [r3, #0]
    e9c2:	69bb      	ldr	r3, [r7, #24]
    e9c4:	069b      	lsls	r3, r3, #26
    e9c6:	f04f 0201 	mov.w	r2, #1
    e9ca:	a908      	add	r1, sp, #32
    e9cc:	4620      	mov	r0, r4
    e9ce:	d5ea      	bpl.n	e9a6 <am_hal_uart_transfer+0x3ae>
    e9d0:	9805      	ldr	r0, [sp, #20]
    e9d2:	f7ff fb07 	bl	dfe4 <am_hal_interrupt_master_set>
    e9d6:	e683      	b.n	e6e0 <am_hal_uart_transfer+0xe8>
    e9d8:	469b      	mov	fp, r3
    e9da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e9de:	e64f      	b.n	e680 <am_hal_uart_transfer+0x88>
    e9e0:	461e      	mov	r6, r3
    e9e2:	e67d      	b.n	e6e0 <am_hal_uart_transfer+0xe8>
    e9e4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e9e8:	e6b4      	b.n	e754 <am_hal_uart_transfer+0x15c>
    e9ea:	9300      	str	r3, [sp, #0]
    e9ec:	f7ff faf6 	bl	dfdc <am_hal_interrupt_master_disable>
    e9f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e9f2:	9006      	str	r0, [sp, #24]
    e9f4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e9f8:	321c      	adds	r2, #28
    e9fa:	0311      	lsls	r1, r2, #12
    e9fc:	a808      	add	r0, sp, #32
    e9fe:	2200      	movs	r2, #0
    ea00:	9b00      	ldr	r3, [sp, #0]
    ea02:	e009      	b.n	ea18 <am_hal_uart_transfer+0x420>
    ea04:	680c      	ldr	r4, [r1, #0]
    ea06:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ea0a:	f102 0201 	add.w	r2, r2, #1
    ea0e:	d121      	bne.n	ea54 <am_hal_uart_transfer+0x45c>
    ea10:	2a20      	cmp	r2, #32
    ea12:	f800 4b01 	strb.w	r4, [r0], #1
    ea16:	d002      	beq.n	ea1e <am_hal_uart_transfer+0x426>
    ea18:	698c      	ldr	r4, [r1, #24]
    ea1a:	06e4      	lsls	r4, r4, #27
    ea1c:	d5f2      	bpl.n	ea04 <am_hal_uart_transfer+0x40c>
    ea1e:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ea22:	a908      	add	r1, sp, #32
    ea24:	4630      	mov	r0, r6
    ea26:	9300      	str	r3, [sp, #0]
    ea28:	f000 f82c 	bl	ea84 <am_hal_queue_item_add>
    ea2c:	b920      	cbnz	r0, ea38 <am_hal_uart_transfer+0x440>
    ea2e:	4f0e      	ldr	r7, [pc, #56]	; (ea68 <am_hal_uart_transfer+0x470>)
    ea30:	9806      	ldr	r0, [sp, #24]
    ea32:	f7ff fad7 	bl	dfe4 <am_hal_interrupt_master_set>
    ea36:	e5e9      	b.n	e60c <am_hal_uart_transfer+0x14>
    ea38:	9806      	ldr	r0, [sp, #24]
    ea3a:	f7ff fad3 	bl	dfe4 <am_hal_interrupt_master_set>
    ea3e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ea40:	9b00      	ldr	r3, [sp, #0]
    ea42:	42bc      	cmp	r4, r7
    ea44:	bf28      	it	cs
    ea46:	463c      	movcs	r4, r7
    ea48:	4619      	mov	r1, r3
    ea4a:	4630      	mov	r0, r6
    ea4c:	4622      	mov	r2, r4
    ea4e:	f000 f851 	bl	eaf4 <am_hal_queue_item_get>
    ea52:	e67e      	b.n	e752 <am_hal_uart_transfer+0x15a>
    ea54:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea58:	e7ea      	b.n	ea30 <am_hal_uart_transfer+0x438>
    ea5a:	4604      	mov	r4, r0
    ea5c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea60:	e678      	b.n	e754 <am_hal_uart_transfer+0x15c>
    ea62:	4627      	mov	r7, r4
    ea64:	e676      	b.n	e754 <am_hal_uart_transfer+0x15c>
    ea66:	bf00      	nop
    ea68:	08000001 	.word	0x08000001

0000ea6c <am_hal_queue_init>:
    ea6c:	b410      	push	{r4}
    ea6e:	2400      	movs	r4, #0
    ea70:	6004      	str	r4, [r0, #0]
    ea72:	6044      	str	r4, [r0, #4]
    ea74:	6084      	str	r4, [r0, #8]
    ea76:	60c3      	str	r3, [r0, #12]
    ea78:	6102      	str	r2, [r0, #16]
    ea7a:	6141      	str	r1, [r0, #20]
    ea7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea80:	4770      	bx	lr
    ea82:	bf00      	nop

0000ea84 <am_hal_queue_item_add>:
    ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea86:	4604      	mov	r4, r0
    ea88:	6906      	ldr	r6, [r0, #16]
    ea8a:	b083      	sub	sp, #12
    ea8c:	fb06 f602 	mul.w	r6, r6, r2
    ea90:	460d      	mov	r5, r1
    ea92:	f7ff faa3 	bl	dfdc <am_hal_interrupt_master_disable>
    ea96:	68e7      	ldr	r7, [r4, #12]
    ea98:	68a2      	ldr	r2, [r4, #8]
    ea9a:	9001      	str	r0, [sp, #4]
    ea9c:	1abb      	subs	r3, r7, r2
    ea9e:	429e      	cmp	r6, r3
    eaa0:	d826      	bhi.n	eaf0 <am_hal_queue_item_add+0x6c>
    eaa2:	b196      	cbz	r6, eaca <am_hal_queue_item_add+0x46>
    eaa4:	6823      	ldr	r3, [r4, #0]
    eaa6:	4629      	mov	r1, r5
    eaa8:	b1c5      	cbz	r5, eadc <am_hal_queue_item_add+0x58>
    eaaa:	19af      	adds	r7, r5, r6
    eaac:	6962      	ldr	r2, [r4, #20]
    eaae:	f811 0b01 	ldrb.w	r0, [r1], #1
    eab2:	54d0      	strb	r0, [r2, r3]
    eab4:	6823      	ldr	r3, [r4, #0]
    eab6:	68e5      	ldr	r5, [r4, #12]
    eab8:	3301      	adds	r3, #1
    eaba:	42b9      	cmp	r1, r7
    eabc:	fbb3 f0f5 	udiv	r0, r3, r5
    eac0:	fb05 3310 	mls	r3, r5, r0, r3
    eac4:	6023      	str	r3, [r4, #0]
    eac6:	d1f1      	bne.n	eaac <am_hal_queue_item_add+0x28>
    eac8:	68a2      	ldr	r2, [r4, #8]
    eaca:	4432      	add	r2, r6
    eacc:	60a2      	str	r2, [r4, #8]
    eace:	2401      	movs	r4, #1
    ead0:	9801      	ldr	r0, [sp, #4]
    ead2:	f7ff fa87 	bl	dfe4 <am_hal_interrupt_master_set>
    ead6:	4620      	mov	r0, r4
    ead8:	b003      	add	sp, #12
    eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eadc:	3101      	adds	r1, #1
    eade:	3301      	adds	r3, #1
    eae0:	428e      	cmp	r6, r1
    eae2:	fbb3 f0f7 	udiv	r0, r3, r7
    eae6:	fb07 3310 	mls	r3, r7, r0, r3
    eaea:	d1f7      	bne.n	eadc <am_hal_queue_item_add+0x58>
    eaec:	6023      	str	r3, [r4, #0]
    eaee:	e7ec      	b.n	eaca <am_hal_queue_item_add+0x46>
    eaf0:	2400      	movs	r4, #0
    eaf2:	e7ed      	b.n	ead0 <am_hal_queue_item_add+0x4c>

0000eaf4 <am_hal_queue_item_get>:
    eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaf6:	4604      	mov	r4, r0
    eaf8:	6906      	ldr	r6, [r0, #16]
    eafa:	b083      	sub	sp, #12
    eafc:	fb06 f602 	mul.w	r6, r6, r2
    eb00:	460d      	mov	r5, r1
    eb02:	f7ff fa6b 	bl	dfdc <am_hal_interrupt_master_disable>
    eb06:	68a2      	ldr	r2, [r4, #8]
    eb08:	9001      	str	r0, [sp, #4]
    eb0a:	4296      	cmp	r6, r2
    eb0c:	d81c      	bhi.n	eb48 <am_hal_queue_item_get+0x54>
    eb0e:	b196      	cbz	r6, eb36 <am_hal_queue_item_get+0x42>
    eb10:	6863      	ldr	r3, [r4, #4]
    eb12:	b1dd      	cbz	r5, eb4c <am_hal_queue_item_get+0x58>
    eb14:	4629      	mov	r1, r5
    eb16:	19af      	adds	r7, r5, r6
    eb18:	6962      	ldr	r2, [r4, #20]
    eb1a:	5cd3      	ldrb	r3, [r2, r3]
    eb1c:	f801 3b01 	strb.w	r3, [r1], #1
    eb20:	6863      	ldr	r3, [r4, #4]
    eb22:	68e5      	ldr	r5, [r4, #12]
    eb24:	3301      	adds	r3, #1
    eb26:	428f      	cmp	r7, r1
    eb28:	fbb3 f0f5 	udiv	r0, r3, r5
    eb2c:	fb05 3310 	mls	r3, r5, r0, r3
    eb30:	6063      	str	r3, [r4, #4]
    eb32:	d1f1      	bne.n	eb18 <am_hal_queue_item_get+0x24>
    eb34:	68a2      	ldr	r2, [r4, #8]
    eb36:	1b92      	subs	r2, r2, r6
    eb38:	60a2      	str	r2, [r4, #8]
    eb3a:	2401      	movs	r4, #1
    eb3c:	9801      	ldr	r0, [sp, #4]
    eb3e:	f7ff fa51 	bl	dfe4 <am_hal_interrupt_master_set>
    eb42:	4620      	mov	r0, r4
    eb44:	b003      	add	sp, #12
    eb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb48:	2400      	movs	r4, #0
    eb4a:	e7f7      	b.n	eb3c <am_hal_queue_item_get+0x48>
    eb4c:	68e0      	ldr	r0, [r4, #12]
    eb4e:	4629      	mov	r1, r5
    eb50:	3101      	adds	r1, #1
    eb52:	3301      	adds	r3, #1
    eb54:	428e      	cmp	r6, r1
    eb56:	fbb3 f5f0 	udiv	r5, r3, r0
    eb5a:	fb00 3315 	mls	r3, r0, r5, r3
    eb5e:	d1f7      	bne.n	eb50 <am_hal_queue_item_get+0x5c>
    eb60:	6063      	str	r3, [r4, #4]
    eb62:	e7e8      	b.n	eb36 <am_hal_queue_item_get+0x42>
    eb64:	6f727245 	.word	0x6f727245
    eb68:	65722072 	.word	0x65722072
    eb6c:	6e696461 	.word	0x6e696461
    eb70:	44412067 	.word	0x44412067
    eb74:	69203043 	.word	0x69203043
    eb78:	7265746e 	.word	0x7265746e
    eb7c:	74707572 	.word	0x74707572
    eb80:	61747320 	.word	0x61747320
    eb84:	0a737574 	.word	0x0a737574
    eb88:	00000000 	.word	0x00000000
    eb8c:	6f727245 	.word	0x6f727245
    eb90:	6c632072 	.word	0x6c632072
    eb94:	69726165 	.word	0x69726165
    eb98:	4120676e 	.word	0x4120676e
    eb9c:	20304344 	.word	0x20304344
    eba0:	65746e69 	.word	0x65746e69
    eba4:	70757272 	.word	0x70757272
    eba8:	74732074 	.word	0x74732074
    ebac:	73757461 	.word	0x73757461
    ebb0:	0000000a 	.word	0x0000000a
    ebb4:	6f727245 	.word	0x6f727245
    ebb8:	202d2072 	.word	0x202d2072
    ebbc:	666e6f63 	.word	0x666e6f63
    ebc0:	72756769 	.word	0x72756769
    ebc4:	20676e69 	.word	0x20676e69
    ebc8:	20434441 	.word	0x20434441
    ebcc:	20414d44 	.word	0x20414d44
    ebd0:	6c696166 	.word	0x6c696166
    ebd4:	0a2e6465 	.word	0x0a2e6465
    ebd8:	00000000 	.word	0x00000000
    ebdc:	6f727245 	.word	0x6f727245
    ebe0:	202d2072 	.word	0x202d2072
    ebe4:	65736572 	.word	0x65736572
    ebe8:	74617672 	.word	0x74617672
    ebec:	206e6f69 	.word	0x206e6f69
    ebf0:	7420666f 	.word	0x7420666f
    ebf4:	41206568 	.word	0x41206568
    ebf8:	20304344 	.word	0x20304344
    ebfc:	74736e69 	.word	0x74736e69
    ec00:	65636e61 	.word	0x65636e61
    ec04:	69616620 	.word	0x69616620
    ec08:	2e64656c 	.word	0x2e64656c
    ec0c:	0000000a 	.word	0x0000000a
    ec10:	6f727245 	.word	0x6f727245
    ec14:	202d2072 	.word	0x202d2072
    ec18:	30434441 	.word	0x30434441
    ec1c:	776f7020 	.word	0x776f7020
    ec20:	6f207265 	.word	0x6f207265
    ec24:	6166206e 	.word	0x6166206e
    ec28:	64656c69 	.word	0x64656c69
    ec2c:	00000a2e 	.word	0x00000a2e
    ec30:	6f727245 	.word	0x6f727245
    ec34:	202d2072 	.word	0x202d2072
    ec38:	666e6f63 	.word	0x666e6f63
    ec3c:	72756769 	.word	0x72756769
    ec40:	20676e69 	.word	0x20676e69
    ec44:	30434441 	.word	0x30434441
    ec48:	69616620 	.word	0x69616620
    ec4c:	2e64656c 	.word	0x2e64656c
    ec50:	0000000a 	.word	0x0000000a
    ec54:	6f727245 	.word	0x6f727245
    ec58:	202d2072 	.word	0x202d2072
    ec5c:	666e6f63 	.word	0x666e6f63
    ec60:	72756769 	.word	0x72756769
    ec64:	20676e69 	.word	0x20676e69
    ec68:	20434441 	.word	0x20434441
    ec6c:	746f6c53 	.word	0x746f6c53
    ec70:	66203220 	.word	0x66203220
    ec74:	656c6961 	.word	0x656c6961
    ec78:	000a2e64 	.word	0x000a2e64
    ec7c:	6f727245 	.word	0x6f727245
    ec80:	202d2072 	.word	0x202d2072
    ec84:	666e6f63 	.word	0x666e6f63
    ec88:	72756769 	.word	0x72756769
    ec8c:	20676e69 	.word	0x20676e69
    ec90:	20434441 	.word	0x20434441
    ec94:	746f6c53 	.word	0x746f6c53
    ec98:	66203120 	.word	0x66203120
    ec9c:	656c6961 	.word	0x656c6961
    eca0:	000a2e64 	.word	0x000a2e64
    eca4:	6f727245 	.word	0x6f727245
    eca8:	202d2072 	.word	0x202d2072
    ecac:	62616e65 	.word	0x62616e65
    ecb0:	676e696c 	.word	0x676e696c
    ecb4:	43444120 	.word	0x43444120
    ecb8:	61662030 	.word	0x61662030
    ecbc:	64656c69 	.word	0x64656c69
    ecc0:	00000a2e 	.word	0x00000a2e
    ecc4:	72617053 	.word	0x72617053
    ecc8:	6e75466b 	.word	0x6e75466b
    eccc:	67644520 	.word	0x67644520
    ecd0:	4d442065 	.word	0x4d442065
    ecd4:	44412041 	.word	0x44412041
    ecd8:	65542043 	.word	0x65542043
    ecdc:	000a7473 	.word	0x000a7473
    ece0:	303a3331 	.word	0x303a3331
    ece4:	37323a32 	.word	0x37323a32
    ece8:	00000000 	.word	0x00000000
    ecec:	20626546 	.word	0x20626546
    ecf0:	32203232 	.word	0x32203232
    ecf4:	00393130 	.word	0x00393130
    ecf8:	706d6f43 	.word	0x706d6f43
    ecfc:	64656c69 	.word	0x64656c69
    ed00:	206e6f20 	.word	0x206e6f20
    ed04:	202c7325 	.word	0x202c7325
    ed08:	0a0a7325 	.word	0x0a0a7325
    ed0c:	00000000 	.word	0x00000000
    ed10:	6f727245 	.word	0x6f727245
    ed14:	202d2072 	.word	0x202d2072
    ed18:	666e6f63 	.word	0x666e6f63
    ed1c:	72756769 	.word	0x72756769
    ed20:	20676e69 	.word	0x20676e69
    ed24:	20656874 	.word	0x20656874
    ed28:	74737973 	.word	0x74737973
    ed2c:	63206d65 	.word	0x63206d65
    ed30:	6b636f6c 	.word	0x6b636f6c
    ed34:	69616620 	.word	0x69616620
    ed38:	2e64656c 	.word	0x2e64656c
    ed3c:	0000000a 	.word	0x0000000a
    ed40:	6f727245 	.word	0x6f727245
    ed44:	202d2072 	.word	0x202d2072
    ed48:	666e6f63 	.word	0x666e6f63
    ed4c:	72756769 	.word	0x72756769
    ed50:	20676e69 	.word	0x20676e69
    ed54:	20656874 	.word	0x20656874
    ed58:	74737973 	.word	0x74737973
    ed5c:	63206d65 	.word	0x63206d65
    ed60:	65686361 	.word	0x65686361
    ed64:	69616620 	.word	0x69616620
    ed68:	2e64656c 	.word	0x2e64656c
    ed6c:	0000000a 	.word	0x0000000a
    ed70:	6f727245 	.word	0x6f727245
    ed74:	202d2072 	.word	0x202d2072
    ed78:	62616e65 	.word	0x62616e65
    ed7c:	676e696c 	.word	0x676e696c
    ed80:	65687420 	.word	0x65687420
    ed84:	73797320 	.word	0x73797320
    ed88:	206d6574 	.word	0x206d6574
    ed8c:	68636163 	.word	0x68636163
    ed90:	61662065 	.word	0x61662065
    ed94:	64656c69 	.word	0x64656c69
    ed98:	00000a2e 	.word	0x00000a2e
    ed9c:	6f727245 	.word	0x6f727245
    eda0:	202d2072 	.word	0x202d2072
    eda4:	666e6f63 	.word	0x666e6f63
    eda8:	72756769 	.word	0x72756769
    edac:	20676e69 	.word	0x20676e69
    edb0:	20656874 	.word	0x20656874
    edb4:	73616c66 	.word	0x73616c66
    edb8:	656d2068 	.word	0x656d2068
    edbc:	79726f6d 	.word	0x79726f6d
    edc0:	69616620 	.word	0x69616620
    edc4:	2e64656c 	.word	0x2e64656c
    edc8:	0000000a 	.word	0x0000000a
    edcc:	6f727245 	.word	0x6f727245
    edd0:	202d2072 	.word	0x202d2072
    edd4:	666e6f63 	.word	0x666e6f63
    edd8:	72756769 	.word	0x72756769
    eddc:	20676e69 	.word	0x20676e69
    ede0:	20656874 	.word	0x20656874
    ede4:	4d415253 	.word	0x4d415253
    ede8:	69616620 	.word	0x69616620
    edec:	2e64656c 	.word	0x2e64656c
    edf0:	0000000a 	.word	0x0000000a
    edf4:	79797941 	.word	0x79797941
    edf8:	6f6f6220 	.word	0x6f6f6220
    edfc:	0000000a 	.word	0x0000000a
    ee00:	6f727245 	.word	0x6f727245
    ee04:	202d2072 	.word	0x202d2072
    ee08:	67697274 	.word	0x67697274
    ee0c:	69726567 	.word	0x69726567
    ee10:	7420676e 	.word	0x7420676e
    ee14:	41206568 	.word	0x41206568
    ee18:	20304344 	.word	0x20304344
    ee1c:	6c696166 	.word	0x6c696166
    ee20:	0a2e6465 	.word	0x0a2e6465
    ee24:	00000000 	.word	0x00000000
    ee28:	20434441 	.word	0x20434441
    ee2c:	6d617845 	.word	0x6d617845
    ee30:	20656c70 	.word	0x20656c70
    ee34:	68746977 	.word	0x68746977
    ee38:	322e3120 	.word	0x322e3120
    ee3c:	7370734d 	.word	0x7370734d
    ee40:	646e6120 	.word	0x646e6120
    ee44:	4d504c20 	.word	0x4d504c20
    ee48:	3d45444f 	.word	0x3d45444f
    ee4c:	00000a30 	.word	0x00000a30
    ee50:	65746e45 	.word	0x65746e45
    ee54:	676e6972 	.word	0x676e6972
    ee58:	65687420 	.word	0x65687420
    ee5c:	6f6f6c20 	.word	0x6f6f6c20
    ee60:	2e2e2e70 	.word	0x2e2e2e70
    ee64:	0000000a 	.word	0x0000000a
    ee68:	20414d44 	.word	0x20414d44
    ee6c:	6f727245 	.word	0x6f727245
    ee70:	636f2072 	.word	0x636f2072
    ee74:	65727563 	.word	0x65727563
    ee78:	00000a64 	.word	0x00000a64
    ee7c:	20414d44 	.word	0x20414d44
    ee80:	706d6f43 	.word	0x706d6f43
    ee84:	6574656c 	.word	0x6574656c
    ee88:	0000000a 	.word	0x0000000a
    ee8c:	202c6425 	.word	0x202c6425
    ee90:	000a6425 	.word	0x000a6425
    ee94:	6f727245 	.word	0x6f727245
    ee98:	202d2072 	.word	0x202d2072
    ee9c:	61656c63 	.word	0x61656c63
    eea0:	676e6972 	.word	0x676e6972
    eea4:	65687420 	.word	0x65687420
    eea8:	43444120 	.word	0x43444120
    eeac:	6e692030 	.word	0x6e692030
    eeb0:	72726574 	.word	0x72726574
    eeb4:	73747075 	.word	0x73747075
    eeb8:	69616620 	.word	0x69616620
    eebc:	2e64656c 	.word	0x2e64656c
    eec0:	0000000a 	.word	0x0000000a
    eec4:	0a0a0a0a 	.word	0x0a0a0a0a
    eec8:	0a0a0a0a 	.word	0x0a0a0a0a
    eecc:	0a0a0a0a 	.word	0x0a0a0a0a
    eed0:	0a0a0a0a 	.word	0x0a0a0a0a
    eed4:	00000a0a 	.word	0x00000a0a

0000eed8 <g_SF_EDGE_PIN_MIC0>:
    eed8:	00000000                                ....

0000eedc <g_SF_EDGE_PIN_MIC1>:
    eedc:	00000000                                ....

0000eee0 <g_sBspUartConfig>:
    eee0:	0001c200 00000060 00000000 00000000     ....`...........
    eef0:	00000000 00000012 00000000 00000000     ................
	...

0000ef08 <g_AM_BSP_GPIO_COM_UART_RX>:
    ef08:	00000000                                ....

0000ef0c <g_AM_BSP_GPIO_COM_UART_TX>:
    ef0c:	00000000                                ....

0000ef10 <am_hal_cachectrl_defaults>:
    ef10:	00000308                                ....

0000ef14 <g_ui8Bit76Capabilities>:
    ef14:	02800101 80010180 80800101 80808080     ................
    ef24:	80808080 80808008 01800180 80808080     ................
    ef34:	80808080 01800402 01010401 80808080     ................
    ef44:	00000101                                ....

0000ef48 <g_ui8NCEtable>:
    ef48:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ef58:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ef68:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ef78:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ef88:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ef98:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    efa8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    efb8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    efc8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    efd8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    efe8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    eff8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f008:	32221202 43231303                       .."2..#C

0000f010 <g_ui8Inpen>:
    f010:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f020:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f030:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f040:	00003130                                01..

0000f044 <g_AM_HAL_GPIO_DISABLE>:
    f044:	00000003                                ....

0000f048 <g_ui8nCEpins>:
    f048:	02070707 00080802 01020202 01010101     ................
    f058:	01010101 01010101 01010101 01010101     ................
    f068:	01010101 08010101 01010008 01010101     ................
    f078:	00000101                                ....

0000f07c <g_am_hal_mcuctrl_flash_size>:
    f07c:	00004000 00008000 00010000 00020000     .@..............
    f08c:	00040000 00080000 00100000 00200000     .............. .
	...

0000f0bc <g_am_hal_mcuctrl_sram_size>:
    f0bc:	00004000 00008000 00010000 00020000     .@..............
    f0cc:	00040000 00080000 00100000 00060000     ................
	...

0000f0fc <am_hal_pwrctrl_peripheral_control>:
	...
    f108:	00000001 00000004 00000004 00000002     ................
    f118:	00000008 00000008 00000004 00000008     ................
    f128:	00000008 00000008 00000008 00000008     ................
    f138:	00000010 00000010 00000010 00000020     ............ ...
    f148:	00000010 00000010 00000040 00000010     ........@.......
    f158:	00000010 00000080 00000004 00000004     ................
    f168:	00000100 00000004 00000004 00000200     ................
    f178:	00000020 00000020 00000400 00000004      ... ...........
    f188:	00000004 00000800 00000040 00000040     ........@...@...
    f198:	00001000 00000080 00000080 00002000     ............. ..
    f1a8:	00000100 00000100                       ........

0000f1b0 <am_hal_pwrctrl_memory_control>:
	...
    f1c4:	00000001 00000001 00000001 00001fff     ................
    f1d4:	00001fff 00000003 00000003 00000003     ................
    f1e4:	00001fff 00001fff 00000007 00000007     ................
    f1f4:	00000007 00001fff 00001fff 0000000f     ................
    f204:	0000000f 0000000f 00001fff 00001fff     ................
    f214:	0000001f 0000001f 0000001f 00001fff     ................
    f224:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    f234:	00001fff 00001fff 0000007f 0000007f     ................
    f244:	0000007f 00001fff 00001fff 000000ff     ................
    f254:	000000ff 000000ff 00001fff 00001fff     ................
    f264:	000001ff 000001ff 000001ff 00001fff     ................
    f274:	00001fff 000003ff 000003ff 000003ff     ................
    f284:	00001fff 00001fff 000007ff 000007ff     ................
    f294:	000007ff 00001fff 00001fff 00000fff     ................
    f2a4:	00000fff 00000fff 00001fff 00001fff     ................
    f2b4:	00001fff 00001fff 00001fff 00001fff     ................
    f2c4:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    f2d4:	00006000 00006000 00006000 00006000     .`...`...`...`..
    f2e4:	00006000 00006000 00006000 c0000000     .`...`...`......
    f2f4:	00000000 c0000000 c0000000 00000000     ................
    f304:	c0007fff 00007fff c0007fff c0007fff     ................
    f314:	00007fff                                ....
