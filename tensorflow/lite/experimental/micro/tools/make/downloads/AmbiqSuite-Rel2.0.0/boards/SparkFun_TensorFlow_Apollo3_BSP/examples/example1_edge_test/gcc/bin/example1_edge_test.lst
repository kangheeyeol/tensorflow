
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 ad cf 00 00 a5 cf 00 00 49 c3 00 00     ............I...
    c010:	49 c3 00 00 49 c3 00 00 49 c3 00 00 00 00 00 00     I...I...I.......
	...
    c02c:	a9 cf 00 00 a9 cf 00 00 00 00 00 00 a9 cf 00 00     ................
    c03c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c04c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c05c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c06c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 15 d0 00 00     ................
    c07c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 d1 d0 00 00     ................
    c08c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c09c:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c0ac:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c0bc:	a9 cf 00 00 a9 cf 00 00 a9 cf 00 00 a9 cf 00 00     ................
    c0cc:	a9 cf 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a4:	2100      	movs	r1, #0
{
    c1a6:	b082      	sub	sp, #8
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a8:	4608      	mov	r0, r1
    c1aa:	f001 fd25 	bl	dbf8 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ae:	4853      	ldr	r0, [pc, #332]	; (c2fc <main+0x15c>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c1b0:	4c53      	ldr	r4, [pc, #332]	; (c300 <main+0x160>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c1b2:	4f54      	ldr	r7, [pc, #336]	; (c304 <main+0x164>)
            acceleration_mg[0] =
    c1b4:	f8df 818c 	ldr.w	r8, [pc, #396]	; c344 <main+0x1a4>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b8:	f001 fcea 	bl	db90 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1bc:	f001 fd12 	bl	dbe4 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1c0:	f001 fa66 	bl	d690 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1c4:	f001 facc 	bl	d760 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1c8:	4b4f      	ldr	r3, [pc, #316]	; (c308 <main+0x168>)
    c1ca:	681d      	ldr	r5, [r3, #0]
    c1cc:	202e      	movs	r0, #46	; 0x2e
    c1ce:	4629      	mov	r1, r5
    c1d0:	f001 fe92 	bl	def8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1d4:	4629      	mov	r1, r5
    c1d6:	2025      	movs	r0, #37	; 0x25
    c1d8:	f001 fe8e 	bl	def8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1dc:	4629      	mov	r1, r5
    c1de:	202c      	movs	r0, #44	; 0x2c
    c1e0:	f001 fe8a 	bl	def8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1e4:	4629      	mov	r1, r5
    c1e6:	202f      	movs	r0, #47	; 0x2f
    c1e8:	f001 fe86 	bl	def8 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c1ec:	4b47      	ldr	r3, [pc, #284]	; (c30c <main+0x16c>)
    c1ee:	200e      	movs	r0, #14
    c1f0:	6819      	ldr	r1, [r3, #0]
    c1f2:	f001 fe81 	bl	def8 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1f6:	4b46      	ldr	r3, [pc, #280]	; (c310 <main+0x170>)
    c1f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1fc:	2220      	movs	r2, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1fe:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c200:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c206:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c20a:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c20c:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c20e:	f000 fec3 	bl	cf98 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c212:	4840      	ldr	r0, [pc, #256]	; (c314 <main+0x174>)
    c214:	f000 fea4 	bl	cf60 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c218:	4a3f      	ldr	r2, [pc, #252]	; (c318 <main+0x178>)
    c21a:	4940      	ldr	r1, [pc, #256]	; (c31c <main+0x17c>)
    c21c:	4840      	ldr	r0, [pc, #256]	; (c320 <main+0x180>)
    c21e:	f000 fe9f 	bl	cf60 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c222:	4840      	ldr	r0, [pc, #256]	; (c324 <main+0x184>)
    c224:	f000 fe9c 	bl	cf60 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c228:	483f      	ldr	r0, [pc, #252]	; (c328 <main+0x188>)
    c22a:	f001 fa0d 	bl	d648 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c22e:	f001 f899 	bl	d364 <initAccelerometer>
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c232:	4601      	mov	r1, r0
    c234:	483d      	ldr	r0, [pc, #244]	; (c32c <main+0x18c>)
    c236:	f000 fe93 	bl	cf60 <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c23a:	f000 ffad 	bl	d198 <initADC>
    enableAdcInterrupts();
    c23e:	f000 ffcb 	bl	d1d8 <enableAdcInterrupts>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c242:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c244:	2601      	movs	r6, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c246:	aa01      	add	r2, sp, #4
    c248:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c24a:	9601      	str	r6, [sp, #4]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c24c:	f001 ff94 	bl	e178 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c250:	9d01      	ldr	r5, [sp, #4]
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c252:	4669      	mov	r1, sp
    c254:	4620      	mov	r0, r4
        if( pin14Val == 0 ){ break; }
    c256:	2d00      	cmp	r5, #0
    c258:	d03a      	beq.n	c2d0 <main+0x130>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c25a:	f001 f9d1 	bl	d600 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c25e:	f89d 3000 	ldrb.w	r3, [sp]
    c262:	b9b3      	cbnz	r3, c292 <main+0xf2>
        lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);      
    c264:	4669      	mov	r1, sp
    c266:	4620      	mov	r0, r4
    c268:	f001 f8fc 	bl	d464 <lis2dh12_temp_data_ready_get>
        if (reg.byte)    
    c26c:	f89d 3000 	ldrb.w	r3, [sp]
    c270:	2b00      	cmp	r3, #0
    c272:	d0e6      	beq.n	c242 <main+0xa2>
            memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
    c274:	4d2e      	ldr	r5, [pc, #184]	; (c330 <main+0x190>)
    c276:	2300      	movs	r3, #0
    c278:	802b      	strh	r3, [r5, #0]
            lis2dh12_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
    c27a:	4629      	mov	r1, r5
    c27c:	4620      	mov	r0, r4
    c27e:	f001 f901 	bl	d484 <lis2dh12_temperature_raw_get>
            lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature.i16bit);
    c282:	f9b5 0000 	ldrsh.w	r0, [r5]
    c286:	f001 f8df 	bl	d448 <lis2dh12_from_lsb_hr_to_celsius>
            temperature_degC =
    c28a:	4b2a      	ldr	r3, [pc, #168]	; (c334 <main+0x194>)
    c28c:	ed83 0a00 	vstr	s0, [r3]
    {
    c290:	e7d7      	b.n	c242 <main+0xa2>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c292:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c294:	491b      	ldr	r1, [pc, #108]	; (c304 <main+0x164>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c296:	603b      	str	r3, [r7, #0]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c298:	4620      	mov	r0, r4
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c29a:	80bb      	strh	r3, [r7, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c29c:	f001 f9c0 	bl	d620 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c2a0:	f9b7 0000 	ldrsh.w	r0, [r7]
    c2a4:	f001 f8ca 	bl	d43c <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c2a8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
            acceleration_mg[0] =
    c2ac:	ed88 0a00 	vstr	s0, [r8]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c2b0:	f001 f8c4 	bl	d43c <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c2b4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
            acceleration_mg[1] =
    c2b8:	ed88 0a01 	vstr	s0, [r8, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c2bc:	f001 f8be 	bl	d43c <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("%d\r\n",
    c2c0:	4b1d      	ldr	r3, [pc, #116]	; (c338 <main+0x198>)
    c2c2:	481e      	ldr	r0, [pc, #120]	; (c33c <main+0x19c>)
    c2c4:	6819      	ldr	r1, [r3, #0]
            acceleration_mg[2] =
    c2c6:	ed88 0a02 	vstr	s0, [r8, #8]
            am_util_stdio_printf("%d\r\n",
    c2ca:	f000 fe49 	bl	cf60 <am_util_stdio_printf>
    c2ce:	e7c9      	b.n	c264 <main+0xc4>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c2d0:	4b1b      	ldr	r3, [pc, #108]	; (c340 <main+0x1a0>)
    c2d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c2d6:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c2d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c2dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c2e0:	2020      	movs	r0, #32
    c2e2:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c2e4:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c2e6:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c2e8:	f001 fa04 	bl	d6f4 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2ec:	4630      	mov	r0, r6
    c2ee:	f002 fe75 	bl	efdc <am_hal_sysctrl_sleep>
}
    c2f2:	4628      	mov	r0, r5
    c2f4:	b002      	add	sp, #8
    c2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2fa:	bf00      	nop
    c2fc:	0000fdc4 	.word	0x0000fdc4
    c300:	100012f8 	.word	0x100012f8
    c304:	100012dc 	.word	0x100012dc
    c308:	0000ff38 	.word	0x0000ff38
    c30c:	0000fdc8 	.word	0x0000fdc8
    c310:	40010094 	.word	0x40010094
    c314:	0000fa80 	.word	0x0000fa80
    c318:	0000fa9c 	.word	0x0000fa9c
    c31c:	0000faa8 	.word	0x0000faa8
    c320:	0000fab4 	.word	0x0000fab4
    c324:	0000facc 	.word	0x0000facc
    c328:	0000faf8 	.word	0x0000faf8
    c32c:	0000fb08 	.word	0x0000fb08
    c330:	100012e4 	.word	0x100012e4
    c334:	100012d8 	.word	0x100012d8
    c338:	1000115c 	.word	0x1000115c
    c33c:	0000fb2c 	.word	0x0000fb2c
    c340:	4001009c 	.word	0x4001009c
    c344:	100012e8 	.word	0x100012e8

0000c348 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c348:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c34a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c34e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c350:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c354:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c358:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c35c:	f000 f806 	bl	c36c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c360:	bd01      	pop	{r0, pc}
    c362:	bf00      	nop

0000c364 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c364:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c366:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c368:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c36a:	4770      	bx	lr

0000c36c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c36c:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c36e:	2300      	movs	r3, #0
{
    c370:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c372:	e9cd 3300 	strd	r3, r3, [sp]
    c376:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c37a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c37e:	4a27      	ldr	r2, [pc, #156]	; (c41c <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c380:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c382:	6813      	ldr	r3, [r2, #0]
    c384:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c386:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c388:	b2db      	uxtb	r3, r3
    c38a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c38e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c390:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c394:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c398:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c39a:	0c1b      	lsrs	r3, r3, #16
    c39c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3a0:	6913      	ldr	r3, [r2, #16]
    c3a2:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3a4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c3a8:	0792      	lsls	r2, r2, #30
{
    c3aa:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3ac:	d430      	bmi.n	c410 <am_util_faultisr_collect_data+0xa4>
    c3ae:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3b2:	4619      	mov	r1, r3
    c3b4:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3b6:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3b8:	f7ff ffd4 	bl	c364 <getStackedReg>
    c3bc:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3be:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3c0:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3c2:	f7ff ffcf 	bl	c364 <getStackedReg>
    c3c6:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3c8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3ca:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3cc:	f7ff ffca 	bl	c364 <getStackedReg>
    c3d0:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3d2:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3d4:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3d6:	f7ff ffc5 	bl	c364 <getStackedReg>
    c3da:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3dc:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3de:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3e0:	f7ff ffc0 	bl	c364 <getStackedReg>
    c3e4:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3e6:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3e8:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3ea:	f7ff ffbb 	bl	c364 <getStackedReg>
    c3ee:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3f0:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3f2:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3f4:	f7ff ffb6 	bl	c364 <getStackedReg>
    c3f8:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3fa:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3fc:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3fe:	f7ff ffb1 	bl	c364 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c402:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c404:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c406:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c408:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c40a:	f002 fc9b 	bl	ed44 <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c40e:	e7fe      	b.n	c40e <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c410:	4601      	mov	r1, r0
    c412:	2006      	movs	r0, #6
    c414:	f7ff ffa6 	bl	c364 <getStackedReg>
    c418:	4602      	mov	r2, r0
    c41a:	e7ca      	b.n	c3b2 <am_util_faultisr_collect_data+0x46>
    c41c:	e000ed28 	.word	0xe000ed28

0000c420 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c420:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c422:	460d      	mov	r5, r1
    c424:	2600      	movs	r6, #0
    c426:	ea55 0306 	orrs.w	r3, r5, r6
    c42a:	d046      	beq.n	c4ba <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c42c:	0842      	lsrs	r2, r0, #1
    c42e:	0883      	lsrs	r3, r0, #2
    c430:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c434:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c438:	18d2      	adds	r2, r2, r3
    c43a:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c43e:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c442:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c446:	0914      	lsrs	r4, r2, #4
    c448:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c44c:	1912      	adds	r2, r2, r4
    c44e:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c452:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c456:	0a14      	lsrs	r4, r2, #8
    c458:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c45c:	1912      	adds	r2, r2, r4
    c45e:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c462:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c466:	0c14      	lsrs	r4, r2, #16
    c468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c46c:	1912      	adds	r2, r2, r4
    c46e:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c472:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c476:	18d2      	adds	r2, r2, r3
    c478:	4634      	mov	r4, r6
    c47a:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c47e:	08d3      	lsrs	r3, r2, #3
    c480:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c484:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c486:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c488:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c48c:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c490:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c492:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c496:	18e4      	adds	r4, r4, r3
    c498:	eb42 0505 	adc.w	r5, r2, r5
    c49c:	1924      	adds	r4, r4, r4
    c49e:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c4a0:	1b00      	subs	r0, r0, r4
    c4a2:	eb61 0105 	sbc.w	r1, r1, r5
    c4a6:	0900      	lsrs	r0, r0, #4
    c4a8:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c4ac:	18c0      	adds	r0, r0, r3
    c4ae:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c4b2:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c4b6:	bc70      	pop	{r4, r5, r6}
    c4b8:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4ba:	0883      	lsrs	r3, r0, #2
    c4bc:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c4c0:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c4c4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c4c8:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c4cc:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4ce:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c4d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4d4:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c4d8:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c4dc:	2100      	movs	r1, #0
}
    c4de:	bc70      	pop	{r4, r5, r6}
    c4e0:	4770      	bx	lr
    c4e2:	bf00      	nop

0000c4e4 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4e8:	b08b      	sub	sp, #44	; 0x2c
    c4ea:	f10d 080c 	add.w	r8, sp, #12
    c4ee:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c4f0:	f04f 0b00 	mov.w	fp, #0
    c4f4:	e049      	b.n	c58a <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4f6:	eb12 020e 	adds.w	r2, r2, lr
    c4fa:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c4fe:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c502:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c506:	eb12 020e 	adds.w	r2, r2, lr
    c50a:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c50e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c512:	0a13      	lsrs	r3, r2, #8
    c514:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c518:	18d2      	adds	r2, r2, r3
    c51a:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c51e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c522:	0c13      	lsrs	r3, r2, #16
    c524:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c528:	18d2      	adds	r2, r2, r3
    c52a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c52e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c532:	1912      	adds	r2, r2, r4
    c534:	463b      	mov	r3, r7
    c536:	eb44 0303 	adc.w	r3, r4, r3
    c53a:	461c      	mov	r4, r3
        q64 >>= 3;
    c53c:	08d3      	lsrs	r3, r2, #3
    c53e:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c542:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c544:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c546:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c54a:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c54e:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c550:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c554:	18e4      	adds	r4, r4, r3
    c556:	eb42 0505 	adc.w	r5, r2, r5
    c55a:	1924      	adds	r4, r4, r4
    c55c:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c55e:	1b00      	subs	r0, r0, r4
    c560:	eb61 0105 	sbc.w	r1, r1, r5
    c564:	0900      	lsrs	r0, r0, #4
    c566:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c56a:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c56c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c570:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c574:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c578:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c57c:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c580:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c584:	f108 0801 	add.w	r8, r8, #1
{
    c588:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c58a:	0883      	lsrs	r3, r0, #2
    c58c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c590:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c594:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c598:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c59c:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c59e:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5a2:	1d83      	adds	r3, r0, #6
    c5a4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c5a8:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c5ac:	2700      	movs	r7, #0
    c5ae:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c5b0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5b4:	0842      	lsrs	r2, r0, #1
    c5b6:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c5ba:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c5be:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5c0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c5c4:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c5c8:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c5cc:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c5d0:	9700      	str	r7, [sp, #0]
    c5d2:	f10b 0901 	add.w	r9, fp, #1
    c5d6:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c5d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c5dc:	d18b      	bne.n	c4f6 <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c5de:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5e2:	4618      	mov	r0, r3
    c5e4:	2100      	movs	r1, #0
    } while ( ui64Val );
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d1cc      	bne.n	c584 <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c5ea:	9a01      	ldr	r2, [sp, #4]
    c5ec:	b172      	cbz	r2, c60c <uint64_to_str+0x128>
    c5ee:	ab03      	add	r3, sp, #12
    c5f0:	444b      	add	r3, r9
    c5f2:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c5f4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c5f8:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c5fc:	a903      	add	r1, sp, #12
    c5fe:	4299      	cmp	r1, r3
    c600:	d1f8      	bne.n	c5f4 <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	445b      	add	r3, fp
    c606:	461a      	mov	r2, r3
    c608:	2300      	movs	r3, #0
    c60a:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c60c:	4648      	mov	r0, r9
    c60e:	b00b      	add	sp, #44	; 0x2c
    c610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c614 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c614:	4b01      	ldr	r3, [pc, #4]	; (c61c <am_util_stdio_printf_init+0x8>)
    c616:	6018      	str	r0, [r3, #0]
}
    c618:	4770      	bx	lr
    c61a:	bf00      	nop
    c61c:	100012f4 	.word	0x100012f4

0000c620 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c624:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c626:	780b      	ldrb	r3, [r1, #0]
{
    c628:	9200      	str	r2, [sp, #0]
    c62a:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c62c:	2b00      	cmp	r3, #0
    c62e:	f000 8355 	beq.w	ccdc <am_util_stdio_vsprintf+0x6bc>
    c632:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c634:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c638:	2b25      	cmp	r3, #37	; 0x25
    c63a:	f10a 0701 	add.w	r7, sl, #1
    c63e:	d018      	beq.n	c672 <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c640:	f10b 0201 	add.w	r2, fp, #1
    c644:	2c00      	cmp	r4, #0
    c646:	f000 8092 	beq.w	c76e <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c64a:	2b0a      	cmp	r3, #10
    c64c:	f104 0101 	add.w	r1, r4, #1
    c650:	f000 808f 	beq.w	c772 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c654:	7023      	strb	r3, [r4, #0]
    c656:	4693      	mov	fp, r2
    c658:	460c      	mov	r4, r1
            }

            ++pcFmt;
    c65a:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    c65c:	f89a 3000 	ldrb.w	r3, [sl]
    c660:	2b00      	cmp	r3, #0
    c662:	d1e9      	bne.n	c638 <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c664:	b10c      	cbz	r4, c66a <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    c666:	2300      	movs	r3, #0
    c668:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    c66a:	4658      	mov	r0, fp
    c66c:	b009      	add	sp, #36	; 0x24
    c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c672:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c676:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    c678:	bf03      	ittte	eq
    c67a:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    c67e:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    c682:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    c684:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    c686:	2a2d      	cmp	r2, #45	; 0x2d
    c688:	f000 8083 	beq.w	c792 <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c68c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c690:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c692:	2909      	cmp	r1, #9
    bool bNeg = false;
    c694:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    c696:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c698:	f200 8085 	bhi.w	c7a6 <am_util_stdio_vsprintf+0x186>
    c69c:	3501      	adds	r5, #1
    c69e:	1aed      	subs	r5, r5, r3
    c6a0:	2100      	movs	r1, #0
        ui32Val *= 10;
    c6a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c6a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c6aa:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6ae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c6b2:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c6b6:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c6b8:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6bc:	d9f1      	bls.n	c6a2 <am_util_stdio_vsprintf+0x82>
    c6be:	f817 200e 	ldrb.w	r2, [r7, lr]
    c6c2:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    c6c6:	f1bc 0f00 	cmp.w	ip, #0
    c6ca:	d000      	beq.n	c6ce <am_util_stdio_vsprintf+0xae>
    c6cc:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c6ce:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c6d0:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c6d2:	f103 0a01 	add.w	sl, r3, #1
    c6d6:	f000 81ca 	beq.w	ca6e <am_util_stdio_vsprintf+0x44e>
    c6da:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    c6de:	2a2e      	cmp	r2, #46	; 0x2e
    c6e0:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    c6e4:	f000 815c 	beq.w	c9a0 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    c6e8:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    c6ea:	2a6c      	cmp	r2, #108	; 0x6c
    c6ec:	d105      	bne.n	c6fa <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c6ee:	785a      	ldrb	r2, [r3, #1]
    c6f0:	2a6c      	cmp	r2, #108	; 0x6c
    c6f2:	f000 820a 	beq.w	cb0a <am_util_stdio_vsprintf+0x4ea>
    c6f6:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    c6fa:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    c6fe:	2b32      	cmp	r3, #50	; 0x32
    c700:	f200 8141 	bhi.w	c986 <am_util_stdio_vsprintf+0x366>
    c704:	e8df f013 	tbh	[pc, r3, lsl #1]
    c708:	013f005b 	.word	0x013f005b
    c70c:	013f013f 	.word	0x013f013f
    c710:	013f013f 	.word	0x013f013f
    c714:	013f013f 	.word	0x013f013f
    c718:	013f013f 	.word	0x013f013f
    c71c:	013f013f 	.word	0x013f013f
    c720:	013f013f 	.word	0x013f013f
    c724:	013f013f 	.word	0x013f013f
    c728:	013f013f 	.word	0x013f013f
    c72c:	013f00d6 	.word	0x013f00d6
    c730:	013f013f 	.word	0x013f013f
    c734:	013f013f 	.word	0x013f013f
    c738:	013f013f 	.word	0x013f013f
    c73c:	013f013f 	.word	0x013f013f
    c740:	0051013f 	.word	0x0051013f
    c744:	013f00ed 	.word	0x013f00ed
    c748:	013f005b 	.word	0x013f005b
    c74c:	00ed013f 	.word	0x00ed013f
    c750:	013f013f 	.word	0x013f013f
    c754:	013f013f 	.word	0x013f013f
    c758:	013f013f 	.word	0x013f013f
    c75c:	013f013f 	.word	0x013f013f
    c760:	01b3013f 	.word	0x01b3013f
    c764:	00d9013f 	.word	0x00d9013f
    c768:	013f013f 	.word	0x013f013f
    c76c:	00bc      	.short	0x00bc
    c76e:	4693      	mov	fp, r2
    c770:	e773      	b.n	c65a <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c772:	48ce      	ldr	r0, [pc, #824]	; (caac <am_util_stdio_vsprintf+0x48c>)
    c774:	7800      	ldrb	r0, [r0, #0]
    c776:	2800      	cmp	r0, #0
    c778:	f43f af6c 	beq.w	c654 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c77c:	4620      	mov	r0, r4
    c77e:	230d      	movs	r3, #13
    c780:	f800 3b02 	strb.w	r3, [r0], #2
    c784:	460c      	mov	r4, r1
    c786:	f89a 3000 	ldrb.w	r3, [sl]
    c78a:	f10b 0202 	add.w	r2, fp, #2
    c78e:	4601      	mov	r1, r0
    c790:	e760      	b.n	c654 <am_util_stdio_vsprintf+0x34>
        pcStr++;
    c792:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c794:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    c798:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c79a:	2909      	cmp	r1, #9
        bNeg = true;
    c79c:	46ac      	mov	ip, r5
        pcStr++;
    c79e:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7a2:	f67f af7b 	bls.w	c69c <am_util_stdio_vsprintf+0x7c>
    c7a6:	2100      	movs	r1, #0
    c7a8:	e78d      	b.n	c6c6 <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7aa:	9a00      	ldr	r2, [sp, #0]
    c7ac:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c7ae:	b114      	cbz	r4, c7b6 <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7b0:	6812      	ldr	r2, [r2, #0]
    c7b2:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c7b6:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7ba:	9300      	str	r3, [sp, #0]
                break;
    c7bc:	e74e      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    c7be:	2c00      	cmp	r4, #0
    c7c0:	f43f af4c 	beq.w	c65c <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    c7c4:	9b00      	ldr	r3, [sp, #0]
    c7c6:	3307      	adds	r3, #7
    c7c8:	f023 0307 	bic.w	r3, r3, #7
    c7cc:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    c7d0:	9300      	str	r3, [sp, #0]
    c7d2:	f7ff fc95 	bl	c100 <__aeabi_d2f>
    c7d6:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c7da:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c7de:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c7e4:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    c7e6:	f000 8372 	beq.w	cece <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c7ea:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c7ee:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c7f2:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c7f4:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c7f6:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c7fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c7fe:	f300 8387 	bgt.w	cf10 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    c802:	f112 0f17 	cmn.w	r2, #23
    c806:	f2c0 8381 	blt.w	cf0c <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    c80a:	2a16      	cmp	r2, #22
    c80c:	f104 0601 	add.w	r6, r4, #1
    c810:	f340 82a1 	ble.w	cd56 <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    c814:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c816:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c818:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c81c:	f2c0 82e6 	blt.w	cdec <am_util_stdio_vsprintf+0x7cc>
    c820:	46a0      	mov	r8, r4
    i32FracPart = 0;
    c822:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    c824:	2800      	cmp	r0, #0
    c826:	f000 8350 	beq.w	ceca <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    c82a:	f300 82a3 	bgt.w	cd74 <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    c82e:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    c830:	232d      	movs	r3, #45	; 0x2d
    c832:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    c836:	4632      	mov	r2, r6
    c838:	17c1      	asrs	r1, r0, #31
    c83a:	f7ff fe53 	bl	c4e4 <uint64_to_str>
            *pcBuf++ = '-';
    c83e:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    c840:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    c842:	f898 3000 	ldrb.w	r3, [r8]
    c846:	b90b      	cbnz	r3, c84c <am_util_stdio_vsprintf+0x22c>
    c848:	e380      	b.n	cf4c <am_util_stdio_vsprintf+0x92c>
    c84a:	46b0      	mov	r8, r6
    c84c:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    c850:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    c854:	2b00      	cmp	r3, #0
    c856:	d1f8      	bne.n	c84a <am_util_stdio_vsprintf+0x22a>
    c858:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    c85c:	232e      	movs	r3, #46	; 0x2e
    c85e:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    c860:	2d00      	cmp	r5, #0
    c862:	f040 82e5 	bne.w	ce30 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    c866:	1cb1      	adds	r1, r6, #2
    c868:	2330      	movs	r3, #48	; 0x30
    c86a:	1b08      	subs	r0, r1, r4
    c86c:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    c86e:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c870:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    c872:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    c874:	f2c0 8310 	blt.w	ce98 <am_util_stdio_vsprintf+0x878>
    c878:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    c87a:	449b      	add	fp, r3
                    pcBuf += iVal;
    c87c:	441c      	add	r4, r3
    c87e:	e6ed      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    c880:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    c884:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c886:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c88a:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c88c:	2300      	movs	r3, #0
                if ( iWidth )
    c88e:	2900      	cmp	r1, #0
    c890:	f040 81d5 	bne.w	cc3e <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    c894:	ea52 0103 	orrs.w	r1, r2, r3
    c898:	f040 80ac 	bne.w	c9f4 <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    c89c:	2c00      	cmp	r4, #0
    c89e:	d07b      	beq.n	c998 <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    c8a0:	4623      	mov	r3, r4
    c8a2:	2230      	movs	r2, #48	; 0x30
    c8a4:	f803 2b01 	strb.w	r2, [r3], #1
    c8a8:	2001      	movs	r0, #1
    c8aa:	461c      	mov	r4, r3
        *pcBuf = 0;
    c8ac:	2200      	movs	r2, #0
    c8ae:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    c8b0:	4483      	add	fp, r0
                break;
    c8b2:	e6d3      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    c8b4:	f04f 0900 	mov.w	r9, #0
    c8b8:	e7e4      	b.n	c884 <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    c8ba:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8bc:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c8c0:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8c2:	4690      	mov	r8, r2
    c8c4:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    c8c8:	2900      	cmp	r1, #0
    c8ca:	f040 8213 	bne.w	ccf4 <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c8ce:	4640      	mov	r0, r8
    c8d0:	4649      	mov	r1, r9
    c8d2:	4622      	mov	r2, r4
    c8d4:	f7ff fe06 	bl	c4e4 <uint64_to_str>
                if ( pcBuf )
    c8d8:	2c00      	cmp	r4, #0
    c8da:	d05e      	beq.n	c99a <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    c8dc:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    c8de:	4483      	add	fp, r0
                break;
    c8e0:	e6bc      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    c8e2:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c8e4:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    c8e8:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c8ea:	4690      	mov	r8, r2
    c8ec:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    c8f0:	f1b8 0f00 	cmp.w	r8, #0
    c8f4:	f179 0300 	sbcs.w	r3, r9, #0
    c8f8:	f2c0 8178 	blt.w	cbec <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    c8fc:	2900      	cmp	r1, #0
    c8fe:	d039      	beq.n	c974 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    c900:	ea58 0309 	orrs.w	r3, r8, r9
    c904:	bf0c      	ite	eq
    c906:	2701      	moveq	r7, #1
    c908:	2700      	movne	r7, #0
    while ( ui64Val )
    c90a:	ea58 0309 	orrs.w	r3, r8, r9
    c90e:	f000 8317 	beq.w	cf40 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    c912:	2300      	movs	r3, #0
    c914:	9301      	str	r3, [sp, #4]
    c916:	4640      	mov	r0, r8
    c918:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    c91a:	f7ff fd81 	bl	c420 <divu64_10>
    while ( ui64Val )
    c91e:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    c922:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    c926:	d1f8      	bne.n	c91a <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    c928:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    c92a:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    c92c:	b123      	cbz	r3, c938 <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    c92e:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    c930:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    c934:	f000 8253 	beq.w	cdde <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    c938:	2d00      	cmp	r5, #0
    c93a:	f340 82c4 	ble.w	cec6 <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    c93e:	1e6b      	subs	r3, r5, #1
    c940:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    c942:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    c944:	463d      	mov	r5, r7
    c946:	1e58      	subs	r0, r3, #1
    c948:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    c94a:	2f00      	cmp	r7, #0
    c94c:	f000 8168 	beq.w	cc20 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    c950:	f805 6b01 	strb.w	r6, [r5], #1
    c954:	4684      	mov	ip, r0
    c956:	462f      	mov	r7, r5
    c958:	4618      	mov	r0, r3
    c95a:	460a      	mov	r2, r1
    c95c:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    c95e:	2800      	cmp	r0, #0
    c960:	d1f0      	bne.n	c944 <am_util_stdio_vsprintf+0x324>
    c962:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    c964:	2c00      	cmp	r4, #0
    c966:	f000 829f 	beq.w	cea8 <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c96a:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    c96c:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c96e:	2b00      	cmp	r3, #0
    c970:	f040 81b6 	bne.w	cce0 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c974:	4640      	mov	r0, r8
    c976:	4649      	mov	r1, r9
    c978:	4622      	mov	r2, r4
    c97a:	f7ff fdb3 	bl	c4e4 <uint64_to_str>
                if ( pcBuf )
    c97e:	2c00      	cmp	r4, #0
    c980:	d096      	beq.n	c8b0 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    c982:	4404      	add	r4, r0
    c984:	e7ab      	b.n	c8de <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    c986:	b10c      	cbz	r4, c98c <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    c988:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c98c:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c990:	e664      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    c992:	ea52 0103 	orrs.w	r1, r2, r3
    c996:	d12d      	bne.n	c9f4 <am_util_stdio_vsprintf+0x3d4>
    c998:	2001      	movs	r0, #1
                if ( pcBuf )
    c99a:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    c99c:	4483      	add	fp, r0
                break;
    c99e:	e65d      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    c9a0:	785a      	ldrb	r2, [r3, #1]
    c9a2:	2a2d      	cmp	r2, #45	; 0x2d
    c9a4:	f000 818e 	beq.w	ccc4 <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c9ac:	2b09      	cmp	r3, #9
    c9ae:	f200 8298 	bhi.w	cee2 <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    c9b2:	2000      	movs	r0, #0
    bool bNeg = false;
    c9b4:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9b6:	46d6      	mov	lr, sl
    c9b8:	4653      	mov	r3, sl
    c9ba:	3001      	adds	r0, #1
    c9bc:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    c9c0:	2700      	movs	r7, #0
        ui32Val *= 10;
    c9c2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    c9c6:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    c9ca:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c9d2:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c9d6:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c9d8:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9dc:	d9f1      	bls.n	c9c2 <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    c9de:	f1b8 0f00 	cmp.w	r8, #0
    c9e2:	d000      	beq.n	c9e6 <am_util_stdio_vsprintf+0x3c6>
    c9e4:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    c9e6:	eb0a 030c 	add.w	r3, sl, ip
    c9ea:	f81a 200c 	ldrb.w	r2, [sl, ip]
    c9ee:	f103 0a01 	add.w	sl, r3, #1
    c9f2:	e67a      	b.n	c6ea <am_util_stdio_vsprintf+0xca>
    c9f4:	f1b9 0f00 	cmp.w	r9, #0
    c9f8:	bf14      	ite	ne
    c9fa:	2627      	movne	r6, #39	; 0x27
    c9fc:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    c9fe:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    ca02:	2700      	movs	r7, #0
    ca04:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    ca06:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    ca08:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    ca0c:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    ca0e:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    ca10:	ea4f 1913 	mov.w	r9, r3, lsr #4
    ca14:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    ca18:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ca1c:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    ca20:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    ca24:	d908      	bls.n	ca38 <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    ca26:	462a      	mov	r2, r5
    ca28:	464b      	mov	r3, r9
    while ( ui64Val )
    ca2a:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    ca2e:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    ca32:	d00a      	beq.n	ca4a <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    ca34:	4627      	mov	r7, r4
    ca36:	e7e6      	b.n	ca06 <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    ca38:	462a      	mov	r2, r5
    ca3a:	464b      	mov	r3, r9
    while ( ui64Val )
    ca3c:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    ca40:	f107 0401 	add.w	r4, r7, #1
    ca44:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    ca48:	d1f4      	bne.n	ca34 <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    ca4a:	4626      	mov	r6, r4
    ca4c:	9c01      	ldr	r4, [sp, #4]
    ca4e:	4630      	mov	r0, r6
    ca50:	2c00      	cmp	r4, #0
    ca52:	d0a2      	beq.n	c99a <am_util_stdio_vsprintf+0x37a>
    ca54:	ab03      	add	r3, sp, #12
    ca56:	4433      	add	r3, r6
    ca58:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    ca5a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ca5e:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    ca62:	a903      	add	r1, sp, #12
    ca64:	428b      	cmp	r3, r1
    ca66:	d1f8      	bne.n	ca5a <am_util_stdio_vsprintf+0x43a>
    ca68:	4434      	add	r4, r6
    ca6a:	4623      	mov	r3, r4
    ca6c:	e71e      	b.n	c8ac <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    ca6e:	f8dd c000 	ldr.w	ip, [sp]
    ca72:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    ca76:	2b00      	cmp	r3, #0
    ca78:	f000 8181 	beq.w	cd7e <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    ca7c:	4618      	mov	r0, r3
    ca7e:	f810 1b01 	ldrb.w	r1, [r0], #1
    ca82:	2900      	cmp	r1, #0
    ca84:	f000 8231 	beq.w	ceea <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    ca88:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    ca8a:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    ca8e:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    ca90:	2a00      	cmp	r2, #0
    ca92:	d1fa      	bne.n	ca8a <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    ca94:	2d00      	cmp	r5, #0
    ca96:	dd02      	ble.n	ca9e <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    ca98:	42bd      	cmp	r5, r7
    ca9a:	f200 819c 	bhi.w	cdd6 <am_util_stdio_vsprintf+0x7b6>
    ca9e:	f1c3 0801 	rsb	r8, r3, #1
    caa2:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    caa6:	4622      	mov	r2, r4
    caa8:	e003      	b.n	cab2 <am_util_stdio_vsprintf+0x492>
    caaa:	bf00      	nop
    caac:	10001058 	.word	0x10001058
                        *pcBuf++ = *pcStr;
    cab0:	4622      	mov	r2, r4
    cab2:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    cab6:	2c00      	cmp	r4, #0
    cab8:	f000 80b8 	beq.w	cc2c <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    cabc:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    cabe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    cac2:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    cac4:	2900      	cmp	r1, #0
    cac6:	d1f3      	bne.n	cab0 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    cac8:	46f3      	mov	fp, lr
                if ( iWidth )
    caca:	b1dd      	cbz	r5, cb04 <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    cacc:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    cace:	42bd      	cmp	r5, r7
    cad0:	d918      	bls.n	cb04 <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    cad2:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cad4:	2d00      	cmp	r5, #0
    cad6:	f340 8217 	ble.w	cf08 <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    cada:	1e6b      	subs	r3, r5, #1
    cadc:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    cade:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cae0:	463d      	mov	r5, r7
    cae2:	1c51      	adds	r1, r2, #1
    cae4:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    cae6:	2f00      	cmp	r7, #0
    cae8:	f000 80e3 	beq.w	ccb2 <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    caec:	f805 6b01 	strb.w	r6, [r5], #1
    caf0:	4686      	mov	lr, r0
    caf2:	4618      	mov	r0, r3
    caf4:	462f      	mov	r7, r5
    caf6:	460a      	mov	r2, r1
    caf8:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    cafa:	2800      	cmp	r0, #0
    cafc:	d1f0      	bne.n	cae0 <am_util_stdio_vsprintf+0x4c0>
    cafe:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    cb00:	b104      	cbz	r4, cb04 <am_util_stdio_vsprintf+0x4e4>
    cb02:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    cb04:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    cb08:	e5a8      	b.n	c65c <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    cb0a:	789a      	ldrb	r2, [r3, #2]
    cb0c:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    cb10:	f103 0a03 	add.w	sl, r3, #3
    cb14:	2832      	cmp	r0, #50	; 0x32
    cb16:	f63f af36 	bhi.w	c986 <am_util_stdio_vsprintf+0x366>
    cb1a:	a301      	add	r3, pc, #4	; (adr r3, cb20 <am_util_stdio_vsprintf+0x500>)
    cb1c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    cb20:	0000c7bf 	.word	0x0000c7bf
    cb24:	0000c987 	.word	0x0000c987
    cb28:	0000c987 	.word	0x0000c987
    cb2c:	0000c987 	.word	0x0000c987
    cb30:	0000c987 	.word	0x0000c987
    cb34:	0000c987 	.word	0x0000c987
    cb38:	0000c987 	.word	0x0000c987
    cb3c:	0000c987 	.word	0x0000c987
    cb40:	0000c987 	.word	0x0000c987
    cb44:	0000c987 	.word	0x0000c987
    cb48:	0000c987 	.word	0x0000c987
    cb4c:	0000c987 	.word	0x0000c987
    cb50:	0000c987 	.word	0x0000c987
    cb54:	0000c987 	.word	0x0000c987
    cb58:	0000c987 	.word	0x0000c987
    cb5c:	0000c987 	.word	0x0000c987
    cb60:	0000c987 	.word	0x0000c987
    cb64:	0000c987 	.word	0x0000c987
    cb68:	0000cdd1 	.word	0x0000cdd1
    cb6c:	0000c987 	.word	0x0000c987
    cb70:	0000c987 	.word	0x0000c987
    cb74:	0000c987 	.word	0x0000c987
    cb78:	0000c987 	.word	0x0000c987
    cb7c:	0000c987 	.word	0x0000c987
    cb80:	0000c987 	.word	0x0000c987
    cb84:	0000c987 	.word	0x0000c987
    cb88:	0000c987 	.word	0x0000c987
    cb8c:	0000c987 	.word	0x0000c987
    cb90:	0000c987 	.word	0x0000c987
    cb94:	0000c7ab 	.word	0x0000c7ab
    cb98:	0000cc11 	.word	0x0000cc11
    cb9c:	0000c987 	.word	0x0000c987
    cba0:	0000c7bf 	.word	0x0000c7bf
    cba4:	0000c987 	.word	0x0000c987
    cba8:	0000c987 	.word	0x0000c987
    cbac:	0000cc11 	.word	0x0000cc11
    cbb0:	0000c987 	.word	0x0000c987
    cbb4:	0000c987 	.word	0x0000c987
    cbb8:	0000c987 	.word	0x0000c987
    cbbc:	0000c987 	.word	0x0000c987
    cbc0:	0000c987 	.word	0x0000c987
    cbc4:	0000c987 	.word	0x0000c987
    cbc8:	0000c987 	.word	0x0000c987
    cbcc:	0000c987 	.word	0x0000c987
    cbd0:	0000c987 	.word	0x0000c987
    cbd4:	0000ca6f 	.word	0x0000ca6f
    cbd8:	0000c987 	.word	0x0000c987
    cbdc:	0000cc01 	.word	0x0000cc01
    cbe0:	0000c987 	.word	0x0000c987
    cbe4:	0000c987 	.word	0x0000c987
    cbe8:	0000cdbb 	.word	0x0000cdbb
                    ui64Val = -i64Val;          // Get absolute value
    cbec:	f1d8 0800 	rsbs	r8, r8, #0
    cbf0:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cbf4:	2900      	cmp	r1, #0
    cbf6:	d076      	beq.n	cce6 <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cbf8:	2301      	movs	r3, #1
    cbfa:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cbfc:	2700      	movs	r7, #0
    cbfe:	e68a      	b.n	c916 <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc00:	9b00      	ldr	r3, [sp, #0]
    cc02:	3307      	adds	r3, #7
    cc04:	f023 0307 	bic.w	r3, r3, #7
    cc08:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cc0c:	9300      	str	r3, [sp, #0]
    cc0e:	e65b      	b.n	c8c8 <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc10:	9b00      	ldr	r3, [sp, #0]
    cc12:	3307      	adds	r3, #7
    cc14:	f023 0307 	bic.w	r3, r3, #7
    cc18:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cc1c:	9300      	str	r3, [sp, #0]
    cc1e:	e667      	b.n	c8f0 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cc20:	2b00      	cmp	r3, #0
    cc22:	f000 815b 	beq.w	cedc <am_util_stdio_vsprintf+0x8bc>
    cc26:	3b02      	subs	r3, #2
    cc28:	3202      	adds	r2, #2
    cc2a:	e698      	b.n	c95e <am_util_stdio_vsprintf+0x33e>
    cc2c:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cc30:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cc32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cc36:	2900      	cmp	r1, #0
    cc38:	d1fa      	bne.n	cc30 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cc3a:	4683      	mov	fp, r0
    cc3c:	e745      	b.n	caca <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cc3e:	ea52 0103 	orrs.w	r1, r2, r3
    cc42:	bf0c      	ite	eq
    cc44:	f04f 0c01 	moveq.w	ip, #1
    cc48:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    cc4c:	ea52 0103 	orrs.w	r1, r2, r3
    cc50:	d00d      	beq.n	cc6e <am_util_stdio_vsprintf+0x64e>
    cc52:	4610      	mov	r0, r2
    cc54:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cc56:	0907      	lsrs	r7, r0, #4
    cc58:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    cc5c:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cc60:	4638      	mov	r0, r7
    cc62:	4671      	mov	r1, lr
    while ( ui64Val )
    cc64:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    cc68:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    cc6c:	d1f3      	bne.n	cc56 <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    cc6e:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    cc72:	2900      	cmp	r1, #0
    cc74:	f340 8125 	ble.w	cec2 <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    cc78:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    cc7a:	2000      	movs	r0, #0
    cc7c:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    cc7e:	46ac      	mov	ip, r5
    cc80:	1e4f      	subs	r7, r1, #1
    cc82:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    cc86:	b175      	cbz	r5, cca6 <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    cc88:	f80c 6b01 	strb.w	r6, [ip], #1
    cc8c:	46b8      	mov	r8, r7
    cc8e:	4665      	mov	r5, ip
    cc90:	460f      	mov	r7, r1
    cc92:	4670      	mov	r0, lr
    cc94:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    cc96:	2f00      	cmp	r7, #0
    cc98:	d1f1      	bne.n	cc7e <am_util_stdio_vsprintf+0x65e>
    cc9a:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cc9c:	2c00      	cmp	r4, #0
    cc9e:	f43f ae78 	beq.w	c992 <am_util_stdio_vsprintf+0x372>
    cca2:	4404      	add	r4, r0
                    iWidth = 0;
    cca4:	e5f6      	b.n	c894 <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    cca6:	2900      	cmp	r1, #0
    cca8:	f000 8115 	beq.w	ced6 <am_util_stdio_vsprintf+0x8b6>
    ccac:	3902      	subs	r1, #2
    ccae:	3002      	adds	r0, #2
    ccb0:	e7f1      	b.n	cc96 <am_util_stdio_vsprintf+0x676>
    ccb2:	2b00      	cmp	r3, #0
    ccb4:	f000 8136 	beq.w	cf24 <am_util_stdio_vsprintf+0x904>
    ccb8:	3b02      	subs	r3, #2
    ccba:	3202      	adds	r2, #2
    ccbc:	2800      	cmp	r0, #0
    ccbe:	f47f af0f 	bne.w	cae0 <am_util_stdio_vsprintf+0x4c0>
    ccc2:	e71c      	b.n	cafe <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    ccc4:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccc6:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ccca:	2809      	cmp	r0, #9
        pcStr++;
    cccc:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccd0:	f200 8124 	bhi.w	cf1c <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    ccd4:	2001      	movs	r0, #1
        bNeg = true;
    ccd6:	4680      	mov	r8, r0
        pcStr++;
    ccd8:	469e      	mov	lr, r3
    ccda:	e66e      	b.n	c9ba <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ccdc:	469b      	mov	fp, r3
    ccde:	e4c1      	b.n	c664 <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cce0:	2e20      	cmp	r6, #32
    cce2:	f47f ae47 	bne.w	c974 <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    cce6:	b114      	cbz	r4, ccee <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    cce8:	232d      	movs	r3, #45	; 0x2d
    ccea:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    ccee:	f10b 0b01 	add.w	fp, fp, #1
    ccf2:	e63f      	b.n	c974 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    ccf4:	ea58 0309 	orrs.w	r3, r8, r9
    ccf8:	bf0c      	ite	eq
    ccfa:	2701      	moveq	r7, #1
    ccfc:	2700      	movne	r7, #0
    while ( ui64Val )
    ccfe:	ea58 0309 	orrs.w	r3, r8, r9
    cd02:	d008      	beq.n	cd16 <am_util_stdio_vsprintf+0x6f6>
    cd04:	4640      	mov	r0, r8
    cd06:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    cd08:	f7ff fb8a 	bl	c420 <divu64_10>
    while ( ui64Val )
    cd0c:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cd10:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    cd14:	d1f8      	bne.n	cd08 <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    cd16:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    cd18:	2b00      	cmp	r3, #0
    cd1a:	f340 80f3 	ble.w	cf04 <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    cd1e:	3b01      	subs	r3, #1
    cd20:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    cd22:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cd24:	4628      	mov	r0, r5
    cd26:	1c51      	adds	r1, r2, #1
    cd28:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    cd2a:	b16d      	cbz	r5, cd48 <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    cd2c:	f800 6b01 	strb.w	r6, [r0], #1
    cd30:	460a      	mov	r2, r1
    cd32:	4605      	mov	r5, r0
    cd34:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cd36:	463b      	mov	r3, r7
    cd38:	2900      	cmp	r1, #0
    cd3a:	d1f3      	bne.n	cd24 <am_util_stdio_vsprintf+0x704>
    cd3c:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    cd3e:	2c00      	cmp	r4, #0
    cd40:	f000 80da 	beq.w	cef8 <am_util_stdio_vsprintf+0x8d8>
    cd44:	4414      	add	r4, r2
                    iWidth = 0;
    cd46:	e5c2      	b.n	c8ce <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    cd48:	2b00      	cmp	r3, #0
    cd4a:	f000 80ee 	beq.w	cf2a <am_util_stdio_vsprintf+0x90a>
    cd4e:	4639      	mov	r1, r7
    cd50:	3202      	adds	r2, #2
    cd52:	1e9f      	subs	r7, r3, #2
    cd54:	e7ef      	b.n	cd36 <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    cd56:	2a00      	cmp	r2, #0
    cd58:	db50      	blt.n	cdfc <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cd5a:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    cd5e:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    cd62:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    cd66:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cd68:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    cd6c:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    cd70:	db3d      	blt.n	cdee <am_util_stdio_vsprintf+0x7ce>
    cd72:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    cd74:	4642      	mov	r2, r8
    cd76:	17c1      	asrs	r1, r0, #31
    cd78:	f7ff fbb4 	bl	c4e4 <uint64_to_str>
    cd7c:	e561      	b.n	c842 <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    cd7e:	2d00      	cmp	r5, #0
    cd80:	dd49      	ble.n	ce16 <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    cd82:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    cd84:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    cd86:	2200      	movs	r2, #0
    cd88:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    cd8a:	4608      	mov	r0, r1
    cd8c:	f105 3eff 	add.w	lr, r5, #4294967295
    cd90:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    cd94:	2900      	cmp	r1, #0
    cd96:	d044      	beq.n	ce22 <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    cd98:	f800 6b01 	strb.w	r6, [r0], #1
    cd9c:	4642      	mov	r2, r8
    cd9e:	4601      	mov	r1, r0
    cda0:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    cda2:	4675      	mov	r5, lr
    cda4:	2800      	cmp	r0, #0
    cda6:	d1f0      	bne.n	cd8a <am_util_stdio_vsprintf+0x76a>
    cda8:	7819      	ldrb	r1, [r3, #0]
    cdaa:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    cdac:	b104      	cbz	r4, cdb0 <am_util_stdio_vsprintf+0x790>
    cdae:	4414      	add	r4, r2
                        iWidth = 0;
    cdb0:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    cdb2:	2900      	cmp	r1, #0
    cdb4:	f47f ae73 	bne.w	ca9e <am_util_stdio_vsprintf+0x47e>
    cdb8:	e6a4      	b.n	cb04 <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    cdba:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdbe:	9b00      	ldr	r3, [sp, #0]
    cdc0:	3307      	adds	r3, #7
    cdc2:	f023 0307 	bic.w	r3, r3, #7
    cdc6:	4618      	mov	r0, r3
    cdc8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    cdcc:	9000      	str	r0, [sp, #0]
    cdce:	e55e      	b.n	c88e <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    cdd0:	f04f 0900 	mov.w	r9, #0
    cdd4:	e7f3      	b.n	cdbe <am_util_stdio_vsprintf+0x79e>
    cdd6:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cdd8:	2d00      	cmp	r5, #0
    cdda:	dde7      	ble.n	cdac <am_util_stdio_vsprintf+0x78c>
    cddc:	e7d2      	b.n	cd84 <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    cdde:	b114      	cbz	r4, cde6 <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    cde0:	232d      	movs	r3, #45	; 0x2d
    cde2:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    cde6:	f10b 0b01 	add.w	fp, fp, #1
    cdea:	e5a5      	b.n	c938 <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    cdec:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    cdee:	4623      	mov	r3, r4
    cdf0:	222d      	movs	r2, #45	; 0x2d
    cdf2:	f803 2b02 	strb.w	r2, [r3], #2
    cdf6:	46b0      	mov	r8, r6
    cdf8:	461e      	mov	r6, r3
    cdfa:	e513      	b.n	c824 <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cdfc:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    cdfe:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ce00:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    ce04:	f104 0202 	add.w	r2, r4, #2
    ce08:	f2c0 8092 	blt.w	cf30 <am_util_stdio_vsprintf+0x910>
    ce0c:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    ce0e:	2330      	movs	r3, #48	; 0x30
    ce10:	f888 3000 	strb.w	r3, [r8]
    ce14:	e522      	b.n	c85c <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    ce16:	7819      	ldrb	r1, [r3, #0]
    ce18:	b909      	cbnz	r1, ce1e <am_util_stdio_vsprintf+0x7fe>
    ce1a:	460f      	mov	r7, r1
    ce1c:	e655      	b.n	caca <am_util_stdio_vsprintf+0x4aa>
    ce1e:	461f      	mov	r7, r3
    ce20:	e63d      	b.n	ca9e <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    ce22:	2d00      	cmp	r5, #0
    ce24:	d076      	beq.n	cf14 <am_util_stdio_vsprintf+0x8f4>
    ce26:	4670      	mov	r0, lr
    ce28:	3202      	adds	r2, #2
    ce2a:	f1a5 0e02 	sub.w	lr, r5, #2
    ce2e:	e7b8      	b.n	cda2 <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce30:	1b10      	subs	r0, r2, r4
    ce32:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ce36:	429f      	cmp	r7, r3
    ce38:	bfa8      	it	ge
    ce3a:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    ce3c:	2f00      	cmp	r7, #0
    ce3e:	f340 8083 	ble.w	cf48 <am_util_stdio_vsprintf+0x928>
    ce42:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    ce44:	4610      	mov	r0, r2
            i32FracPart *= 10;
    ce46:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ce4a:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ce4c:	162b      	asrs	r3, r5, #24
    ce4e:	3330      	adds	r3, #48	; 0x30
    ce50:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    ce54:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    ce56:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    ce5a:	d1f4      	bne.n	ce46 <am_util_stdio_vsprintf+0x826>
    ce5c:	3f01      	subs	r7, #1
    ce5e:	19d6      	adds	r6, r2, r7
    ce60:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ce62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ce66:	f345 52c7 	sbfx	r2, r5, #23, #8
    ce6a:	2a04      	cmp	r2, #4
    ce6c:	f77f acff 	ble.w	c86e <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    ce70:	42a6      	cmp	r6, r4
    ce72:	f4ff acfc 	bcc.w	c86e <am_util_stdio_vsprintf+0x24e>
    ce76:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    ce78:	2630      	movs	r6, #48	; 0x30
    ce7a:	e003      	b.n	ce84 <am_util_stdio_vsprintf+0x864>
    ce7c:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    ce7e:	429c      	cmp	r4, r3
    ce80:	f63f acf5 	bhi.w	c86e <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    ce84:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    ce86:	f813 2901 	ldrb.w	r2, [r3], #-1
    ce8a:	2a2e      	cmp	r2, #46	; 0x2e
    ce8c:	d0f7      	beq.n	ce7e <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    ce8e:	2a39      	cmp	r2, #57	; 0x39
    ce90:	d0f4      	beq.n	ce7c <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    ce92:	3201      	adds	r2, #1
    ce94:	702a      	strb	r2, [r5, #0]
                    break;
    ce96:	e4ea      	b.n	c86e <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    ce98:	1c43      	adds	r3, r0, #1
    ce9a:	d037      	beq.n	cf0c <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    ce9c:	3002      	adds	r0, #2
    ce9e:	d037      	beq.n	cf10 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cea0:	4b2c      	ldr	r3, [pc, #176]	; (cf54 <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cea2:	6023      	str	r3, [r4, #0]
    cea4:	2303      	movs	r3, #3
    cea6:	e4e8      	b.n	c87a <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cea8:	9b01      	ldr	r3, [sp, #4]
    ceaa:	b113      	cbz	r3, ceb2 <am_util_stdio_vsprintf+0x892>
    ceac:	2e20      	cmp	r6, #32
    ceae:	f43f af1e 	beq.w	ccee <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ceb2:	4640      	mov	r0, r8
    ceb4:	4649      	mov	r1, r9
    ceb6:	4622      	mov	r2, r4
    ceb8:	f7ff fb14 	bl	c4e4 <uint64_to_str>
                ui32CharCnt += iVal;
    cebc:	4483      	add	fp, r0
                break;
    cebe:	f7ff bbcd 	b.w	c65c <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    cec2:	2000      	movs	r0, #0
    cec4:	e6ea      	b.n	cc9c <am_util_stdio_vsprintf+0x67c>
    cec6:	2200      	movs	r2, #0
    cec8:	e54c      	b.n	c964 <am_util_stdio_vsprintf+0x344>
    ceca:	1c72      	adds	r2, r6, #1
    cecc:	e79f      	b.n	ce0e <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cece:	4b22      	ldr	r3, [pc, #136]	; (cf58 <am_util_stdio_vsprintf+0x938>)
    ced0:	6023      	str	r3, [r4, #0]
    ced2:	2303      	movs	r3, #3
    ced4:	e4d1      	b.n	c87a <am_util_stdio_vsprintf+0x25a>
    ced6:	4670      	mov	r0, lr
    ced8:	44f3      	add	fp, lr
    ceda:	e6df      	b.n	cc9c <am_util_stdio_vsprintf+0x67c>
    cedc:	460a      	mov	r2, r1
    cede:	448b      	add	fp, r1
    cee0:	e540      	b.n	c964 <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    cee2:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cee6:	4667      	mov	r7, ip
    cee8:	e57d      	b.n	c9e6 <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    ceea:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    ceec:	bfc8      	it	gt
    ceee:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    cef0:	f73f af48 	bgt.w	cd84 <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    cef4:	460f      	mov	r7, r1
    cef6:	e5e8      	b.n	caca <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cef8:	4622      	mov	r2, r4
    cefa:	4640      	mov	r0, r8
    cefc:	4649      	mov	r1, r9
    cefe:	f7ff faf1 	bl	c4e4 <uint64_to_str>
                if ( pcBuf )
    cf02:	e54a      	b.n	c99a <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    cf04:	2200      	movs	r2, #0
    cf06:	e71a      	b.n	cd3e <am_util_stdio_vsprintf+0x71e>
    cf08:	2200      	movs	r2, #0
    cf0a:	e5f9      	b.n	cb00 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cf0c:	4b12      	ldr	r3, [pc, #72]	; (cf58 <am_util_stdio_vsprintf+0x938>)
    cf0e:	e7c8      	b.n	cea2 <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cf10:	4b12      	ldr	r3, [pc, #72]	; (cf5c <am_util_stdio_vsprintf+0x93c>)
    cf12:	e7c6      	b.n	cea2 <am_util_stdio_vsprintf+0x882>
    cf14:	4642      	mov	r2, r8
    cf16:	44c3      	add	fp, r8
    cf18:	7819      	ldrb	r1, [r3, #0]
    cf1a:	e747      	b.n	cdac <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    cf1c:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf20:	2700      	movs	r7, #0
    cf22:	e55f      	b.n	c9e4 <am_util_stdio_vsprintf+0x3c4>
    cf24:	460a      	mov	r2, r1
    cf26:	448b      	add	fp, r1
    cf28:	e5ea      	b.n	cb00 <am_util_stdio_vsprintf+0x4e0>
    cf2a:	460a      	mov	r2, r1
    cf2c:	448b      	add	fp, r1
    cf2e:	e706      	b.n	cd3e <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    cf30:	4623      	mov	r3, r4
    cf32:	212d      	movs	r1, #45	; 0x2d
    cf34:	f803 1b03 	strb.w	r1, [r3], #3
    cf38:	46b0      	mov	r8, r6
    cf3a:	4616      	mov	r6, r2
    cf3c:	461a      	mov	r2, r3
    cf3e:	e766      	b.n	ce0e <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    cf40:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    cf42:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    cf44:	9301      	str	r3, [sp, #4]
    cf46:	e4f7      	b.n	c938 <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    cf48:	4611      	mov	r1, r2
    cf4a:	e78a      	b.n	ce62 <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    cf4c:	4632      	mov	r2, r6
    cf4e:	4646      	mov	r6, r8
    cf50:	e484      	b.n	c85c <am_util_stdio_vsprintf+0x23c>
    cf52:	bf00      	nop
    cf54:	003f2e3f 	.word	0x003f2e3f
    cf58:	00302e30 	.word	0x00302e30
    cf5c:	00232e23 	.word	0x00232e23

0000cf60 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    cf60:	b40f      	push	{r0, r1, r2, r3}
    cf62:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    cf64:	4d0a      	ldr	r5, [pc, #40]	; (cf90 <am_util_stdio_printf+0x30>)
    cf66:	682c      	ldr	r4, [r5, #0]
{
    cf68:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    cf6a:	b154      	cbz	r4, cf82 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    cf6c:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf6e:	461a      	mov	r2, r3
    cf70:	9906      	ldr	r1, [sp, #24]
    cf72:	4808      	ldr	r0, [pc, #32]	; (cf94 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    cf74:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf76:	f7ff fb53 	bl	c620 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    cf7a:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf7c:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    cf7e:	4805      	ldr	r0, [pc, #20]	; (cf94 <am_util_stdio_printf+0x34>)
    cf80:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    cf82:	4620      	mov	r0, r4
    cf84:	b003      	add	sp, #12
    cf86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cf8a:	b004      	add	sp, #16
    cf8c:	4770      	bx	lr
    cf8e:	bf00      	nop
    cf90:	100012f4 	.word	0x100012f4
    cf94:	1000105c 	.word	0x1000105c

0000cf98 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    cf98:	4801      	ldr	r0, [pc, #4]	; (cfa0 <am_util_stdio_terminal_clear+0x8>)
    cf9a:	f7ff bfe1 	b.w	cf60 <am_util_stdio_printf>
    cf9e:	bf00      	nop
    cfa0:	0000fb34 	.word	0x0000fb34

0000cfa4 <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cfa4:	e7fe      	b.n	cfa4 <NMI_Handler>
    cfa6:	bf00      	nop

0000cfa8 <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cfa8:	e7fe      	b.n	cfa8 <DebugMon_Handler>
    cfaa:	bf00      	nop

0000cfac <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    cfac:	4811      	ldr	r0, [pc, #68]	; (cff4 <zero_loop+0x12>)
    cfae:	4912      	ldr	r1, [pc, #72]	; (cff8 <zero_loop+0x16>)
    cfb0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    cfb2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    cfb6:	4811      	ldr	r0, [pc, #68]	; (cffc <zero_loop+0x1a>)
    cfb8:	6801      	ldr	r1, [r0, #0]
    cfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cfbe:	6001      	str	r1, [r0, #0]
    cfc0:	f3bf 8f4f 	dsb	sy
    cfc4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    cfc8:	480d      	ldr	r0, [pc, #52]	; (d000 <zero_loop+0x1e>)
    cfca:	490e      	ldr	r1, [pc, #56]	; (d004 <zero_loop+0x22>)
    cfcc:	4a0e      	ldr	r2, [pc, #56]	; (d008 <zero_loop+0x26>)

0000cfce <copy_loop>:
    cfce:	f850 3b04 	ldr.w	r3, [r0], #4
    cfd2:	f841 3b04 	str.w	r3, [r1], #4
    cfd6:	4291      	cmp	r1, r2
    cfd8:	dbf9      	blt.n	cfce <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    cfda:	480c      	ldr	r0, [pc, #48]	; (d00c <zero_loop+0x2a>)
    cfdc:	490c      	ldr	r1, [pc, #48]	; (d010 <zero_loop+0x2e>)
    cfde:	f04f 0200 	mov.w	r2, #0

0000cfe2 <zero_loop>:
    cfe2:	4288      	cmp	r0, r1
    cfe4:	bfb8      	it	lt
    cfe6:	f840 2b04 	strlt.w	r2, [r0], #4
    cfea:	dbfa      	blt.n	cfe2 <zero_loop>
    main();
    cfec:	f7ff f8d8 	bl	c1a0 <main>
    __asm("    bkpt     ");
    cff0:	be00      	bkpt	0x0000
}
    cff2:	0000      	.short	0x0000
    cff4:	e000ed08 	.word	0xe000ed08
    cff8:	0000c000 	.word	0x0000c000
    cffc:	e000ed88 	.word	0xe000ed88
    d000:	000101b0 	.word	0x000101b0
    d004:	10001000 	.word	0x10001000
    d008:	10001058 	.word	0x10001058
    d00c:	10001058 	.word	0x10001058
    d010:	10004bbc 	.word	0x10004bbc

0000d014 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d014:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d016:	2001      	movs	r0, #1
{
    d018:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d01a:	f000 ff2d 	bl	de78 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d01e:	4925      	ldr	r1, [pc, #148]	; (d0b4 <am_ctimer_isr+0xa0>)
    d020:	2000      	movs	r0, #0
    d022:	f000 fbcb 	bl	d7bc <am_hal_adc_initialize>
    d026:	bb68      	cbnz	r0, d084 <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d028:	4c22      	ldr	r4, [pc, #136]	; (d0b4 <am_ctimer_isr+0xa0>)
    d02a:	2200      	movs	r2, #0
    d02c:	6820      	ldr	r0, [r4, #0]
    d02e:	4611      	mov	r1, r2
    d030:	f000 fd4a 	bl	dac8 <am_hal_adc_power_control>
    d034:	2800      	cmp	r0, #0
    d036:	d139      	bne.n	d0ac <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d038:	4b1f      	ldr	r3, [pc, #124]	; (d0b8 <am_ctimer_isr+0xa4>)
    d03a:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d03c:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d03e:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d040:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d042:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d046:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d048:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d04c:	f000 fbf8 	bl	d840 <am_hal_adc_configure>
    d050:	bb40      	cbnz	r0, d0a4 <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d052:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d056:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d058:	466a      	mov	r2, sp
    d05a:	2100      	movs	r1, #0
    d05c:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d05e:	9500      	str	r5, [sp, #0]
    ADCSlotConfig.bEnabled        = true;
    d060:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d064:	f000 fc24 	bl	d8b0 <am_hal_adc_configure_slot>
    d068:	b9c0      	cbnz	r0, d09c <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d06a:	2101      	movs	r1, #1
    d06c:	6820      	ldr	r0, [r4, #0]
    d06e:	f000 fc8d 	bl	d98c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d072:	6820      	ldr	r0, [r4, #0]
    d074:	f000 fc52 	bl	d91c <am_hal_adc_enable>
    d078:	b940      	cbnz	r0, d08c <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d07a:	6820      	ldr	r0, [r4, #0]
    d07c:	f000 fd12 	bl	daa4 <am_hal_adc_sw_trigger>
}
    d080:	b005      	add	sp, #20
    d082:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d084:	480d      	ldr	r0, [pc, #52]	; (d0bc <am_ctimer_isr+0xa8>)
    d086:	f7ff ff6b 	bl	cf60 <am_util_stdio_printf>
    d08a:	e7cd      	b.n	d028 <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d08c:	480c      	ldr	r0, [pc, #48]	; (d0c0 <am_ctimer_isr+0xac>)
    d08e:	f7ff ff67 	bl	cf60 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d092:	6820      	ldr	r0, [r4, #0]
    d094:	f000 fd06 	bl	daa4 <am_hal_adc_sw_trigger>
}
    d098:	b005      	add	sp, #20
    d09a:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d09c:	4809      	ldr	r0, [pc, #36]	; (d0c4 <am_ctimer_isr+0xb0>)
    d09e:	f7ff ff5f 	bl	cf60 <am_util_stdio_printf>
    d0a2:	e7e2      	b.n	d06a <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d0a4:	4808      	ldr	r0, [pc, #32]	; (d0c8 <am_ctimer_isr+0xb4>)
    d0a6:	f7ff ff5b 	bl	cf60 <am_util_stdio_printf>
    d0aa:	e7d2      	b.n	d052 <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d0ac:	4807      	ldr	r0, [pc, #28]	; (d0cc <am_ctimer_isr+0xb8>)
    d0ae:	f7ff ff57 	bl	cf60 <am_util_stdio_printf>
    d0b2:	e7c1      	b.n	d038 <am_ctimer_isr+0x24>
    d0b4:	10001160 	.word	0x10001160
    d0b8:	00070001 	.word	0x00070001
    d0bc:	0000fc3c 	.word	0x0000fc3c
    d0c0:	0000fcdc 	.word	0x0000fcdc
    d0c4:	0000fcb4 	.word	0x0000fcb4
    d0c8:	0000fc90 	.word	0x0000fc90
    d0cc:	0000fc70 	.word	0x0000fc70

0000d0d0 <am_adc_isr>:
{
    d0d0:	b530      	push	{r4, r5, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d0d2:	4c29      	ldr	r4, [pc, #164]	; (d178 <am_adc_isr+0xa8>)
{
    d0d4:	b085      	sub	sp, #20
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d0d6:	2200      	movs	r2, #0
    d0d8:	6820      	ldr	r0, [r4, #0]
    d0da:	4669      	mov	r1, sp
    d0dc:	f000 fc6c 	bl	d9b8 <am_hal_adc_interrupt_status>
    d0e0:	b9e0      	cbnz	r0, d11c <am_adc_isr+0x4c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d0e2:	9900      	ldr	r1, [sp, #0]
    d0e4:	6820      	ldr	r0, [r4, #0]
    d0e6:	f000 fc85 	bl	d9f4 <am_hal_adc_interrupt_clear>
    d0ea:	bb00      	cbnz	r0, d12e <am_adc_isr+0x5e>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d0ec:	9b00      	ldr	r3, [sp, #0]
    d0ee:	6820      	ldr	r0, [r4, #0]
    d0f0:	07db      	lsls	r3, r3, #31
    d0f2:	d423      	bmi.n	d13c <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d0f4:	4b21      	ldr	r3, [pc, #132]	; (d17c <am_adc_isr+0xac>)
    d0f6:	9a02      	ldr	r2, [sp, #8]
    d0f8:	601a      	str	r2, [r3, #0]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d0fa:	f000 fc2f 	bl	d95c <am_hal_adc_disable>
    d0fe:	2800      	cmp	r0, #0
    d100:	d132      	bne.n	d168 <am_adc_isr+0x98>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d102:	200a      	movs	r0, #10
    d104:	f001 fede 	bl	eec4 <am_hal_pwrctrl_periph_disable>
    d108:	bb50      	cbnz	r0, d160 <am_adc_isr+0x90>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d10a:	6820      	ldr	r0, [r4, #0]
    d10c:	f000 fb78 	bl	d800 <am_hal_adc_deinitialize>
    d110:	b9f0      	cbnz	r0, d150 <am_adc_isr+0x80>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d112:	6820      	ldr	r0, [r4, #0]
    d114:	f000 fcc6 	bl	daa4 <am_hal_adc_sw_trigger>
}
    d118:	b005      	add	sp, #20
    d11a:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d11c:	4818      	ldr	r0, [pc, #96]	; (d180 <am_adc_isr+0xb0>)
    d11e:	f7ff ff1f 	bl	cf60 <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d122:	9900      	ldr	r1, [sp, #0]
    d124:	6820      	ldr	r0, [r4, #0]
    d126:	f000 fc65 	bl	d9f4 <am_hal_adc_interrupt_clear>
    d12a:	2800      	cmp	r0, #0
    d12c:	d0de      	beq.n	d0ec <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d12e:	4815      	ldr	r0, [pc, #84]	; (d184 <am_adc_isr+0xb4>)
    d130:	f7ff ff16 	bl	cf60 <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d134:	9b00      	ldr	r3, [sp, #0]
    d136:	6820      	ldr	r0, [r4, #0]
    d138:	07db      	lsls	r3, r3, #31
    d13a:	d5db      	bpl.n	d0f4 <am_adc_isr+0x24>
        uint32_t    ui32NumSamples = 1;
    d13c:	2501      	movs	r5, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d13e:	ab02      	add	r3, sp, #8
    d140:	aa01      	add	r2, sp, #4
    d142:	2100      	movs	r1, #0
        uint32_t    ui32NumSamples = 1;
    d144:	9501      	str	r5, [sp, #4]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d146:	f000 fc67 	bl	da18 <am_hal_adc_samples_read>
    d14a:	b988      	cbnz	r0, d170 <am_adc_isr+0xa0>
    d14c:	6820      	ldr	r0, [r4, #0]
    d14e:	e7d1      	b.n	d0f4 <am_adc_isr+0x24>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d150:	480d      	ldr	r0, [pc, #52]	; (d188 <am_adc_isr+0xb8>)
    d152:	f7ff ff05 	bl	cf60 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d156:	6820      	ldr	r0, [r4, #0]
    d158:	f000 fca4 	bl	daa4 <am_hal_adc_sw_trigger>
}
    d15c:	b005      	add	sp, #20
    d15e:	bd30      	pop	{r4, r5, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d160:	480a      	ldr	r0, [pc, #40]	; (d18c <am_adc_isr+0xbc>)
    d162:	f7ff fefd 	bl	cf60 <am_util_stdio_printf>
    d166:	e7d0      	b.n	d10a <am_adc_isr+0x3a>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d168:	4809      	ldr	r0, [pc, #36]	; (d190 <am_adc_isr+0xc0>)
    d16a:	f7ff fef9 	bl	cf60 <am_util_stdio_printf>
    d16e:	e7c8      	b.n	d102 <am_adc_isr+0x32>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d170:	4808      	ldr	r0, [pc, #32]	; (d194 <am_adc_isr+0xc4>)
    d172:	f7ff fef5 	bl	cf60 <am_util_stdio_printf>
    d176:	e7e9      	b.n	d14c <am_adc_isr+0x7c>
    d178:	10001160 	.word	0x10001160
    d17c:	1000115c 	.word	0x1000115c
    d180:	0000fb48 	.word	0x0000fb48
    d184:	0000fb6c 	.word	0x0000fb6c
    d188:	0000fc10 	.word	0x0000fc10
    d18c:	0000fbe0 	.word	0x0000fbe0
    d190:	0000fbc0 	.word	0x0000fbc0
    d194:	0000fb94 	.word	0x0000fb94

0000d198 <initADC>:
{
    d198:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d19a:	4b0e      	ldr	r3, [pc, #56]	; (d1d4 <initADC+0x3c>)
    d19c:	200b      	movs	r0, #11
    d19e:	6819      	ldr	r1, [r3, #0]
    d1a0:	f000 feaa 	bl	def8 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d1a4:	f44f 7215 	mov.w	r2, #596	; 0x254
    d1a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d1ac:	2000      	movs	r0, #0
    d1ae:	f000 fd8f 	bl	dcd0 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d1b2:	2001      	movs	r0, #1
    d1b4:	f000 fe4c 	bl	de50 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d1b8:	2300      	movs	r3, #0
    d1ba:	4618      	mov	r0, r3
    d1bc:	2201      	movs	r2, #1
    d1be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d1c2:	f000 fdef 	bl	dda4 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d1c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d1ca:	2000      	movs	r0, #0
    d1cc:	f000 fdc0 	bl	dd50 <am_hal_ctimer_start>
}
    d1d0:	2000      	movs	r0, #0
    d1d2:	bd08      	pop	{r3, pc}
    d1d4:	0000fcfc 	.word	0x0000fcfc

0000d1d8 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d1d8:	4b04      	ldr	r3, [pc, #16]	; (d1ec <enableAdcInterrupts+0x14>)
    d1da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d1de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d1e2:	6019      	str	r1, [r3, #0]
    d1e4:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d1e6:	f001 b845 	b.w	e274 <am_hal_interrupt_master_enable>
    d1ea:	bf00      	nop
    d1ec:	e000e100 	.word	0xe000e100

0000d1f0 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d1f0:	2b80      	cmp	r3, #128	; 0x80
    d1f2:	d83c      	bhi.n	d26e <platform_read+0x7e>
{
    d1f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1f8:	4690      	mov	r8, r2
    d1fa:	b08b      	sub	sp, #44	; 0x2c
    d1fc:	460e      	mov	r6, r1
    d1fe:	461f      	mov	r7, r3
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d200:	2a00      	cmp	r2, #0
    d202:	d03e      	beq.n	d282 <platform_read+0x92>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d204:	4d25      	ldr	r5, [pc, #148]	; (d29c <platform_read+0xac>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d206:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d2ac <platform_read+0xbc>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d20a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d20c:	466c      	mov	r4, sp
    d20e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d214:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d218:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d21a:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d21e:	2501      	movs	r5, #1
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d220:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d224:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d228:	9602      	str	r6, [sp, #8]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d22a:	4669      	mov	r1, sp
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d22c:	9501      	str	r5, [sp, #4]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d22e:	f8ad 501c 	strh.w	r5, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d232:	f88d 501e 	strb.w	r5, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d236:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d238:	f88d 3010 	strb.w	r3, [sp, #16]
    iomTransfer.pui32RxBuffer = NULL;
    d23c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d240:	e9cd 3308 	strd	r3, r3, [sp, #32]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d244:	f001 fb78 	bl	e938 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d248:	4604      	mov	r4, r0
    d24a:	b990      	cbnz	r0, d272 <platform_read+0x82>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d24c:	4669      	mov	r1, sp
    d24e:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d252:	f88d 401c 	strb.w	r4, [sp, #28]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d256:	f88d 5010 	strb.w	r5, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d25a:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d25e:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d260:	f001 fb6a 	bl	e938 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d264:	4604      	mov	r4, r0
    d266:	b998      	cbnz	r0, d290 <platform_read+0xa0>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d268:	b00b      	add	sp, #44	; 0x2c
    d26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d26e:	2001      	movs	r0, #1
}
    d270:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d272:	4601      	mov	r1, r0
    d274:	480a      	ldr	r0, [pc, #40]	; (d2a0 <platform_read+0xb0>)
    d276:	f7ff fe73 	bl	cf60 <am_util_stdio_printf>
        return retVal32;
    d27a:	4620      	mov	r0, r4
}
    d27c:	b00b      	add	sp, #44	; 0x2c
    d27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d282:	4808      	ldr	r0, [pc, #32]	; (d2a4 <platform_read+0xb4>)
    d284:	f7ff fe6c 	bl	cf60 <am_util_stdio_printf>
    d288:	2001      	movs	r0, #1
}
    d28a:	b00b      	add	sp, #44	; 0x2c
    d28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d290:	4601      	mov	r1, r0
    d292:	4805      	ldr	r0, [pc, #20]	; (d2a8 <platform_read+0xb8>)
    d294:	f7ff fe64 	bl	cf60 <am_util_stdio_printf>
        return retVal32;
    d298:	4620      	mov	r0, r4
    d29a:	e7e5      	b.n	d268 <platform_read+0x78>
    d29c:	10001000 	.word	0x10001000
    d2a0:	0000fd38 	.word	0x0000fd38
    d2a4:	0000fd20 	.word	0x0000fd20
    d2a8:	0000fd48 	.word	0x0000fd48
    d2ac:	10001504 	.word	0x10001504

0000d2b0 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d2b0:	2b80      	cmp	r3, #128	; 0x80
    d2b2:	d83c      	bhi.n	d32e <platform_write+0x7e>
{
    d2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d2b6:	4e25      	ldr	r6, [pc, #148]	; (d34c <platform_write+0x9c>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d2b8:	4f25      	ldr	r7, [pc, #148]	; (d350 <platform_write+0xa0>)
    d2ba:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d2bc:	469c      	mov	ip, r3
    d2be:	4614      	mov	r4, r2
    d2c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d2c2:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d2c4:	466d      	mov	r5, sp
    d2c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d2c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d2ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d2cc:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d2d0:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d2d4:	f8df e088 	ldr.w	lr, [pc, #136]	; d360 <platform_write+0xb0>
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d2d8:	2200      	movs	r2, #0
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d2da:	2601      	movs	r6, #1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d2dc:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d2e0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d2e4:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d2e6:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d2ea:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d2ee:	f8ad 201c 	strh.w	r2, [sp, #28]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d2f2:	e9cd 2208 	strd	r2, r2, [sp, #32]
    iomTransfer.pui32RxBuffer = i2cRX;
    d2f6:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    if(bufp == NULL){
    d2fa:	b30c      	cbz	r4, d340 <platform_write+0x90>
    while(len--){
    d2fc:	f10c 31ff 	add.w	r1, ip, #4294967295
    d300:	b289      	uxth	r1, r1
    d302:	f1bc 0f00 	cmp.w	ip, #0
    d306:	d009      	beq.n	d31c <platform_write+0x6c>
    d308:	1c4b      	adds	r3, r1, #1
    d30a:	18e2      	adds	r2, r4, r3
    d30c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d310:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d314:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d318:	42bb      	cmp	r3, r7
    d31a:	d1f9      	bne.n	d310 <platform_write+0x60>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d31c:	4b0d      	ldr	r3, [pc, #52]	; (d354 <platform_write+0xa4>)
    d31e:	4669      	mov	r1, sp
    d320:	6818      	ldr	r0, [r3, #0]
    d322:	f001 fb09 	bl	e938 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d326:	4606      	mov	r6, r0
    d328:	b918      	cbnz	r0, d332 <platform_write+0x82>
}
    d32a:	b00b      	add	sp, #44	; 0x2c
    d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d32e:	2001      	movs	r0, #1
}
    d330:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d332:	4601      	mov	r1, r0
    d334:	4808      	ldr	r0, [pc, #32]	; (d358 <platform_write+0xa8>)
    d336:	f7ff fe13 	bl	cf60 <am_util_stdio_printf>
        return retVal32;
    d33a:	4630      	mov	r0, r6
}
    d33c:	b00b      	add	sp, #44	; 0x2c
    d33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d340:	4806      	ldr	r0, [pc, #24]	; (d35c <platform_write+0xac>)
    d342:	f7ff fe0d 	bl	cf60 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d346:	4630      	mov	r0, r6
    d348:	e7ef      	b.n	d32a <platform_write+0x7a>
    d34a:	bf00      	nop
    d34c:	10001000 	.word	0x10001000
    d350:	10001304 	.word	0x10001304
    d354:	10001504 	.word	0x10001504
    d358:	0000fd74 	.word	0x0000fd74
    d35c:	0000fd5c 	.word	0x0000fd5c
    d360:	10001508 	.word	0x10001508

0000d364 <initAccelerometer>:
{
    d364:	b530      	push	{r4, r5, lr}
    dev_ctx.write_reg = platform_write;
    d366:	4a2c      	ldr	r2, [pc, #176]	; (d418 <initAccelerometer+0xb4>)
    d368:	4b2c      	ldr	r3, [pc, #176]	; (d41c <initAccelerometer+0xb8>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d36a:	4c2d      	ldr	r4, [pc, #180]	; (d420 <initAccelerometer+0xbc>)
    dev_ctx.write_reg = platform_write;
    d36c:	6013      	str	r3, [r2, #0]
{
    d36e:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d370:	2300      	movs	r3, #0
    d372:	2001      	movs	r0, #1
    d374:	9301      	str	r3, [sp, #4]
    dev_ctx.read_reg = platform_read;
    d376:	4d2b      	ldr	r5, [pc, #172]	; (d424 <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d378:	9305      	str	r3, [sp, #20]
    d37a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d37e:	f88d 0004 	strb.w	r0, [sp, #4]
    d382:	4b29      	ldr	r3, [pc, #164]	; (d428 <initAccelerometer+0xc4>)
    dev_ctx.read_reg = platform_read;
    d384:	6055      	str	r5, [r2, #4]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d386:	4621      	mov	r1, r4
    d388:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d38a:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d38c:	f000 fff6 	bl	e37c <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d390:	b140      	cbz	r0, d3a4 <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d392:	4c26      	ldr	r4, [pc, #152]	; (d42c <initAccelerometer+0xc8>)
    d394:	4820      	ldr	r0, [pc, #128]	; (d418 <initAccelerometer+0xb4>)
    d396:	4621      	mov	r1, r4
    d398:	f000 f94c 	bl	d634 <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d39c:	7821      	ldrb	r1, [r4, #0]
    d39e:	2933      	cmp	r1, #51	; 0x33
    d3a0:	d01b      	beq.n	d3da <initAccelerometer+0x76>
        }
    d3a2:	e7fe      	b.n	d3a2 <initAccelerometer+0x3e>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d3a4:	4602      	mov	r2, r0
    d3a6:	4601      	mov	r1, r0
    d3a8:	6820      	ldr	r0, [r4, #0]
    d3aa:	f001 f87f 	bl	e4ac <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d3ae:	2800      	cmp	r0, #0
    d3b0:	d1ef      	bne.n	d392 <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d3b2:	a901      	add	r1, sp, #4
    d3b4:	6820      	ldr	r0, [r4, #0]
    d3b6:	f001 f989 	bl	e6cc <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d3ba:	2800      	cmp	r0, #0
    d3bc:	d1e9      	bne.n	d392 <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d3be:	4b1c      	ldr	r3, [pc, #112]	; (d430 <initAccelerometer+0xcc>)
    d3c0:	202b      	movs	r0, #43	; 0x2b
    d3c2:	6819      	ldr	r1, [r3, #0]
    d3c4:	f000 fd98 	bl	def8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d3c8:	4b1a      	ldr	r3, [pc, #104]	; (d434 <initAccelerometer+0xd0>)
    d3ca:	202a      	movs	r0, #42	; 0x2a
    d3cc:	6819      	ldr	r1, [r3, #0]
    d3ce:	f000 fd93 	bl	def8 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d3d2:	6820      	ldr	r0, [r4, #0]
    d3d4:	f000 fffa 	bl	e3cc <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d3d8:	e7db      	b.n	d392 <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d3da:	4817      	ldr	r0, [pc, #92]	; (d438 <initAccelerometer+0xd4>)
    d3dc:	f7ff fdc0 	bl	cf60 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d3e0:	2101      	movs	r1, #1
    d3e2:	480d      	ldr	r0, [pc, #52]	; (d418 <initAccelerometer+0xb4>)
    d3e4:	f000 f8f2 	bl	d5cc <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d3e8:	2103      	movs	r1, #3
    d3ea:	480b      	ldr	r0, [pc, #44]	; (d418 <initAccelerometer+0xb4>)
    d3ec:	f000 f854 	bl	d498 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d3f0:	2103      	movs	r1, #3
    d3f2:	4809      	ldr	r0, [pc, #36]	; (d418 <initAccelerometer+0xb4>)
    d3f4:	f000 f8b6 	bl	d564 <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d3f8:	2100      	movs	r1, #0
    d3fa:	4807      	ldr	r0, [pc, #28]	; (d418 <initAccelerometer+0xb4>)
    d3fc:	f000 f8cc 	bl	d598 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d400:	2103      	movs	r1, #3
    d402:	4805      	ldr	r0, [pc, #20]	; (d418 <initAccelerometer+0xb4>)
    d404:	f000 f848 	bl	d498 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d408:	2100      	movs	r1, #0
    d40a:	4803      	ldr	r0, [pc, #12]	; (d418 <initAccelerometer+0xb4>)
    d40c:	f000 f85e 	bl	d4cc <lis2dh12_operating_mode_set>
}
    d410:	2000      	movs	r0, #0
    d412:	b007      	add	sp, #28
    d414:	bd30      	pop	{r4, r5, pc}
    d416:	bf00      	nop
    d418:	100012f8 	.word	0x100012f8
    d41c:	0000d2b1 	.word	0x0000d2b1
    d420:	10001504 	.word	0x10001504
    d424:	0000d1f1 	.word	0x0000d1f1
    d428:	000186a0 	.word	0x000186a0
    d42c:	10001164 	.word	0x10001164
    d430:	0000fdbc 	.word	0x0000fdbc
    d434:	0000fdc0 	.word	0x0000fdc0
    d438:	0000fd00 	.word	0x0000fd00

0000d43c <lis2dh12_from_fs2_hr_to_mg>:
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d43c:	ee00 0a10 	vmov	s0, r0
    d440:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d444:	4770      	bx	lr
    d446:	bf00      	nop

0000d448 <lis2dh12_from_lsb_hr_to_celsius>:
  return ( (float)lsb / 16.0f ) * 12.0f;
}

float lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
  return ( ( (float)lsb / 64.0f ) / 4.0f ) + 25.0f;
    d448:	ee07 0a90 	vmov	s15, r0
    d44c:	eefa 7acd 	vcvt.f32.s32	s15, s15, #6
    d450:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    d454:	ee67 7a80 	vmul.f32	s15, s15, s0
    d458:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
}
    d45c:	ee37 0a80 	vadd.f32	s0, s15, s0
    d460:	4770      	bx	lr
    d462:	bf00      	nop

0000d464 <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d464:	b530      	push	{r4, r5, lr}
    d466:	b083      	sub	sp, #12
    d468:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d46a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d46e:	2301      	movs	r3, #1
    d470:	aa01      	add	r2, sp, #4
    d472:	2107      	movs	r1, #7
    d474:	47a8      	blx	r5
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
                          (uint8_t*)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
    d476:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d47a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d47e:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d480:	b003      	add	sp, #12
    d482:	bd30      	pop	{r4, r5, pc}

0000d484 <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d484:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d486:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d48a:	460a      	mov	r2, r1
    d48c:	46a4      	mov	ip, r4
    d48e:	2302      	movs	r3, #2
    d490:	210c      	movs	r1, #12
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
  return ret;
}
    d492:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d496:	4760      	bx	ip

0000d498 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d498:	b570      	push	{r4, r5, r6, lr}
    d49a:	b082      	sub	sp, #8
    d49c:	4604      	mov	r4, r0
    d49e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d4a0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d4a4:	aa01      	add	r2, sp, #4
    d4a6:	2301      	movs	r3, #1
    d4a8:	211f      	movs	r1, #31
    d4aa:	47a8      	blx	r5
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d4ac:	b958      	cbnz	r0, d4c6 <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d4ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d4b2:	6825      	ldr	r5, [r4, #0]
    d4b4:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d4b6:	f366 1387 	bfi	r3, r6, #6, #2
    d4ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d4be:	aa01      	add	r2, sp, #4
    d4c0:	2301      	movs	r3, #1
    d4c2:	211f      	movs	r1, #31
    d4c4:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d4c6:	b002      	add	sp, #8
    d4c8:	bd70      	pop	{r4, r5, r6, pc}
    d4ca:	bf00      	nop

0000d4cc <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d4cc:	b570      	push	{r4, r5, r6, lr}
    d4ce:	b082      	sub	sp, #8
    d4d0:	4604      	mov	r4, r0
    d4d2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d4d4:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d4d8:	466a      	mov	r2, sp
    d4da:	2301      	movs	r3, #1
    d4dc:	2120      	movs	r1, #32
    d4de:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d4e0:	bb00      	cbnz	r0, d524 <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d4e2:	aa01      	add	r2, sp, #4
    d4e4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d4e8:	2301      	movs	r3, #1
    d4ea:	2123      	movs	r1, #35	; 0x23
    d4ec:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d4ee:	b9c8      	cbnz	r0, d524 <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d4f0:	b9d5      	cbnz	r5, d528 <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d4f2:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d4f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d4fa:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d4fe:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d502:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d506:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d50a:	466a      	mov	r2, sp
    d50c:	6825      	ldr	r5, [r4, #0]
    d50e:	68a0      	ldr	r0, [r4, #8]
    d510:	2301      	movs	r3, #1
    d512:	2120      	movs	r1, #32
    d514:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d516:	b928      	cbnz	r0, d524 <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d518:	aa01      	add	r2, sp, #4
    d51a:	6825      	ldr	r5, [r4, #0]
    d51c:	68a0      	ldr	r0, [r4, #8]
    d51e:	2301      	movs	r3, #1
    d520:	2123      	movs	r1, #35	; 0x23
    d522:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d524:	b002      	add	sp, #8
    d526:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d528:	2d01      	cmp	r5, #1
    d52a:	d10c      	bne.n	d546 <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d52c:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d530:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d534:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d538:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d53c:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d540:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d544:	e7e1      	b.n	d50a <lis2dh12_operating_mode_set+0x3e>
    d546:	2d02      	cmp	r5, #2
    d548:	d1df      	bne.n	d50a <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d54a:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d54e:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d552:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d556:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d55a:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d55e:	f88d 2004 	strb.w	r2, [sp, #4]
    d562:	e7d2      	b.n	d50a <lis2dh12_operating_mode_set+0x3e>

0000d564 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d564:	b570      	push	{r4, r5, r6, lr}
    d566:	b082      	sub	sp, #8
    d568:	4604      	mov	r4, r0
    d56a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d56c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d570:	aa01      	add	r2, sp, #4
    d572:	2301      	movs	r3, #1
    d574:	2120      	movs	r1, #32
    d576:	47a8      	blx	r5
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d578:	b958      	cbnz	r0, d592 <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d57a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d57e:	6825      	ldr	r5, [r4, #0]
    d580:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d582:	f366 1307 	bfi	r3, r6, #4, #4
    d586:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d58a:	aa01      	add	r2, sp, #4
    d58c:	2301      	movs	r3, #1
    d58e:	2120      	movs	r1, #32
    d590:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d592:	b002      	add	sp, #8
    d594:	bd70      	pop	{r4, r5, r6, pc}
    d596:	bf00      	nop

0000d598 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d598:	b570      	push	{r4, r5, r6, lr}
    d59a:	b082      	sub	sp, #8
    d59c:	4604      	mov	r4, r0
    d59e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d5a0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d5a4:	aa01      	add	r2, sp, #4
    d5a6:	2301      	movs	r3, #1
    d5a8:	2123      	movs	r1, #35	; 0x23
    d5aa:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d5ac:	b958      	cbnz	r0, d5c6 <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d5ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5b2:	6825      	ldr	r5, [r4, #0]
    d5b4:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d5b6:	f366 1305 	bfi	r3, r6, #4, #2
    d5ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5be:	aa01      	add	r2, sp, #4
    d5c0:	2301      	movs	r3, #1
    d5c2:	2123      	movs	r1, #35	; 0x23
    d5c4:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d5c6:	b002      	add	sp, #8
    d5c8:	bd70      	pop	{r4, r5, r6, pc}
    d5ca:	bf00      	nop

0000d5cc <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d5cc:	b570      	push	{r4, r5, r6, lr}
    d5ce:	b082      	sub	sp, #8
    d5d0:	4604      	mov	r4, r0
    d5d2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d5d4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d5d8:	aa01      	add	r2, sp, #4
    d5da:	2301      	movs	r3, #1
    d5dc:	2123      	movs	r1, #35	; 0x23
    d5de:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d5e0:	b958      	cbnz	r0, d5fa <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d5e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5e6:	6825      	ldr	r5, [r4, #0]
    d5e8:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d5ea:	f366 13c7 	bfi	r3, r6, #7, #1
    d5ee:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5f2:	aa01      	add	r2, sp, #4
    d5f4:	2301      	movs	r3, #1
    d5f6:	2123      	movs	r1, #35	; 0x23
    d5f8:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d5fa:	b002      	add	sp, #8
    d5fc:	bd70      	pop	{r4, r5, r6, pc}
    d5fe:	bf00      	nop

0000d600 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d600:	b530      	push	{r4, r5, lr}
    d602:	b083      	sub	sp, #12
    d604:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d606:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d60a:	2301      	movs	r3, #1
    d60c:	aa01      	add	r2, sp, #4
    d60e:	2127      	movs	r1, #39	; 0x27
    d610:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d612:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d616:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d61a:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d61c:	b003      	add	sp, #12
    d61e:	bd30      	pop	{r4, r5, pc}

0000d620 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d620:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d622:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d626:	460a      	mov	r2, r1
    d628:	46a4      	mov	ip, r4
    d62a:	2306      	movs	r3, #6
    d62c:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d62e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d632:	4760      	bx	ip

0000d634 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d634:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d636:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d63a:	460a      	mov	r2, r1
    d63c:	46a4      	mov	ip, r4
    d63e:	2301      	movs	r3, #1
    d640:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d642:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d646:	4760      	bx	ip

0000d648 <am_bsp_uart_string_print>:
    d648:	b510      	push	{r4, lr}
    d64a:	b086      	sub	sp, #24
    d64c:	7804      	ldrb	r4, [r0, #0]
    d64e:	2300      	movs	r3, #0
    d650:	9300      	str	r3, [sp, #0]
    d652:	b13c      	cbz	r4, d664 <am_bsp_uart_string_print+0x1c>
    d654:	4603      	mov	r3, r0
    d656:	f1c0 0201 	rsb	r2, r0, #1
    d65a:	18d4      	adds	r4, r2, r3
    d65c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d660:	2900      	cmp	r1, #0
    d662:	d1fa      	bne.n	d65a <am_bsp_uart_string_print+0x12>
    d664:	4b09      	ldr	r3, [pc, #36]	; (d68c <am_bsp_uart_string_print+0x44>)
    d666:	9002      	str	r0, [sp, #8]
    d668:	2200      	movs	r2, #0
    d66a:	6818      	ldr	r0, [r3, #0]
    d66c:	9403      	str	r4, [sp, #12]
    d66e:	f04f 33ff 	mov.w	r3, #4294967295
    d672:	a901      	add	r1, sp, #4
    d674:	9304      	str	r3, [sp, #16]
    d676:	9201      	str	r2, [sp, #4]
    d678:	f8cd d014 	str.w	sp, [sp, #20]
    d67c:	f001 fe94 	bl	f3a8 <am_hal_uart_transfer>
    d680:	9b00      	ldr	r3, [sp, #0]
    d682:	42a3      	cmp	r3, r4
    d684:	d000      	beq.n	d688 <am_bsp_uart_string_print+0x40>
    d686:	e7fe      	b.n	d686 <am_bsp_uart_string_print+0x3e>
    d688:	b006      	add	sp, #24
    d68a:	bd10      	pop	{r4, pc}
    d68c:	10001168 	.word	0x10001168

0000d690 <am_bsp_low_power_init>:
    d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d692:	f001 fb01 	bl	ec98 <am_hal_itm_disable>
    d696:	2000      	movs	r0, #0
    d698:	f7fe ffbc 	bl	c614 <am_util_stdio_printf_init>
    d69c:	4b12      	ldr	r3, [pc, #72]	; (d6e8 <am_bsp_low_power_init+0x58>)
    d69e:	4f13      	ldr	r7, [pc, #76]	; (d6ec <am_bsp_low_power_init+0x5c>)
    d6a0:	6819      	ldr	r1, [r3, #0]
    d6a2:	2021      	movs	r0, #33	; 0x21
    d6a4:	f000 fc28 	bl	def8 <am_hal_gpio_pinconfig>
    d6a8:	f001 fc38 	bl	ef1c <am_hal_pwrctrl_low_power_init>
    d6ac:	2001      	movs	r0, #1
    d6ae:	f001 fc7f 	bl	efb0 <am_hal_rtc_osc_select>
    d6b2:	2100      	movs	r1, #0
    d6b4:	2003      	movs	r0, #3
    d6b6:	f000 fa9f 	bl	dbf8 <am_hal_clkgen_control>
    d6ba:	f001 fc85 	bl	efc8 <am_hal_rtc_osc_disable>
    d6be:	4b0c      	ldr	r3, [pc, #48]	; (d6f0 <am_bsp_low_power_init+0x60>)
    d6c0:	681e      	ldr	r6, [r3, #0]
    d6c2:	2400      	movs	r4, #0
    d6c4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d6c8:	4631      	mov	r1, r6
    d6ca:	4628      	mov	r0, r5
    d6cc:	f000 fc14 	bl	def8 <am_hal_gpio_pinconfig>
    d6d0:	2103      	movs	r1, #3
    d6d2:	4628      	mov	r0, r5
    d6d4:	f000 fd84 	bl	e1e0 <am_hal_gpio_state_write>
    d6d8:	3401      	adds	r4, #1
    d6da:	4628      	mov	r0, r5
    d6dc:	2100      	movs	r1, #0
    d6de:	f000 fd7f 	bl	e1e0 <am_hal_gpio_state_write>
    d6e2:	2c04      	cmp	r4, #4
    d6e4:	d1ee      	bne.n	d6c4 <am_bsp_low_power_init+0x34>
    d6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6e8:	0000fefc 	.word	0x0000fefc
    d6ec:	10001028 	.word	0x10001028
    d6f0:	0000ff00 	.word	0x0000ff00

0000d6f4 <am_bsp_debug_printf_disable>:
    d6f4:	b538      	push	{r3, r4, r5, lr}
    d6f6:	4b17      	ldr	r3, [pc, #92]	; (d754 <am_bsp_debug_printf_disable+0x60>)
    d6f8:	681c      	ldr	r4, [r3, #0]
    d6fa:	2c01      	cmp	r4, #1
    d6fc:	d002      	beq.n	d704 <am_bsp_debug_printf_disable+0x10>
    d6fe:	2c02      	cmp	r4, #2
    d700:	d00c      	beq.n	d71c <am_bsp_debug_printf_disable+0x28>
    d702:	bd38      	pop	{r3, r4, r5, pc}
    d704:	f001 fac8 	bl	ec98 <am_hal_itm_disable>
    d708:	2000      	movs	r0, #0
    d70a:	f7fe ff83 	bl	c614 <am_util_stdio_printf_init>
    d70e:	4b12      	ldr	r3, [pc, #72]	; (d758 <am_bsp_debug_printf_disable+0x64>)
    d710:	2021      	movs	r0, #33	; 0x21
    d712:	6819      	ldr	r1, [r3, #0]
    d714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d718:	f000 bbee 	b.w	def8 <am_hal_gpio_pinconfig>
    d71c:	4d0f      	ldr	r5, [pc, #60]	; (d75c <am_bsp_debug_printf_disable+0x68>)
    d71e:	6828      	ldr	r0, [r5, #0]
    d720:	f002 f87c 	bl	f81c <am_hal_uart_tx_flush>
    d724:	2000      	movs	r0, #0
    d726:	f7fe ff75 	bl	c614 <am_util_stdio_printf_init>
    d72a:	4621      	mov	r1, r4
    d72c:	2200      	movs	r2, #0
    d72e:	6828      	ldr	r0, [r5, #0]
    d730:	f001 fcbc 	bl	f0ac <am_hal_uart_power_control>
    d734:	6828      	ldr	r0, [r5, #0]
    d736:	f001 fca5 	bl	f084 <am_hal_uart_deinitialize>
    d73a:	4b07      	ldr	r3, [pc, #28]	; (d758 <am_bsp_debug_printf_disable+0x64>)
    d73c:	681c      	ldr	r4, [r3, #0]
    d73e:	2030      	movs	r0, #48	; 0x30
    d740:	4621      	mov	r1, r4
    d742:	f000 fbd9 	bl	def8 <am_hal_gpio_pinconfig>
    d746:	4621      	mov	r1, r4
    d748:	2031      	movs	r0, #49	; 0x31
    d74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d74e:	f000 bbd3 	b.w	def8 <am_hal_gpio_pinconfig>
    d752:	bf00      	nop
    d754:	1000116c 	.word	0x1000116c
    d758:	0000fefc 	.word	0x0000fefc
    d75c:	10001168 	.word	0x10001168

0000d760 <am_bsp_uart_printf_enable>:
    d760:	b510      	push	{r4, lr}
    d762:	4c10      	ldr	r4, [pc, #64]	; (d7a4 <am_bsp_uart_printf_enable+0x44>)
    d764:	4b10      	ldr	r3, [pc, #64]	; (d7a8 <am_bsp_uart_printf_enable+0x48>)
    d766:	4621      	mov	r1, r4
    d768:	2202      	movs	r2, #2
    d76a:	2000      	movs	r0, #0
    d76c:	601a      	str	r2, [r3, #0]
    d76e:	f001 fc61 	bl	f034 <am_hal_uart_initialize>
    d772:	2200      	movs	r2, #0
    d774:	4611      	mov	r1, r2
    d776:	6820      	ldr	r0, [r4, #0]
    d778:	f001 fc98 	bl	f0ac <am_hal_uart_power_control>
    d77c:	6820      	ldr	r0, [r4, #0]
    d77e:	490b      	ldr	r1, [pc, #44]	; (d7ac <am_bsp_uart_printf_enable+0x4c>)
    d780:	f001 fd06 	bl	f190 <am_hal_uart_configure>
    d784:	4b0a      	ldr	r3, [pc, #40]	; (d7b0 <am_bsp_uart_printf_enable+0x50>)
    d786:	2030      	movs	r0, #48	; 0x30
    d788:	6819      	ldr	r1, [r3, #0]
    d78a:	f000 fbb5 	bl	def8 <am_hal_gpio_pinconfig>
    d78e:	4b09      	ldr	r3, [pc, #36]	; (d7b4 <am_bsp_uart_printf_enable+0x54>)
    d790:	2031      	movs	r0, #49	; 0x31
    d792:	6819      	ldr	r1, [r3, #0]
    d794:	f000 fbb0 	bl	def8 <am_hal_gpio_pinconfig>
    d798:	4807      	ldr	r0, [pc, #28]	; (d7b8 <am_bsp_uart_printf_enable+0x58>)
    d79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d79e:	f7fe bf39 	b.w	c614 <am_util_stdio_printf_init>
    d7a2:	bf00      	nop
    d7a4:	10001168 	.word	0x10001168
    d7a8:	1000116c 	.word	0x1000116c
    d7ac:	0000fd8c 	.word	0x0000fd8c
    d7b0:	0000fdb8 	.word	0x0000fdb8
    d7b4:	0000fdb4 	.word	0x0000fdb4
    d7b8:	0000d649 	.word	0x0000d649

0000d7bc <am_hal_adc_initialize>:
    d7bc:	b108      	cbz	r0, d7c2 <am_hal_adc_initialize+0x6>
    d7be:	2005      	movs	r0, #5
    d7c0:	4770      	bx	lr
    d7c2:	b1a9      	cbz	r1, d7f0 <am_hal_adc_initialize+0x34>
    d7c4:	4a0b      	ldr	r2, [pc, #44]	; (d7f4 <am_hal_adc_initialize+0x38>)
    d7c6:	78d3      	ldrb	r3, [r2, #3]
    d7c8:	f013 0001 	ands.w	r0, r3, #1
    d7cc:	d001      	beq.n	d7d2 <am_hal_adc_initialize+0x16>
    d7ce:	2007      	movs	r0, #7
    d7d0:	4770      	bx	lr
    d7d2:	b430      	push	{r4, r5}
    d7d4:	f043 0301 	orr.w	r3, r3, #1
    d7d8:	70d3      	strb	r3, [r2, #3]
    d7da:	6813      	ldr	r3, [r2, #0]
    d7dc:	4d06      	ldr	r5, [pc, #24]	; (d7f8 <am_hal_adc_initialize+0x3c>)
    d7de:	4c07      	ldr	r4, [pc, #28]	; (d7fc <am_hal_adc_initialize+0x40>)
    d7e0:	6050      	str	r0, [r2, #4]
    d7e2:	f365 0317 	bfi	r3, r5, #0, #24
    d7e6:	6013      	str	r3, [r2, #0]
    d7e8:	6020      	str	r0, [r4, #0]
    d7ea:	600a      	str	r2, [r1, #0]
    d7ec:	bc30      	pop	{r4, r5}
    d7ee:	4770      	bx	lr
    d7f0:	2006      	movs	r0, #6
    d7f2:	4770      	bx	lr
    d7f4:	1000170c 	.word	0x1000170c
    d7f8:	00afafaf 	.word	0x00afafaf
    d7fc:	10001708 	.word	0x10001708

0000d800 <am_hal_adc_deinitialize>:
    d800:	b128      	cbz	r0, d80e <am_hal_adc_deinitialize+0xe>
    d802:	6803      	ldr	r3, [r0, #0]
    d804:	4a0c      	ldr	r2, [pc, #48]	; (d838 <am_hal_adc_deinitialize+0x38>)
    d806:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d80a:	4293      	cmp	r3, r2
    d80c:	d001      	beq.n	d812 <am_hal_adc_deinitialize+0x12>
    d80e:	2002      	movs	r0, #2
    d810:	4770      	bx	lr
    d812:	78c3      	ldrb	r3, [r0, #3]
    d814:	079b      	lsls	r3, r3, #30
    d816:	d508      	bpl.n	d82a <am_hal_adc_deinitialize+0x2a>
    d818:	4b08      	ldr	r3, [pc, #32]	; (d83c <am_hal_adc_deinitialize+0x3c>)
    d81a:	681a      	ldr	r2, [r3, #0]
    d81c:	f36f 0200 	bfc	r2, #0, #1
    d820:	601a      	str	r2, [r3, #0]
    d822:	78c3      	ldrb	r3, [r0, #3]
    d824:	f36f 0341 	bfc	r3, #1, #1
    d828:	70c3      	strb	r3, [r0, #3]
    d82a:	78c3      	ldrb	r3, [r0, #3]
    d82c:	f36f 0300 	bfc	r3, #0, #1
    d830:	70c3      	strb	r3, [r0, #3]
    d832:	2000      	movs	r0, #0
    d834:	4770      	bx	lr
    d836:	bf00      	nop
    d838:	01afafaf 	.word	0x01afafaf
    d83c:	50010000 	.word	0x50010000

0000d840 <am_hal_adc_configure>:
    d840:	b128      	cbz	r0, d84e <am_hal_adc_configure+0xe>
    d842:	6803      	ldr	r3, [r0, #0]
    d844:	4a18      	ldr	r2, [pc, #96]	; (d8a8 <am_hal_adc_configure+0x68>)
    d846:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d84a:	4293      	cmp	r3, r2
    d84c:	d001      	beq.n	d852 <am_hal_adc_configure+0x12>
    d84e:	2002      	movs	r0, #2
    d850:	4770      	bx	lr
    d852:	b5f0      	push	{r4, r5, r6, r7, lr}
    d854:	7808      	ldrb	r0, [r1, #0]
    d856:	784d      	ldrb	r5, [r1, #1]
    d858:	788c      	ldrb	r4, [r1, #2]
    d85a:	f891 e003 	ldrb.w	lr, [r1, #3]
    d85e:	790f      	ldrb	r7, [r1, #4]
    d860:	794a      	ldrb	r2, [r1, #5]
    d862:	798b      	ldrb	r3, [r1, #6]
    d864:	4e11      	ldr	r6, [pc, #68]	; (d8ac <am_hal_adc_configure+0x6c>)
    d866:	0600      	lsls	r0, r0, #24
    d868:	04ed      	lsls	r5, r5, #19
    d86a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d86e:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d872:	4328      	orrs	r0, r5
    d874:	0424      	lsls	r4, r4, #16
    d876:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d87a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d87e:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d882:	4304      	orrs	r4, r0
    d884:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d888:	0139      	lsls	r1, r7, #4
    d88a:	4320      	orrs	r0, r4
    d88c:	f001 0110 	and.w	r1, r1, #16
    d890:	00d2      	lsls	r2, r2, #3
    d892:	4301      	orrs	r1, r0
    d894:	f002 0208 	and.w	r2, r2, #8
    d898:	009b      	lsls	r3, r3, #2
    d89a:	430a      	orrs	r2, r1
    d89c:	f003 0304 	and.w	r3, r3, #4
    d8a0:	4313      	orrs	r3, r2
    d8a2:	6033      	str	r3, [r6, #0]
    d8a4:	2000      	movs	r0, #0
    d8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8a8:	01afafaf 	.word	0x01afafaf
    d8ac:	50010000 	.word	0x50010000

0000d8b0 <am_hal_adc_configure_slot>:
    d8b0:	b128      	cbz	r0, d8be <am_hal_adc_configure_slot+0xe>
    d8b2:	6803      	ldr	r3, [r0, #0]
    d8b4:	4816      	ldr	r0, [pc, #88]	; (d910 <am_hal_adc_configure_slot+0x60>)
    d8b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8ba:	4283      	cmp	r3, r0
    d8bc:	d001      	beq.n	d8c2 <am_hal_adc_configure_slot+0x12>
    d8be:	2002      	movs	r0, #2
    d8c0:	4770      	bx	lr
    d8c2:	2907      	cmp	r1, #7
    d8c4:	d901      	bls.n	d8ca <am_hal_adc_configure_slot+0x1a>
    d8c6:	2005      	movs	r0, #5
    d8c8:	4770      	bx	lr
    d8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8cc:	7813      	ldrb	r3, [r2, #0]
    d8ce:	7854      	ldrb	r4, [r2, #1]
    d8d0:	7890      	ldrb	r0, [r2, #2]
    d8d2:	78d7      	ldrb	r7, [r2, #3]
    d8d4:	f892 e004 	ldrb.w	lr, [r2, #4]
    d8d8:	4d0e      	ldr	r5, [pc, #56]	; (d914 <am_hal_adc_configure_slot+0x64>)
    d8da:	4e0f      	ldr	r6, [pc, #60]	; (d918 <am_hal_adc_configure_slot+0x68>)
    d8dc:	061b      	lsls	r3, r3, #24
    d8de:	0424      	lsls	r4, r4, #16
    d8e0:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    d8e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    d8e8:	4323      	orrs	r3, r4
    d8ea:	0202      	lsls	r2, r0, #8
    d8ec:	ea43 0e0e 	orr.w	lr, r3, lr
    d8f0:	440d      	add	r5, r1
    d8f2:	007b      	lsls	r3, r7, #1
    d8f4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    d8f8:	ea4e 0202 	orr.w	r2, lr, r2
    d8fc:	00ad      	lsls	r5, r5, #2
    d8fe:	f003 0302 	and.w	r3, r3, #2
    d902:	4313      	orrs	r3, r2
    d904:	602b      	str	r3, [r5, #0]
    d906:	6833      	ldr	r3, [r6, #0]
    d908:	3301      	adds	r3, #1
    d90a:	6033      	str	r3, [r6, #0]
    d90c:	2000      	movs	r0, #0
    d90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d910:	01afafaf 	.word	0x01afafaf
    d914:	14004003 	.word	0x14004003
    d918:	10001708 	.word	0x10001708

0000d91c <am_hal_adc_enable>:
    d91c:	4603      	mov	r3, r0
    d91e:	b128      	cbz	r0, d92c <am_hal_adc_enable+0x10>
    d920:	6802      	ldr	r2, [r0, #0]
    d922:	490c      	ldr	r1, [pc, #48]	; (d954 <am_hal_adc_enable+0x38>)
    d924:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d928:	428a      	cmp	r2, r1
    d92a:	d001      	beq.n	d930 <am_hal_adc_enable+0x14>
    d92c:	2002      	movs	r0, #2
    d92e:	4770      	bx	lr
    d930:	78c2      	ldrb	r2, [r0, #3]
    d932:	f002 0202 	and.w	r2, r2, #2
    d936:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d93a:	b94a      	cbnz	r2, d950 <am_hal_adc_enable+0x34>
    d93c:	4906      	ldr	r1, [pc, #24]	; (d958 <am_hal_adc_enable+0x3c>)
    d93e:	680a      	ldr	r2, [r1, #0]
    d940:	f042 0201 	orr.w	r2, r2, #1
    d944:	600a      	str	r2, [r1, #0]
    d946:	78da      	ldrb	r2, [r3, #3]
    d948:	f042 0202 	orr.w	r2, r2, #2
    d94c:	70da      	strb	r2, [r3, #3]
    d94e:	4770      	bx	lr
    d950:	2000      	movs	r0, #0
    d952:	4770      	bx	lr
    d954:	01afafaf 	.word	0x01afafaf
    d958:	50010000 	.word	0x50010000

0000d95c <am_hal_adc_disable>:
    d95c:	b128      	cbz	r0, d96a <am_hal_adc_disable+0xe>
    d95e:	6803      	ldr	r3, [r0, #0]
    d960:	4a08      	ldr	r2, [pc, #32]	; (d984 <am_hal_adc_disable+0x28>)
    d962:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d966:	4293      	cmp	r3, r2
    d968:	d001      	beq.n	d96e <am_hal_adc_disable+0x12>
    d96a:	2002      	movs	r0, #2
    d96c:	4770      	bx	lr
    d96e:	4b06      	ldr	r3, [pc, #24]	; (d988 <am_hal_adc_disable+0x2c>)
    d970:	681a      	ldr	r2, [r3, #0]
    d972:	f36f 0200 	bfc	r2, #0, #1
    d976:	601a      	str	r2, [r3, #0]
    d978:	78c3      	ldrb	r3, [r0, #3]
    d97a:	f36f 0341 	bfc	r3, #1, #1
    d97e:	70c3      	strb	r3, [r0, #3]
    d980:	2000      	movs	r0, #0
    d982:	4770      	bx	lr
    d984:	01afafaf 	.word	0x01afafaf
    d988:	50010000 	.word	0x50010000

0000d98c <am_hal_adc_interrupt_enable>:
    d98c:	b128      	cbz	r0, d99a <am_hal_adc_interrupt_enable+0xe>
    d98e:	6803      	ldr	r3, [r0, #0]
    d990:	4a07      	ldr	r2, [pc, #28]	; (d9b0 <am_hal_adc_interrupt_enable+0x24>)
    d992:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d996:	4293      	cmp	r3, r2
    d998:	d001      	beq.n	d99e <am_hal_adc_interrupt_enable+0x12>
    d99a:	2002      	movs	r0, #2
    d99c:	4770      	bx	lr
    d99e:	4b05      	ldr	r3, [pc, #20]	; (d9b4 <am_hal_adc_interrupt_enable+0x28>)
    d9a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d9a4:	4311      	orrs	r1, r2
    d9a6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d9aa:	2000      	movs	r0, #0
    d9ac:	4770      	bx	lr
    d9ae:	bf00      	nop
    d9b0:	01afafaf 	.word	0x01afafaf
    d9b4:	50010000 	.word	0x50010000

0000d9b8 <am_hal_adc_interrupt_status>:
    d9b8:	b128      	cbz	r0, d9c6 <am_hal_adc_interrupt_status+0xe>
    d9ba:	6803      	ldr	r3, [r0, #0]
    d9bc:	480b      	ldr	r0, [pc, #44]	; (d9ec <am_hal_adc_interrupt_status+0x34>)
    d9be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d9c2:	4283      	cmp	r3, r0
    d9c4:	d001      	beq.n	d9ca <am_hal_adc_interrupt_status+0x12>
    d9c6:	2002      	movs	r0, #2
    d9c8:	4770      	bx	lr
    d9ca:	b92a      	cbnz	r2, d9d8 <am_hal_adc_interrupt_status+0x20>
    d9cc:	4b08      	ldr	r3, [pc, #32]	; (d9f0 <am_hal_adc_interrupt_status+0x38>)
    d9ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d9d2:	600b      	str	r3, [r1, #0]
    d9d4:	4610      	mov	r0, r2
    d9d6:	4770      	bx	lr
    d9d8:	4a05      	ldr	r2, [pc, #20]	; (d9f0 <am_hal_adc_interrupt_status+0x38>)
    d9da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    d9de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d9e2:	4003      	ands	r3, r0
    d9e4:	600b      	str	r3, [r1, #0]
    d9e6:	2000      	movs	r0, #0
    d9e8:	4770      	bx	lr
    d9ea:	bf00      	nop
    d9ec:	01afafaf 	.word	0x01afafaf
    d9f0:	50010000 	.word	0x50010000

0000d9f4 <am_hal_adc_interrupt_clear>:
    d9f4:	b128      	cbz	r0, da02 <am_hal_adc_interrupt_clear+0xe>
    d9f6:	6803      	ldr	r3, [r0, #0]
    d9f8:	4a05      	ldr	r2, [pc, #20]	; (da10 <am_hal_adc_interrupt_clear+0x1c>)
    d9fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d9fe:	4293      	cmp	r3, r2
    da00:	d001      	beq.n	da06 <am_hal_adc_interrupt_clear+0x12>
    da02:	2002      	movs	r0, #2
    da04:	4770      	bx	lr
    da06:	4b03      	ldr	r3, [pc, #12]	; (da14 <am_hal_adc_interrupt_clear+0x20>)
    da08:	2000      	movs	r0, #0
    da0a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    da0e:	4770      	bx	lr
    da10:	01afafaf 	.word	0x01afafaf
    da14:	50010000 	.word	0x50010000

0000da18 <am_hal_adc_samples_read>:
    da18:	b148      	cbz	r0, da2e <am_hal_adc_samples_read+0x16>
    da1a:	6800      	ldr	r0, [r0, #0]
    da1c:	b470      	push	{r4, r5, r6}
    da1e:	4c1f      	ldr	r4, [pc, #124]	; (da9c <am_hal_adc_samples_read+0x84>)
    da20:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    da24:	42a0      	cmp	r0, r4
    da26:	d004      	beq.n	da32 <am_hal_adc_samples_read+0x1a>
    da28:	2002      	movs	r0, #2
    da2a:	bc70      	pop	{r4, r5, r6}
    da2c:	4770      	bx	lr
    da2e:	2002      	movs	r0, #2
    da30:	4770      	bx	lr
    da32:	b1db      	cbz	r3, da6c <am_hal_adc_samples_read+0x54>
    da34:	2000      	movs	r0, #0
    da36:	6814      	ldr	r4, [r2, #0]
    da38:	6010      	str	r0, [r2, #0]
    da3a:	b1c9      	cbz	r1, da70 <am_hal_adc_samples_read+0x58>
    da3c:	4d18      	ldr	r5, [pc, #96]	; (daa0 <am_hal_adc_samples_read+0x88>)
    da3e:	3308      	adds	r3, #8
    da40:	3904      	subs	r1, #4
    da42:	f851 0f04 	ldr.w	r0, [r1, #4]!
    da46:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    da48:	f3c0 7002 	ubfx	r0, r0, #28, #3
    da4c:	f843 0c04 	str.w	r0, [r3, #-4]
    da50:	6808      	ldr	r0, [r1, #0]
    da52:	f3c0 108d 	ubfx	r0, r0, #6, #14
    da56:	f843 0c08 	str.w	r0, [r3, #-8]
    da5a:	6810      	ldr	r0, [r2, #0]
    da5c:	3001      	adds	r0, #1
    da5e:	4284      	cmp	r4, r0
    da60:	f103 0308 	add.w	r3, r3, #8
    da64:	6010      	str	r0, [r2, #0]
    da66:	d8ec      	bhi.n	da42 <am_hal_adc_samples_read+0x2a>
    da68:	2000      	movs	r0, #0
    da6a:	e7de      	b.n	da2a <am_hal_adc_samples_read+0x12>
    da6c:	2006      	movs	r0, #6
    da6e:	e7dc      	b.n	da2a <am_hal_adc_samples_read+0x12>
    da70:	4e0b      	ldr	r6, [pc, #44]	; (daa0 <am_hal_adc_samples_read+0x88>)
    da72:	3308      	adds	r3, #8
    da74:	e001      	b.n	da7a <am_hal_adc_samples_read+0x62>
    da76:	4284      	cmp	r4, r0
    da78:	d9f6      	bls.n	da68 <am_hal_adc_samples_read+0x50>
    da7a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    da7c:	f3c1 108d 	ubfx	r0, r1, #6, #14
    da80:	f3c1 7502 	ubfx	r5, r1, #28, #3
    da84:	e903 0021 	stmdb	r3, {r0, r5}
    da88:	6810      	ldr	r0, [r2, #0]
    da8a:	f3c1 5107 	ubfx	r1, r1, #20, #8
    da8e:	3001      	adds	r0, #1
    da90:	3308      	adds	r3, #8
    da92:	6010      	str	r0, [r2, #0]
    da94:	2900      	cmp	r1, #0
    da96:	d1ee      	bne.n	da76 <am_hal_adc_samples_read+0x5e>
    da98:	e7e6      	b.n	da68 <am_hal_adc_samples_read+0x50>
    da9a:	bf00      	nop
    da9c:	01afafaf 	.word	0x01afafaf
    daa0:	50010000 	.word	0x50010000

0000daa4 <am_hal_adc_sw_trigger>:
    daa4:	b128      	cbz	r0, dab2 <am_hal_adc_sw_trigger+0xe>
    daa6:	6803      	ldr	r3, [r0, #0]
    daa8:	4a05      	ldr	r2, [pc, #20]	; (dac0 <am_hal_adc_sw_trigger+0x1c>)
    daaa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    daae:	4293      	cmp	r3, r2
    dab0:	d001      	beq.n	dab6 <am_hal_adc_sw_trigger+0x12>
    dab2:	2002      	movs	r0, #2
    dab4:	4770      	bx	lr
    dab6:	4b03      	ldr	r3, [pc, #12]	; (dac4 <am_hal_adc_sw_trigger+0x20>)
    dab8:	2237      	movs	r2, #55	; 0x37
    daba:	609a      	str	r2, [r3, #8]
    dabc:	2000      	movs	r0, #0
    dabe:	4770      	bx	lr
    dac0:	01afafaf 	.word	0x01afafaf
    dac4:	50010000 	.word	0x50010000

0000dac8 <am_hal_adc_power_control>:
    dac8:	b140      	cbz	r0, dadc <am_hal_adc_power_control+0x14>
    daca:	6803      	ldr	r3, [r0, #0]
    dacc:	b570      	push	{r4, r5, r6, lr}
    dace:	4c2e      	ldr	r4, [pc, #184]	; (db88 <am_hal_adc_power_control+0xc0>)
    dad0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dad4:	42a3      	cmp	r3, r4
    dad6:	d003      	beq.n	dae0 <am_hal_adc_power_control+0x18>
    dad8:	2002      	movs	r0, #2
    dada:	bd70      	pop	{r4, r5, r6, pc}
    dadc:	2002      	movs	r0, #2
    dade:	4770      	bx	lr
    dae0:	4604      	mov	r4, r0
    dae2:	4615      	mov	r5, r2
    dae4:	460e      	mov	r6, r1
    dae6:	b329      	cbz	r1, db34 <am_hal_adc_power_control+0x6c>
    dae8:	2902      	cmp	r1, #2
    daea:	d821      	bhi.n	db30 <am_hal_adc_power_control+0x68>
    daec:	b1da      	cbz	r2, db26 <am_hal_adc_power_control+0x5e>
    daee:	4b27      	ldr	r3, [pc, #156]	; (db8c <am_hal_adc_power_control+0xc4>)
    daf0:	68da      	ldr	r2, [r3, #12]
    daf2:	6142      	str	r2, [r0, #20]
    daf4:	691a      	ldr	r2, [r3, #16]
    daf6:	6182      	str	r2, [r0, #24]
    daf8:	695a      	ldr	r2, [r3, #20]
    dafa:	61c2      	str	r2, [r0, #28]
    dafc:	699a      	ldr	r2, [r3, #24]
    dafe:	6202      	str	r2, [r0, #32]
    db00:	69da      	ldr	r2, [r3, #28]
    db02:	6242      	str	r2, [r0, #36]	; 0x24
    db04:	6a1a      	ldr	r2, [r3, #32]
    db06:	6282      	str	r2, [r0, #40]	; 0x28
    db08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    db0a:	62c2      	str	r2, [r0, #44]	; 0x2c
    db0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db0e:	6302      	str	r2, [r0, #48]	; 0x30
    db10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    db12:	6342      	str	r2, [r0, #52]	; 0x34
    db14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    db16:	6382      	str	r2, [r0, #56]	; 0x38
    db18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    db1c:	63c2      	str	r2, [r0, #60]	; 0x3c
    db1e:	681b      	ldr	r3, [r3, #0]
    db20:	6103      	str	r3, [r0, #16]
    db22:	2301      	movs	r3, #1
    db24:	7303      	strb	r3, [r0, #12]
    db26:	200a      	movs	r0, #10
    db28:	f001 f9cc 	bl	eec4 <am_hal_pwrctrl_periph_disable>
    db2c:	2000      	movs	r0, #0
    db2e:	bd70      	pop	{r4, r5, r6, pc}
    db30:	2006      	movs	r0, #6
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	b11a      	cbz	r2, db3e <am_hal_adc_power_control+0x76>
    db36:	7b03      	ldrb	r3, [r0, #12]
    db38:	b933      	cbnz	r3, db48 <am_hal_adc_power_control+0x80>
    db3a:	2007      	movs	r0, #7
    db3c:	bd70      	pop	{r4, r5, r6, pc}
    db3e:	200a      	movs	r0, #10
    db40:	f001 f996 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    db44:	4628      	mov	r0, r5
    db46:	bd70      	pop	{r4, r5, r6, pc}
    db48:	200a      	movs	r0, #10
    db4a:	f001 f991 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    db4e:	4b0f      	ldr	r3, [pc, #60]	; (db8c <am_hal_adc_power_control+0xc4>)
    db50:	6962      	ldr	r2, [r4, #20]
    db52:	60da      	str	r2, [r3, #12]
    db54:	69a2      	ldr	r2, [r4, #24]
    db56:	611a      	str	r2, [r3, #16]
    db58:	69e2      	ldr	r2, [r4, #28]
    db5a:	615a      	str	r2, [r3, #20]
    db5c:	6a22      	ldr	r2, [r4, #32]
    db5e:	619a      	str	r2, [r3, #24]
    db60:	6a62      	ldr	r2, [r4, #36]	; 0x24
    db62:	61da      	str	r2, [r3, #28]
    db64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    db66:	621a      	str	r2, [r3, #32]
    db68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    db6a:	625a      	str	r2, [r3, #36]	; 0x24
    db6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    db6e:	629a      	str	r2, [r3, #40]	; 0x28
    db70:	6b62      	ldr	r2, [r4, #52]	; 0x34
    db72:	62da      	str	r2, [r3, #44]	; 0x2c
    db74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    db76:	631a      	str	r2, [r3, #48]	; 0x30
    db78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    db7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    db7e:	6922      	ldr	r2, [r4, #16]
    db80:	601a      	str	r2, [r3, #0]
    db82:	4630      	mov	r0, r6
    db84:	7326      	strb	r6, [r4, #12]
    db86:	bd70      	pop	{r4, r5, r6, pc}
    db88:	01afafaf 	.word	0x01afafaf
    db8c:	50010000 	.word	0x50010000

0000db90 <am_hal_cachectrl_config>:
    db90:	b530      	push	{r4, r5, lr}
    db92:	b083      	sub	sp, #12
    db94:	4605      	mov	r5, r0
    db96:	f000 fb71 	bl	e27c <am_hal_interrupt_master_disable>
    db9a:	4c11      	ldr	r4, [pc, #68]	; (dbe0 <am_hal_cachectrl_config+0x50>)
    db9c:	9001      	str	r0, [sp, #4]
    db9e:	6823      	ldr	r3, [r4, #0]
    dba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    dba4:	6023      	str	r3, [r4, #0]
    dba6:	9801      	ldr	r0, [sp, #4]
    dba8:	f000 fb6c 	bl	e284 <am_hal_interrupt_master_set>
    dbac:	78eb      	ldrb	r3, [r5, #3]
    dbae:	782a      	ldrb	r2, [r5, #0]
    dbb0:	78a8      	ldrb	r0, [r5, #2]
    dbb2:	7869      	ldrb	r1, [r5, #1]
    dbb4:	005b      	lsls	r3, r3, #1
    dbb6:	0112      	lsls	r2, r2, #4
    dbb8:	b2d2      	uxtb	r2, r2
    dbba:	f003 0302 	and.w	r3, r3, #2
    dbbe:	4313      	orrs	r3, r2
    dbc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dbc4:	0080      	lsls	r0, r0, #2
    dbc6:	f000 000c 	and.w	r0, r0, #12
    dbca:	020a      	lsls	r2, r1, #8
    dbcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dbd0:	4303      	orrs	r3, r0
    dbd2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    dbd6:	4313      	orrs	r3, r2
    dbd8:	2000      	movs	r0, #0
    dbda:	6023      	str	r3, [r4, #0]
    dbdc:	b003      	add	sp, #12
    dbde:	bd30      	pop	{r4, r5, pc}
    dbe0:	40018000 	.word	0x40018000

0000dbe4 <am_hal_cachectrl_enable>:
    dbe4:	4a03      	ldr	r2, [pc, #12]	; (dbf4 <am_hal_cachectrl_enable+0x10>)
    dbe6:	6813      	ldr	r3, [r2, #0]
    dbe8:	f043 0301 	orr.w	r3, r3, #1
    dbec:	6013      	str	r3, [r2, #0]
    dbee:	2000      	movs	r0, #0
    dbf0:	4770      	bx	lr
    dbf2:	bf00      	nop
    dbf4:	40018000 	.word	0x40018000

0000dbf8 <am_hal_clkgen_control>:
    dbf8:	4b32      	ldr	r3, [pc, #200]	; (dcc4 <am_hal_clkgen_control+0xcc>)
    dbfa:	681a      	ldr	r2, [r3, #0]
    dbfc:	b912      	cbnz	r2, dc04 <am_hal_clkgen_control+0xc>
    dbfe:	4a32      	ldr	r2, [pc, #200]	; (dcc8 <am_hal_clkgen_control+0xd0>)
    dc00:	6812      	ldr	r2, [r2, #0]
    dc02:	601a      	str	r2, [r3, #0]
    dc04:	2809      	cmp	r0, #9
    dc06:	d85a      	bhi.n	dcbe <am_hal_clkgen_control+0xc6>
    dc08:	e8df f000 	tbb	[pc, r0]
    dc0c:	261e160d 	.word	0x261e160d
    dc10:	4640362e 	.word	0x4640362e
    dc14:	054e      	.short	0x054e
    dc16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc1a:	2000      	movs	r0, #0
    dc1c:	6a1a      	ldr	r2, [r3, #32]
    dc1e:	f36f 0200 	bfc	r2, #0, #1
    dc22:	621a      	str	r2, [r3, #32]
    dc24:	4770      	bx	lr
    dc26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc2a:	2200      	movs	r2, #0
    dc2c:	2147      	movs	r1, #71	; 0x47
    dc2e:	6159      	str	r1, [r3, #20]
    dc30:	4610      	mov	r0, r2
    dc32:	619a      	str	r2, [r3, #24]
    dc34:	615a      	str	r2, [r3, #20]
    dc36:	4770      	bx	lr
    dc38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc3c:	2000      	movs	r0, #0
    dc3e:	68d3      	ldr	r3, [r2, #12]
    dc40:	f023 0301 	bic.w	r3, r3, #1
    dc44:	60d3      	str	r3, [r2, #12]
    dc46:	4770      	bx	lr
    dc48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc4c:	2000      	movs	r0, #0
    dc4e:	68d3      	ldr	r3, [r2, #12]
    dc50:	f023 0302 	bic.w	r3, r3, #2
    dc54:	60d3      	str	r3, [r2, #12]
    dc56:	4770      	bx	lr
    dc58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc5c:	2000      	movs	r0, #0
    dc5e:	68d3      	ldr	r3, [r2, #12]
    dc60:	f043 0301 	orr.w	r3, r3, #1
    dc64:	60d3      	str	r3, [r2, #12]
    dc66:	4770      	bx	lr
    dc68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc6c:	2000      	movs	r0, #0
    dc6e:	68d3      	ldr	r3, [r2, #12]
    dc70:	f043 0302 	orr.w	r3, r3, #2
    dc74:	60d3      	str	r3, [r2, #12]
    dc76:	4770      	bx	lr
    dc78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc7c:	2200      	movs	r2, #0
    dc7e:	2047      	movs	r0, #71	; 0x47
    dc80:	2101      	movs	r1, #1
    dc82:	6158      	str	r0, [r3, #20]
    dc84:	6199      	str	r1, [r3, #24]
    dc86:	4610      	mov	r0, r2
    dc88:	615a      	str	r2, [r3, #20]
    dc8a:	4770      	bx	lr
    dc8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc90:	2000      	movs	r0, #0
    dc92:	68da      	ldr	r2, [r3, #12]
    dc94:	60da      	str	r2, [r3, #12]
    dc96:	4770      	bx	lr
    dc98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc9c:	2000      	movs	r0, #0
    dc9e:	68d3      	ldr	r3, [r2, #12]
    dca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dca4:	60d3      	str	r3, [r2, #12]
    dca6:	4770      	bx	lr
    dca8:	b139      	cbz	r1, dcba <am_hal_clkgen_control+0xc2>
    dcaa:	680b      	ldr	r3, [r1, #0]
    dcac:	f043 0301 	orr.w	r3, r3, #1
    dcb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dcb4:	2000      	movs	r0, #0
    dcb6:	6213      	str	r3, [r2, #32]
    dcb8:	4770      	bx	lr
    dcba:	4b04      	ldr	r3, [pc, #16]	; (dccc <am_hal_clkgen_control+0xd4>)
    dcbc:	e7f8      	b.n	dcb0 <am_hal_clkgen_control+0xb8>
    dcbe:	2006      	movs	r0, #6
    dcc0:	4770      	bx	lr
    dcc2:	bf00      	nop
    dcc4:	10001170 	.word	0x10001170
    dcc8:	4ffff000 	.word	0x4ffff000
    dccc:	0025b801 	.word	0x0025b801

0000dcd0 <am_hal_ctimer_config_single>:
    dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd2:	b083      	sub	sp, #12
    dcd4:	460e      	mov	r6, r1
    dcd6:	4614      	mov	r4, r2
    dcd8:	0147      	lsls	r7, r0, #5
    dcda:	4605      	mov	r5, r0
    dcdc:	f000 face 	bl	e27c <am_hal_interrupt_master_disable>
    dce0:	4a19      	ldr	r2, [pc, #100]	; (dd48 <am_hal_ctimer_config_single+0x78>)
    dce2:	9001      	str	r0, [sp, #4]
    dce4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dce8:	58bb      	ldr	r3, [r7, r2]
    dcea:	d021      	beq.n	dd30 <am_hal_ctimer_config_single+0x60>
    dcec:	ea23 0306 	bic.w	r3, r3, r6
    dcf0:	1c71      	adds	r1, r6, #1
    dcf2:	ea43 0304 	orr.w	r3, r3, r4
    dcf6:	d00c      	beq.n	dd12 <am_hal_ctimer_config_single+0x42>
    dcf8:	50bb      	str	r3, [r7, r2]
    dcfa:	9801      	ldr	r0, [sp, #4]
    dcfc:	f000 fac2 	bl	e284 <am_hal_interrupt_master_set>
    dd00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd04:	429e      	cmp	r6, r3
    dd06:	d01c      	beq.n	dd42 <am_hal_ctimer_config_single+0x72>
    dd08:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd0c:	d017      	beq.n	dd3e <am_hal_ctimer_config_single+0x6e>
    dd0e:	b003      	add	sp, #12
    dd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dd16:	50bb      	str	r3, [r7, r2]
    dd18:	9801      	ldr	r0, [sp, #4]
    dd1a:	f000 fab3 	bl	e284 <am_hal_interrupt_master_set>
    dd1e:	2200      	movs	r2, #0
    dd20:	4b0a      	ldr	r3, [pc, #40]	; (dd4c <am_hal_ctimer_config_single+0x7c>)
    dd22:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dd26:	f3c4 0444 	ubfx	r4, r4, #1, #5
    dd2a:	54ac      	strb	r4, [r5, r2]
    dd2c:	b003      	add	sp, #12
    dd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd30:	0424      	lsls	r4, r4, #16
    dd32:	b29b      	uxth	r3, r3
    dd34:	4323      	orrs	r3, r4
    dd36:	50bb      	str	r3, [r7, r2]
    dd38:	9801      	ldr	r0, [sp, #4]
    dd3a:	f000 faa3 	bl	e284 <am_hal_interrupt_master_set>
    dd3e:	2201      	movs	r2, #1
    dd40:	e7ee      	b.n	dd20 <am_hal_ctimer_config_single+0x50>
    dd42:	2200      	movs	r2, #0
    dd44:	e7ec      	b.n	dd20 <am_hal_ctimer_config_single+0x50>
    dd46:	bf00      	nop
    dd48:	4000800c 	.word	0x4000800c
    dd4c:	10001048 	.word	0x10001048

0000dd50 <am_hal_ctimer_start>:
    dd50:	b570      	push	{r4, r5, r6, lr}
    dd52:	b082      	sub	sp, #8
    dd54:	460c      	mov	r4, r1
    dd56:	0146      	lsls	r6, r0, #5
    dd58:	4605      	mov	r5, r0
    dd5a:	f000 fa8f 	bl	e27c <am_hal_interrupt_master_disable>
    dd5e:	4a0f      	ldr	r2, [pc, #60]	; (dd9c <am_hal_ctimer_start+0x4c>)
    dd60:	9001      	str	r0, [sp, #4]
    dd62:	58b3      	ldr	r3, [r6, r2]
    dd64:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    dd68:	ea23 0301 	bic.w	r3, r3, r1
    dd6c:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    dd70:	430b      	orrs	r3, r1
    dd72:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dd76:	bf0c      	ite	eq
    dd78:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dd7c:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dd80:	50b3      	str	r3, [r6, r2]
    dd82:	4b07      	ldr	r3, [pc, #28]	; (dda0 <am_hal_ctimer_start+0x50>)
    dd84:	9801      	ldr	r0, [sp, #4]
    dd86:	bf0c      	ite	eq
    dd88:	2101      	moveq	r1, #1
    dd8a:	2100      	movne	r1, #0
    dd8c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    dd90:	545c      	strb	r4, [r3, r1]
    dd92:	f000 fa77 	bl	e284 <am_hal_interrupt_master_set>
    dd96:	b002      	add	sp, #8
    dd98:	bd70      	pop	{r4, r5, r6, pc}
    dd9a:	bf00      	nop
    dd9c:	4000800c 	.word	0x4000800c
    dda0:	10001048 	.word	0x10001048

0000dda4 <am_hal_ctimer_period_set>:
    dda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dda8:	b082      	sub	sp, #8
    ddaa:	4689      	mov	r9, r1
    ddac:	4698      	mov	r8, r3
    ddae:	0147      	lsls	r7, r0, #5
    ddb0:	4614      	mov	r4, r2
    ddb2:	f000 fa63 	bl	e27c <am_hal_interrupt_master_disable>
    ddb6:	f8df a094 	ldr.w	sl, [pc, #148]	; de4c <am_hal_ctimer_period_set+0xa8>
    ddba:	9001      	str	r0, [sp, #4]
    ddbc:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    ddc0:	4d20      	ldr	r5, [pc, #128]	; (de44 <am_hal_ctimer_period_set+0xa0>)
    ddc2:	4e21      	ldr	r6, [pc, #132]	; (de48 <am_hal_ctimer_period_set+0xa4>)
    ddc4:	f857 300a 	ldr.w	r3, [r7, sl]
    ddc8:	d01a      	beq.n	de00 <am_hal_ctimer_period_set+0x5c>
    ddca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    ddce:	2b80      	cmp	r3, #128	; 0x80
    ddd0:	d01b      	beq.n	de0a <am_hal_ctimer_period_set+0x66>
    ddd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ddd6:	2000      	movs	r0, #0
    ddd8:	4591      	cmp	r9, r2
    ddda:	4603      	mov	r3, r0
    dddc:	d01e      	beq.n	de1c <am_hal_ctimer_period_set+0x78>
    ddde:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dde2:	d025      	beq.n	de30 <am_hal_ctimer_period_set+0x8c>
    dde4:	0c1b      	lsrs	r3, r3, #16
    dde6:	b2a2      	uxth	r2, r4
    dde8:	041b      	lsls	r3, r3, #16
    ddea:	4310      	orrs	r0, r2
    ddec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    ddf0:	5178      	str	r0, [r7, r5]
    ddf2:	51bb      	str	r3, [r7, r6]
    ddf4:	9801      	ldr	r0, [sp, #4]
    ddf6:	f000 fa45 	bl	e284 <am_hal_interrupt_master_set>
    ddfa:	b002      	add	sp, #8
    ddfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de00:	0c1b      	lsrs	r3, r3, #16
    de02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    de06:	2b80      	cmp	r3, #128	; 0x80
    de08:	d111      	bne.n	de2e <am_hal_ctimer_period_set+0x8a>
    de0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de0e:	4591      	cmp	r9, r2
    de10:	ea4f 4004 	mov.w	r0, r4, lsl #16
    de14:	4623      	mov	r3, r4
    de16:	ebc8 0404 	rsb	r4, r8, r4
    de1a:	d1e0      	bne.n	ddde <am_hal_ctimer_period_set+0x3a>
    de1c:	b2a3      	uxth	r3, r4
    de1e:	4318      	orrs	r0, r3
    de20:	5178      	str	r0, [r7, r5]
    de22:	9801      	ldr	r0, [sp, #4]
    de24:	f000 fa2e 	bl	e284 <am_hal_interrupt_master_set>
    de28:	b002      	add	sp, #8
    de2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de2e:	2000      	movs	r0, #0
    de30:	b2a3      	uxth	r3, r4
    de32:	4318      	orrs	r0, r3
    de34:	51b8      	str	r0, [r7, r6]
    de36:	9801      	ldr	r0, [sp, #4]
    de38:	f000 fa24 	bl	e284 <am_hal_interrupt_master_set>
    de3c:	b002      	add	sp, #8
    de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de42:	bf00      	nop
    de44:	40008004 	.word	0x40008004
    de48:	40008008 	.word	0x40008008
    de4c:	4000800c 	.word	0x4000800c

0000de50 <am_hal_ctimer_int_enable>:
    de50:	b510      	push	{r4, lr}
    de52:	b082      	sub	sp, #8
    de54:	4604      	mov	r4, r0
    de56:	f000 fa11 	bl	e27c <am_hal_interrupt_master_disable>
    de5a:	4b06      	ldr	r3, [pc, #24]	; (de74 <am_hal_ctimer_int_enable+0x24>)
    de5c:	9001      	str	r0, [sp, #4]
    de5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    de62:	4314      	orrs	r4, r2
    de64:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    de68:	9801      	ldr	r0, [sp, #4]
    de6a:	f000 fa0b 	bl	e284 <am_hal_interrupt_master_set>
    de6e:	b002      	add	sp, #8
    de70:	bd10      	pop	{r4, pc}
    de72:	bf00      	nop
    de74:	40008000 	.word	0x40008000

0000de78 <am_hal_ctimer_int_clear>:
    de78:	b510      	push	{r4, lr}
    de7a:	b082      	sub	sp, #8
    de7c:	4604      	mov	r4, r0
    de7e:	f000 f9fd 	bl	e27c <am_hal_interrupt_master_disable>
    de82:	4b04      	ldr	r3, [pc, #16]	; (de94 <am_hal_ctimer_int_clear+0x1c>)
    de84:	9001      	str	r0, [sp, #4]
    de86:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    de8a:	9801      	ldr	r0, [sp, #4]
    de8c:	f000 f9fa 	bl	e284 <am_hal_interrupt_master_set>
    de90:	b002      	add	sp, #8
    de92:	bd10      	pop	{r4, pc}
    de94:	40008000 	.word	0x40008000

0000de98 <am_hal_flash_delay>:
    de98:	4b00      	ldr	r3, [pc, #0]	; (de9c <am_hal_flash_delay+0x4>)
    de9a:	4718      	bx	r3
    de9c:	0800009d 	.word	0x0800009d

0000dea0 <am_hal_flash_delay_status_check>:
    dea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dea4:	f89d 4018 	ldrb.w	r4, [sp, #24]
    dea8:	460d      	mov	r5, r1
    deaa:	4616      	mov	r6, r2
    deac:	461f      	mov	r7, r3
    deae:	b17c      	cbz	r4, ded0 <am_hal_flash_delay_status_check+0x30>
    deb0:	4604      	mov	r4, r0
    deb2:	f8df 8040 	ldr.w	r8, [pc, #64]	; def4 <am_hal_flash_delay_status_check+0x54>
    deb6:	e002      	b.n	debe <am_hal_flash_delay_status_check+0x1e>
    deb8:	b1c4      	cbz	r4, deec <am_hal_flash_delay_status_check+0x4c>
    deba:	47c0      	blx	r8
    debc:	3c01      	subs	r4, #1
    debe:	682b      	ldr	r3, [r5, #0]
    dec0:	4033      	ands	r3, r6
    dec2:	429f      	cmp	r7, r3
    dec4:	f04f 0001 	mov.w	r0, #1
    dec8:	d1f6      	bne.n	deb8 <am_hal_flash_delay_status_check+0x18>
    deca:	2000      	movs	r0, #0
    decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ded0:	f8df 8020 	ldr.w	r8, [pc, #32]	; def4 <am_hal_flash_delay_status_check+0x54>
    ded4:	4604      	mov	r4, r0
    ded6:	e002      	b.n	dede <am_hal_flash_delay_status_check+0x3e>
    ded8:	b144      	cbz	r4, deec <am_hal_flash_delay_status_check+0x4c>
    deda:	47c0      	blx	r8
    dedc:	3c01      	subs	r4, #1
    dede:	682b      	ldr	r3, [r5, #0]
    dee0:	4033      	ands	r3, r6
    dee2:	429f      	cmp	r7, r3
    dee4:	f04f 0001 	mov.w	r0, #1
    dee8:	d0f6      	beq.n	ded8 <am_hal_flash_delay_status_check+0x38>
    deea:	e7ee      	b.n	deca <am_hal_flash_delay_status_check+0x2a>
    deec:	2004      	movs	r0, #4
    deee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    def2:	bf00      	nop
    def4:	0800009d 	.word	0x0800009d

0000def8 <am_hal_gpio_pinconfig>:
    def8:	2831      	cmp	r0, #49	; 0x31
    defa:	d901      	bls.n	df00 <am_hal_gpio_pinconfig+0x8>
    defc:	2006      	movs	r0, #6
    defe:	4770      	bx	lr
    df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df04:	f001 0307 	and.w	r3, r1, #7
    df08:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    df0c:	b085      	sub	sp, #20
    df0e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    df12:	d014      	beq.n	df3e <am_hal_gpio_pinconfig+0x46>
    df14:	f3c1 1642 	ubfx	r6, r1, #5, #3
    df18:	1db4      	adds	r4, r6, #6
    df1a:	f004 0407 	and.w	r4, r4, #7
    df1e:	2c03      	cmp	r4, #3
    df20:	f042 0201 	orr.w	r2, r2, #1
    df24:	f200 80ae 	bhi.w	e084 <am_hal_gpio_pinconfig+0x18c>
    df28:	4c85      	ldr	r4, [pc, #532]	; (e140 <am_hal_gpio_pinconfig+0x248>)
    df2a:	5c24      	ldrb	r4, [r4, r0]
    df2c:	07e7      	lsls	r7, r4, #31
    df2e:	d403      	bmi.n	df38 <am_hal_gpio_pinconfig+0x40>
    df30:	4884      	ldr	r0, [pc, #528]	; (e144 <am_hal_gpio_pinconfig+0x24c>)
    df32:	b005      	add	sp, #20
    df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df38:	3e02      	subs	r6, #2
    df3a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    df3e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    df42:	2c00      	cmp	r4, #0
    df44:	f040 8098 	bne.w	e078 <am_hal_gpio_pinconfig+0x180>
    df48:	4c7f      	ldr	r4, [pc, #508]	; (e148 <am_hal_gpio_pinconfig+0x250>)
    df4a:	4d80      	ldr	r5, [pc, #512]	; (e14c <am_hal_gpio_pinconfig+0x254>)
    df4c:	5c24      	ldrb	r4, [r4, r0]
    df4e:	5c2d      	ldrb	r5, [r5, r0]
    df50:	411c      	asrs	r4, r3
    df52:	f014 0f01 	tst.w	r4, #1
    df56:	bf0c      	ite	eq
    df58:	2400      	moveq	r4, #0
    df5a:	2402      	movne	r4, #2
    df5c:	42ab      	cmp	r3, r5
    df5e:	ea42 0204 	orr.w	r2, r2, r4
    df62:	f000 809b 	beq.w	e09c <am_hal_gpio_pinconfig+0x1a4>
    df66:	f3c1 3341 	ubfx	r3, r1, #13, #2
    df6a:	105d      	asrs	r5, r3, #1
    df6c:	f3c1 2681 	ubfx	r6, r1, #10, #2
    df70:	00db      	lsls	r3, r3, #3
    df72:	f3c1 2707 	ubfx	r7, r1, #8, #8
    df76:	f003 0408 	and.w	r4, r3, #8
    df7a:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    df7e:	f007 060c 	and.w	r6, r7, #12
    df82:	f3c1 3500 	ubfx	r5, r1, #12, #1
    df86:	2e04      	cmp	r6, #4
    df88:	ea43 0304 	orr.w	r3, r3, r4
    df8c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    df90:	462c      	mov	r4, r5
    df92:	f000 8090 	beq.w	e0b6 <am_hal_gpio_pinconfig+0x1be>
    df96:	4c6e      	ldr	r4, [pc, #440]	; (e150 <am_hal_gpio_pinconfig+0x258>)
    df98:	6824      	ldr	r4, [r4, #0]
    df9a:	ebc4 0901 	rsb	r9, r4, r1
    df9e:	fab9 f989 	clz	r9, r9
    dfa2:	ea4f 1959 	mov.w	r9, r9, lsr #5
    dfa6:	f017 0f60 	tst.w	r7, #96	; 0x60
    dfaa:	bf04      	itt	eq
    dfac:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    dfb0:	f364 0300 	bfieq	r3, r4, #0, #1
    dfb4:	0084      	lsls	r4, r0, #2
    dfb6:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dfba:	2902      	cmp	r1, #2
    dfbc:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    dfc0:	d07c      	beq.n	e0bc <am_hal_gpio_pinconfig+0x1c4>
    dfc2:	f200 8082 	bhi.w	e0ca <am_hal_gpio_pinconfig+0x1d2>
    dfc6:	2901      	cmp	r1, #1
    dfc8:	bf08      	it	eq
    dfca:	f042 0204 	orreq.w	r2, r2, #4
    dfce:	f005 0518 	and.w	r5, r5, #24
    dfd2:	f04f 0800 	mov.w	r8, #0
    dfd6:	f004 041c 	and.w	r4, r4, #28
    dfda:	0841      	lsrs	r1, r0, #1
    dfdc:	f020 0a03 	bic.w	sl, r0, #3
    dfe0:	270f      	movs	r7, #15
    dfe2:	f021 0103 	bic.w	r1, r1, #3
    dfe6:	40a7      	lsls	r7, r4
    dfe8:	26ff      	movs	r6, #255	; 0xff
    dfea:	fa03 f404 	lsl.w	r4, r3, r4
    dfee:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    dff2:	40ae      	lsls	r6, r5
    dff4:	9101      	str	r1, [sp, #4]
    dff6:	9300      	str	r3, [sp, #0]
    dff8:	4683      	mov	fp, r0
    dffa:	fa02 f505 	lsl.w	r5, r2, r5
    dffe:	f000 f93d 	bl	e27c <am_hal_interrupt_master_disable>
    e002:	9b00      	ldr	r3, [sp, #0]
    e004:	9003      	str	r0, [sp, #12]
    e006:	43ff      	mvns	r7, r7
    e008:	43f6      	mvns	r6, r6
    e00a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e00e:	f8df e160 	ldr.w	lr, [pc, #352]	; e170 <am_hal_gpio_pinconfig+0x278>
    e012:	4850      	ldr	r0, [pc, #320]	; (e154 <am_hal_gpio_pinconfig+0x25c>)
    e014:	9901      	ldr	r1, [sp, #4]
    e016:	f1b9 0f00 	cmp.w	r9, #0
    e01a:	d00b      	beq.n	e034 <am_hal_gpio_pinconfig+0x13c>
    e01c:	f00b 021f 	and.w	r2, fp, #31
    e020:	f04f 0901 	mov.w	r9, #1
    e024:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    e028:	f8df c148 	ldr.w	ip, [pc, #328]	; e174 <am_hal_gpio_pinconfig+0x27c>
    e02c:	fa09 f202 	lsl.w	r2, r9, r2
    e030:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    e034:	4a48      	ldr	r2, [pc, #288]	; (e158 <am_hal_gpio_pinconfig+0x260>)
    e036:	f04f 0c73 	mov.w	ip, #115	; 0x73
    e03a:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    e03e:	f8d3 c000 	ldr.w	ip, [r3]
    e042:	ea06 0c0c 	and.w	ip, r6, ip
    e046:	ea4c 0505 	orr.w	r5, ip, r5
    e04a:	601d      	str	r5, [r3, #0]
    e04c:	f851 300e 	ldr.w	r3, [r1, lr]
    e050:	403b      	ands	r3, r7
    e052:	4323      	orrs	r3, r4
    e054:	f841 300e 	str.w	r3, [r1, lr]
    e058:	f85a 3000 	ldr.w	r3, [sl, r0]
    e05c:	401e      	ands	r6, r3
    e05e:	2400      	movs	r4, #0
    e060:	ea46 0608 	orr.w	r6, r6, r8
    e064:	f84a 6000 	str.w	r6, [sl, r0]
    e068:	6614      	str	r4, [r2, #96]	; 0x60
    e06a:	9803      	ldr	r0, [sp, #12]
    e06c:	f000 f90a 	bl	e284 <am_hal_interrupt_master_set>
    e070:	4620      	mov	r0, r4
    e072:	b005      	add	sp, #20
    e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e078:	2c01      	cmp	r4, #1
    e07a:	d015      	beq.n	e0a8 <am_hal_gpio_pinconfig+0x1b0>
    e07c:	2c02      	cmp	r4, #2
    e07e:	d032      	beq.n	e0e6 <am_hal_gpio_pinconfig+0x1ee>
    e080:	4836      	ldr	r0, [pc, #216]	; (e15c <am_hal_gpio_pinconfig+0x264>)
    e082:	e756      	b.n	df32 <am_hal_gpio_pinconfig+0x3a>
    e084:	2dc0      	cmp	r5, #192	; 0xc0
    e086:	d029      	beq.n	e0dc <am_hal_gpio_pinconfig+0x1e4>
    e088:	2d20      	cmp	r5, #32
    e08a:	f47f af58 	bne.w	df3e <am_hal_gpio_pinconfig+0x46>
    e08e:	4c2c      	ldr	r4, [pc, #176]	; (e140 <am_hal_gpio_pinconfig+0x248>)
    e090:	5c24      	ldrb	r4, [r4, r0]
    e092:	f014 0f09 	tst.w	r4, #9
    e096:	f47f af4b 	bne.w	df30 <am_hal_gpio_pinconfig+0x38>
    e09a:	e750      	b.n	df3e <am_hal_gpio_pinconfig+0x46>
    e09c:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e0a0:	2c07      	cmp	r4, #7
    e0a2:	d127      	bne.n	e0f4 <am_hal_gpio_pinconfig+0x1fc>
    e0a4:	482e      	ldr	r0, [pc, #184]	; (e160 <am_hal_gpio_pinconfig+0x268>)
    e0a6:	e744      	b.n	df32 <am_hal_gpio_pinconfig+0x3a>
    e0a8:	4c25      	ldr	r4, [pc, #148]	; (e140 <am_hal_gpio_pinconfig+0x248>)
    e0aa:	5c24      	ldrb	r4, [r4, r0]
    e0ac:	07a5      	lsls	r5, r4, #30
    e0ae:	d5e7      	bpl.n	e080 <am_hal_gpio_pinconfig+0x188>
    e0b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e0b4:	e748      	b.n	df48 <am_hal_gpio_pinconfig+0x50>
    e0b6:	f04f 0901 	mov.w	r9, #1
    e0ba:	e774      	b.n	dfa6 <am_hal_gpio_pinconfig+0xae>
    e0bc:	f005 0518 	and.w	r5, r5, #24
    e0c0:	f04f 0801 	mov.w	r8, #1
    e0c4:	fa08 f805 	lsl.w	r8, r8, r5
    e0c8:	e785      	b.n	dfd6 <am_hal_gpio_pinconfig+0xde>
    e0ca:	f005 0518 	and.w	r5, r5, #24
    e0ce:	f04f 0801 	mov.w	r8, #1
    e0d2:	f042 0204 	orr.w	r2, r2, #4
    e0d6:	fa08 f805 	lsl.w	r8, r8, r5
    e0da:	e77c      	b.n	dfd6 <am_hal_gpio_pinconfig+0xde>
    e0dc:	2814      	cmp	r0, #20
    e0de:	f43f af2e 	beq.w	df3e <am_hal_gpio_pinconfig+0x46>
    e0e2:	4820      	ldr	r0, [pc, #128]	; (e164 <am_hal_gpio_pinconfig+0x26c>)
    e0e4:	e725      	b.n	df32 <am_hal_gpio_pinconfig+0x3a>
    e0e6:	4c16      	ldr	r4, [pc, #88]	; (e140 <am_hal_gpio_pinconfig+0x248>)
    e0e8:	5c24      	ldrb	r4, [r4, r0]
    e0ea:	0764      	lsls	r4, r4, #29
    e0ec:	d5c8      	bpl.n	e080 <am_hal_gpio_pinconfig+0x188>
    e0ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e0f2:	e729      	b.n	df48 <am_hal_gpio_pinconfig+0x50>
    e0f4:	4d1c      	ldr	r5, [pc, #112]	; (e168 <am_hal_gpio_pinconfig+0x270>)
    e0f6:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e0fa:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e0fe:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e102:	429e      	cmp	r6, r3
    e104:	d00c      	beq.n	e120 <am_hal_gpio_pinconfig+0x228>
    e106:	0084      	lsls	r4, r0, #2
    e108:	4425      	add	r5, r4
    e10a:	786e      	ldrb	r6, [r5, #1]
    e10c:	429e      	cmp	r6, r3
    e10e:	d013      	beq.n	e138 <am_hal_gpio_pinconfig+0x240>
    e110:	78ae      	ldrb	r6, [r5, #2]
    e112:	429e      	cmp	r6, r3
    e114:	d00e      	beq.n	e134 <am_hal_gpio_pinconfig+0x23c>
    e116:	78ed      	ldrb	r5, [r5, #3]
    e118:	429d      	cmp	r5, r3
    e11a:	d00f      	beq.n	e13c <am_hal_gpio_pinconfig+0x244>
    e11c:	4813      	ldr	r0, [pc, #76]	; (e16c <am_hal_gpio_pinconfig+0x274>)
    e11e:	e708      	b.n	df32 <am_hal_gpio_pinconfig+0x3a>
    e120:	2300      	movs	r3, #0
    e122:	0084      	lsls	r4, r0, #2
    e124:	005b      	lsls	r3, r3, #1
    e126:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e12a:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e12e:	f04f 0900 	mov.w	r9, #0
    e132:	e740      	b.n	dfb6 <am_hal_gpio_pinconfig+0xbe>
    e134:	2302      	movs	r3, #2
    e136:	e7f5      	b.n	e124 <am_hal_gpio_pinconfig+0x22c>
    e138:	2301      	movs	r3, #1
    e13a:	e7f3      	b.n	e124 <am_hal_gpio_pinconfig+0x22c>
    e13c:	2303      	movs	r3, #3
    e13e:	e7f1      	b.n	e124 <am_hal_gpio_pinconfig+0x22c>
    e140:	0000fdcc 	.word	0x0000fdcc
    e144:	08000100 	.word	0x08000100
    e148:	0000fec8 	.word	0x0000fec8
    e14c:	0000ff04 	.word	0x0000ff04
    e150:	0000fefc 	.word	0x0000fefc
    e154:	400100e0 	.word	0x400100e0
    e158:	40010000 	.word	0x40010000
    e15c:	08000102 	.word	0x08000102
    e160:	08000103 	.word	0x08000103
    e164:	08000101 	.word	0x08000101
    e168:	0000fe00 	.word	0x0000fe00
    e16c:	08000104 	.word	0x08000104
    e170:	40010040 	.word	0x40010040
    e174:	400100b4 	.word	0x400100b4

0000e178 <am_hal_gpio_state_read>:
    e178:	b1ca      	cbz	r2, e1ae <am_hal_gpio_state_read+0x36>
    e17a:	2831      	cmp	r0, #49	; 0x31
    e17c:	d904      	bls.n	e188 <am_hal_gpio_state_read+0x10>
    e17e:	f04f 33ff 	mov.w	r3, #4294967295
    e182:	6013      	str	r3, [r2, #0]
    e184:	2005      	movs	r0, #5
    e186:	4770      	bx	lr
    e188:	2901      	cmp	r1, #1
    e18a:	ea4f 1350 	mov.w	r3, r0, lsr #5
    e18e:	f000 001f 	and.w	r0, r0, #31
    e192:	d00e      	beq.n	e1b2 <am_hal_gpio_state_read+0x3a>
    e194:	d315      	bcc.n	e1c2 <am_hal_gpio_state_read+0x4a>
    e196:	2902      	cmp	r1, #2
    e198:	d109      	bne.n	e1ae <am_hal_gpio_state_read+0x36>
    e19a:	490e      	ldr	r1, [pc, #56]	; (e1d4 <am_hal_gpio_state_read+0x5c>)
    e19c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e1a0:	fa23 f000 	lsr.w	r0, r3, r0
    e1a4:	f000 0001 	and.w	r0, r0, #1
    e1a8:	6010      	str	r0, [r2, #0]
    e1aa:	2000      	movs	r0, #0
    e1ac:	4770      	bx	lr
    e1ae:	2006      	movs	r0, #6
    e1b0:	4770      	bx	lr
    e1b2:	4909      	ldr	r1, [pc, #36]	; (e1d8 <am_hal_gpio_state_read+0x60>)
    e1b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e1b8:	fa23 f000 	lsr.w	r0, r3, r0
    e1bc:	f000 0001 	and.w	r0, r0, #1
    e1c0:	e7f2      	b.n	e1a8 <am_hal_gpio_state_read+0x30>
    e1c2:	4906      	ldr	r1, [pc, #24]	; (e1dc <am_hal_gpio_state_read+0x64>)
    e1c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e1c8:	fa23 f000 	lsr.w	r0, r3, r0
    e1cc:	f000 0001 	and.w	r0, r0, #1
    e1d0:	e7ea      	b.n	e1a8 <am_hal_gpio_state_read+0x30>
    e1d2:	bf00      	nop
    e1d4:	400100a0 	.word	0x400100a0
    e1d8:	40010088 	.word	0x40010088
    e1dc:	40010080 	.word	0x40010080

0000e1e0 <am_hal_gpio_state_write>:
    e1e0:	2831      	cmp	r0, #49	; 0x31
    e1e2:	d901      	bls.n	e1e8 <am_hal_gpio_state_write+0x8>
    e1e4:	2005      	movs	r0, #5
    e1e6:	4770      	bx	lr
    e1e8:	2905      	cmp	r1, #5
    e1ea:	d901      	bls.n	e1f0 <am_hal_gpio_state_write+0x10>
    e1ec:	2006      	movs	r0, #6
    e1ee:	4770      	bx	lr
    e1f0:	b570      	push	{r4, r5, r6, lr}
    e1f2:	f000 031f 	and.w	r3, r0, #31
    e1f6:	b082      	sub	sp, #8
    e1f8:	2201      	movs	r2, #1
    e1fa:	460d      	mov	r5, r1
    e1fc:	4604      	mov	r4, r0
    e1fe:	fa02 f603 	lsl.w	r6, r2, r3
    e202:	f000 f83b 	bl	e27c <am_hal_interrupt_master_disable>
    e206:	1e69      	subs	r1, r5, #1
    e208:	9001      	str	r0, [sp, #4]
    e20a:	0960      	lsrs	r0, r4, #5
    e20c:	2904      	cmp	r1, #4
    e20e:	d81c      	bhi.n	e24a <am_hal_gpio_state_write+0x6a>
    e210:	e8df f001 	tbb	[pc, r1]
    e214:	030c1017 	.word	0x030c1017
    e218:	1f          	.byte	0x1f
    e219:	00          	.byte	0x00
    e21a:	4b11      	ldr	r3, [pc, #68]	; (e260 <am_hal_gpio_state_write+0x80>)
    e21c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e220:	9801      	ldr	r0, [sp, #4]
    e222:	f000 f82f 	bl	e284 <am_hal_interrupt_master_set>
    e226:	2000      	movs	r0, #0
    e228:	b002      	add	sp, #8
    e22a:	bd70      	pop	{r4, r5, r6, pc}
    e22c:	4b0d      	ldr	r3, [pc, #52]	; (e264 <am_hal_gpio_state_write+0x84>)
    e22e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e232:	e7f5      	b.n	e220 <am_hal_gpio_state_write+0x40>
    e234:	4a0c      	ldr	r2, [pc, #48]	; (e268 <am_hal_gpio_state_write+0x88>)
    e236:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e23a:	4073      	eors	r3, r6
    e23c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e240:	e7ee      	b.n	e220 <am_hal_gpio_state_write+0x40>
    e242:	4b0a      	ldr	r3, [pc, #40]	; (e26c <am_hal_gpio_state_write+0x8c>)
    e244:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e248:	e7ea      	b.n	e220 <am_hal_gpio_state_write+0x40>
    e24a:	4b09      	ldr	r3, [pc, #36]	; (e270 <am_hal_gpio_state_write+0x90>)
    e24c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e250:	e7e6      	b.n	e220 <am_hal_gpio_state_write+0x40>
    e252:	4a04      	ldr	r2, [pc, #16]	; (e264 <am_hal_gpio_state_write+0x84>)
    e254:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e258:	4073      	eors	r3, r6
    e25a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e25e:	e7df      	b.n	e220 <am_hal_gpio_state_write+0x40>
    e260:	400100a8 	.word	0x400100a8
    e264:	400100b4 	.word	0x400100b4
    e268:	40010088 	.word	0x40010088
    e26c:	40010090 	.word	0x40010090
    e270:	40010098 	.word	0x40010098

0000e274 <am_hal_interrupt_master_enable>:
    e274:	f3ef 8010 	mrs	r0, PRIMASK
    e278:	b662      	cpsie	i
    e27a:	4770      	bx	lr

0000e27c <am_hal_interrupt_master_disable>:
    e27c:	f3ef 8010 	mrs	r0, PRIMASK
    e280:	b672      	cpsid	i
    e282:	4770      	bx	lr

0000e284 <am_hal_interrupt_master_set>:
    e284:	f380 8810 	msr	PRIMASK, r0
    e288:	4770      	bx	lr
    e28a:	bf00      	nop

0000e28c <internal_iom_reset_on_error>:
    e28c:	b570      	push	{r4, r5, r6, lr}
    e28e:	6844      	ldr	r4, [r0, #4]
    e290:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e294:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e298:	3404      	adds	r4, #4
    e29a:	0324      	lsls	r4, r4, #12
    e29c:	2300      	movs	r3, #0
    e29e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e2a2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e2a6:	050b      	lsls	r3, r1, #20
    e2a8:	d52a      	bpl.n	e300 <internal_iom_reset_on_error+0x74>
    e2aa:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e2ae:	079e      	lsls	r6, r3, #30
    e2b0:	d450      	bmi.n	e354 <internal_iom_reset_on_error+0xc8>
    e2b2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e2b6:	079a      	lsls	r2, r3, #30
    e2b8:	d508      	bpl.n	e2cc <internal_iom_reset_on_error+0x40>
    e2ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e2be:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e2c2:	2b03      	cmp	r3, #3
    e2c4:	d9f5      	bls.n	e2b2 <internal_iom_reset_on_error+0x26>
    e2c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e2ca:	e7f6      	b.n	e2ba <internal_iom_reset_on_error+0x2e>
    e2cc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e2d0:	f003 0306 	and.w	r3, r3, #6
    e2d4:	2b04      	cmp	r3, #4
    e2d6:	d1f9      	bne.n	e2cc <internal_iom_reset_on_error+0x40>
    e2d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e2dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e2e0:	b173      	cbz	r3, e300 <internal_iom_reset_on_error+0x74>
    e2e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e2e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e2ea:	2b03      	cmp	r3, #3
    e2ec:	d9f4      	bls.n	e2d8 <internal_iom_reset_on_error+0x4c>
    e2ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e2f2:	e7f6      	b.n	e2e2 <internal_iom_reset_on_error+0x56>
    e2f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e2f8:	f003 0306 	and.w	r3, r3, #6
    e2fc:	2b04      	cmp	r3, #4
    e2fe:	d1f9      	bne.n	e2f4 <internal_iom_reset_on_error+0x68>
    e300:	06cb      	lsls	r3, r1, #27
    e302:	d520      	bpl.n	e346 <internal_iom_reset_on_error+0xba>
    e304:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e308:	f003 0306 	and.w	r3, r3, #6
    e30c:	2b04      	cmp	r3, #4
    e30e:	d1f9      	bne.n	e304 <internal_iom_reset_on_error+0x78>
    e310:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e314:	f36f 1304 	bfc	r3, #4, #1
    e318:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e31c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e320:	f36f 0341 	bfc	r3, #1, #1
    e324:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e328:	0040      	lsls	r0, r0, #1
    e32a:	f7ff fdb5 	bl	de98 <am_hal_flash_delay>
    e32e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e332:	f043 0302 	orr.w	r3, r3, #2
    e336:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e33a:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e33e:	f043 0310 	orr.w	r3, r3, #16
    e342:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e346:	f04f 33ff 	mov.w	r3, #4294967295
    e34a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e34e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e352:	bd70      	pop	{r4, r5, r6, pc}
    e354:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e358:	4e07      	ldr	r6, [pc, #28]	; (e378 <internal_iom_reset_on_error+0xec>)
    e35a:	2a00      	cmp	r2, #0
    e35c:	d0ca      	beq.n	e2f4 <internal_iom_reset_on_error+0x68>
    e35e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e362:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e366:	2b03      	cmp	r3, #3
    e368:	d9f9      	bls.n	e35e <internal_iom_reset_on_error+0xd2>
    e36a:	2a04      	cmp	r2, #4
    e36c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e370:	d9c0      	bls.n	e2f4 <internal_iom_reset_on_error+0x68>
    e372:	3a04      	subs	r2, #4
    e374:	e7f1      	b.n	e35a <internal_iom_reset_on_error+0xce>
    e376:	bf00      	nop
    e378:	deadbeef 	.word	0xdeadbeef

0000e37c <am_hal_iom_initialize>:
    e37c:	2805      	cmp	r0, #5
    e37e:	d901      	bls.n	e384 <am_hal_iom_initialize+0x8>
    e380:	2005      	movs	r0, #5
    e382:	4770      	bx	lr
    e384:	b1e1      	cbz	r1, e3c0 <am_hal_iom_initialize+0x44>
    e386:	b4f0      	push	{r4, r5, r6, r7}
    e388:	f640 049c 	movw	r4, #2204	; 0x89c
    e38c:	4e0d      	ldr	r6, [pc, #52]	; (e3c4 <am_hal_iom_initialize+0x48>)
    e38e:	fb04 f400 	mul.w	r4, r4, r0
    e392:	1935      	adds	r5, r6, r4
    e394:	4602      	mov	r2, r0
    e396:	78e8      	ldrb	r0, [r5, #3]
    e398:	f010 0301 	ands.w	r3, r0, #1
    e39c:	d002      	beq.n	e3a4 <am_hal_iom_initialize+0x28>
    e39e:	2007      	movs	r0, #7
    e3a0:	bcf0      	pop	{r4, r5, r6, r7}
    e3a2:	4770      	bx	lr
    e3a4:	f040 0001 	orr.w	r0, r0, #1
    e3a8:	f363 0041 	bfi	r0, r3, #1, #1
    e3ac:	70e8      	strb	r0, [r5, #3]
    e3ae:	5937      	ldr	r7, [r6, r4]
    e3b0:	4805      	ldr	r0, [pc, #20]	; (e3c8 <am_hal_iom_initialize+0x4c>)
    e3b2:	f360 0717 	bfi	r7, r0, #0, #24
    e3b6:	5137      	str	r7, [r6, r4]
    e3b8:	4618      	mov	r0, r3
    e3ba:	606a      	str	r2, [r5, #4]
    e3bc:	600d      	str	r5, [r1, #0]
    e3be:	e7ef      	b.n	e3a0 <am_hal_iom_initialize+0x24>
    e3c0:	2006      	movs	r0, #6
    e3c2:	4770      	bx	lr
    e3c4:	1000174c 	.word	0x1000174c
    e3c8:	00123456 	.word	0x00123456

0000e3cc <am_hal_iom_enable>:
    e3cc:	b128      	cbz	r0, e3da <am_hal_iom_enable+0xe>
    e3ce:	6803      	ldr	r3, [r0, #0]
    e3d0:	4a34      	ldr	r2, [pc, #208]	; (e4a4 <am_hal_iom_enable+0xd8>)
    e3d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3d6:	4293      	cmp	r3, r2
    e3d8:	d001      	beq.n	e3de <am_hal_iom_enable+0x12>
    e3da:	2002      	movs	r0, #2
    e3dc:	4770      	bx	lr
    e3de:	78c3      	ldrb	r3, [r0, #3]
    e3e0:	079b      	lsls	r3, r3, #30
    e3e2:	d45d      	bmi.n	e4a0 <am_hal_iom_enable+0xd4>
    e3e4:	6843      	ldr	r3, [r0, #4]
    e3e6:	7a01      	ldrb	r1, [r0, #8]
    e3e8:	b570      	push	{r4, r5, r6, lr}
    e3ea:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3ee:	3304      	adds	r3, #4
    e3f0:	031b      	lsls	r3, r3, #12
    e3f2:	3100      	adds	r1, #0
    e3f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e3f8:	bf18      	it	ne
    e3fa:	2101      	movne	r1, #1
    e3fc:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e400:	4291      	cmp	r1, r2
    e402:	bf0c      	ite	eq
    e404:	2201      	moveq	r2, #1
    e406:	2210      	movne	r2, #16
    e408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e40c:	68c3      	ldr	r3, [r0, #12]
    e40e:	b084      	sub	sp, #16
    e410:	4604      	mov	r4, r0
    e412:	2b00      	cmp	r3, #0
    e414:	d039      	beq.n	e48a <am_hal_iom_enable+0xbe>
    e416:	6843      	ldr	r3, [r0, #4]
    e418:	4923      	ldr	r1, [pc, #140]	; (e4a8 <am_hal_iom_enable+0xdc>)
    e41a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e41e:	3304      	adds	r3, #4
    e420:	031a      	lsls	r2, r3, #12
    e422:	2300      	movs	r3, #0
    e424:	6243      	str	r3, [r0, #36]	; 0x24
    e426:	61c3      	str	r3, [r0, #28]
    e428:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    e42c:	6902      	ldr	r2, [r0, #16]
    e42e:	6840      	ldr	r0, [r0, #4]
    e430:	68e6      	ldr	r6, [r4, #12]
    e432:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    e436:	2501      	movs	r5, #1
    e438:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    e43c:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    e440:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    e444:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    e448:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    e44c:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    e450:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    e454:	6223      	str	r3, [r4, #32]
    e456:	b2c0      	uxtb	r0, r0
    e458:	fa22 f305 	lsr.w	r3, r2, r5
    e45c:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    e460:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e464:	a901      	add	r1, sp, #4
    e466:	9301      	str	r3, [sp, #4]
    e468:	9602      	str	r6, [sp, #8]
    e46a:	f88d 500c 	strb.w	r5, [sp, #12]
    e46e:	f001 fa07 	bl	f880 <am_hal_cmdq_init>
    e472:	6863      	ldr	r3, [r4, #4]
    e474:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e478:	3304      	adds	r3, #4
    e47a:	031b      	lsls	r3, r3, #12
    e47c:	b960      	cbnz	r0, e498 <am_hal_iom_enable+0xcc>
    e47e:	f44f 7180 	mov.w	r1, #256	; 0x100
    e482:	2202      	movs	r2, #2
    e484:	6221      	str	r1, [r4, #32]
    e486:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e48a:	78e3      	ldrb	r3, [r4, #3]
    e48c:	f043 0302 	orr.w	r3, r3, #2
    e490:	70e3      	strb	r3, [r4, #3]
    e492:	2000      	movs	r0, #0
    e494:	b004      	add	sp, #16
    e496:	bd70      	pop	{r4, r5, r6, pc}
    e498:	2202      	movs	r2, #2
    e49a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e49e:	e7f9      	b.n	e494 <am_hal_iom_enable+0xc8>
    e4a0:	2000      	movs	r0, #0
    e4a2:	4770      	bx	lr
    e4a4:	01123456 	.word	0x01123456
    e4a8:	00800040 	.word	0x00800040

0000e4ac <am_hal_iom_power_ctrl>:
    e4ac:	b140      	cbz	r0, e4c0 <am_hal_iom_power_ctrl+0x14>
    e4ae:	b538      	push	{r3, r4, r5, lr}
    e4b0:	6803      	ldr	r3, [r0, #0]
    e4b2:	4c85      	ldr	r4, [pc, #532]	; (e6c8 <am_hal_iom_power_ctrl+0x21c>)
    e4b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4b8:	42a3      	cmp	r3, r4
    e4ba:	d003      	beq.n	e4c4 <am_hal_iom_power_ctrl+0x18>
    e4bc:	2002      	movs	r0, #2
    e4be:	bd38      	pop	{r3, r4, r5, pc}
    e4c0:	2002      	movs	r0, #2
    e4c2:	4770      	bx	lr
    e4c4:	4604      	mov	r4, r0
    e4c6:	4615      	mov	r5, r2
    e4c8:	b199      	cbz	r1, e4f2 <am_hal_iom_power_ctrl+0x46>
    e4ca:	2902      	cmp	r1, #2
    e4cc:	d80f      	bhi.n	e4ee <am_hal_iom_power_ctrl+0x42>
    e4ce:	78c3      	ldrb	r3, [r0, #3]
    e4d0:	6840      	ldr	r0, [r0, #4]
    e4d2:	079a      	lsls	r2, r3, #30
    e4d4:	d519      	bpl.n	e50a <am_hal_iom_power_ctrl+0x5e>
    e4d6:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e4da:	3304      	adds	r3, #4
    e4dc:	031b      	lsls	r3, r3, #12
    e4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e4e2:	f003 0306 	and.w	r3, r3, #6
    e4e6:	2b04      	cmp	r3, #4
    e4e8:	d00c      	beq.n	e504 <am_hal_iom_power_ctrl+0x58>
    e4ea:	2003      	movs	r0, #3
    e4ec:	bd38      	pop	{r3, r4, r5, pc}
    e4ee:	2006      	movs	r0, #6
    e4f0:	bd38      	pop	{r3, r4, r5, pc}
    e4f2:	2a00      	cmp	r2, #0
    e4f4:	f000 80cf 	beq.w	e696 <am_hal_iom_power_ctrl+0x1ea>
    e4f8:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	d146      	bne.n	e58e <am_hal_iom_power_ctrl+0xe2>
    e500:	2007      	movs	r0, #7
    e502:	bd38      	pop	{r3, r4, r5, pc}
    e504:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e506:	2b00      	cmp	r3, #0
    e508:	d1ef      	bne.n	e4ea <am_hal_iom_power_ctrl+0x3e>
    e50a:	b3d5      	cbz	r5, e582 <am_hal_iom_power_ctrl+0xd6>
    e50c:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e510:	3304      	adds	r3, #4
    e512:	031b      	lsls	r3, r3, #12
    e514:	2201      	movs	r2, #1
    e516:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e51a:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    e51e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e522:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e526:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e52a:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    e52e:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e532:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e536:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e53a:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e53e:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e542:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e546:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e54a:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e54e:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e552:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e556:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e55a:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e55e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e562:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e566:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e56a:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e56e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e572:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e576:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e57a:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    e57e:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    e582:	3002      	adds	r0, #2
    e584:	b2c0      	uxtb	r0, r0
    e586:	f000 fc9d 	bl	eec4 <am_hal_pwrctrl_periph_disable>
    e58a:	2000      	movs	r0, #0
    e58c:	bd38      	pop	{r3, r4, r5, pc}
    e58e:	6843      	ldr	r3, [r0, #4]
    e590:	1c98      	adds	r0, r3, #2
    e592:	b2c0      	uxtb	r0, r0
    e594:	f000 fc6c 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    e598:	6863      	ldr	r3, [r4, #4]
    e59a:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    e59e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5a2:	3304      	adds	r3, #4
    e5a4:	031b      	lsls	r3, r3, #12
    e5a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e5aa:	6863      	ldr	r3, [r4, #4]
    e5ac:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    e5b0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5b4:	3304      	adds	r3, #4
    e5b6:	031b      	lsls	r3, r3, #12
    e5b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e5bc:	6863      	ldr	r3, [r4, #4]
    e5be:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    e5c2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5c6:	3304      	adds	r3, #4
    e5c8:	031b      	lsls	r3, r3, #12
    e5ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e5ce:	6863      	ldr	r3, [r4, #4]
    e5d0:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    e5d4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5d8:	3304      	adds	r3, #4
    e5da:	031b      	lsls	r3, r3, #12
    e5dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    e5e0:	6863      	ldr	r3, [r4, #4]
    e5e2:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e5e6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5ea:	3304      	adds	r3, #4
    e5ec:	031b      	lsls	r3, r3, #12
    e5ee:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    e5f2:	6863      	ldr	r3, [r4, #4]
    e5f4:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    e5f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e5fc:	3304      	adds	r3, #4
    e5fe:	031b      	lsls	r3, r3, #12
    e600:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    e604:	6863      	ldr	r3, [r4, #4]
    e606:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    e60a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e60e:	3304      	adds	r3, #4
    e610:	031b      	lsls	r3, r3, #12
    e612:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    e616:	6863      	ldr	r3, [r4, #4]
    e618:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    e61c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e620:	3304      	adds	r3, #4
    e622:	031b      	lsls	r3, r3, #12
    e624:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    e628:	6863      	ldr	r3, [r4, #4]
    e62a:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    e62e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e632:	3304      	adds	r3, #4
    e634:	031b      	lsls	r3, r3, #12
    e636:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e63a:	6863      	ldr	r3, [r4, #4]
    e63c:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    e640:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e644:	3304      	adds	r3, #4
    e646:	031b      	lsls	r3, r3, #12
    e648:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e64c:	6863      	ldr	r3, [r4, #4]
    e64e:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    e652:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e656:	3304      	adds	r3, #4
    e658:	031b      	lsls	r3, r3, #12
    e65a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e65e:	6863      	ldr	r3, [r4, #4]
    e660:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    e664:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e668:	3304      	adds	r3, #4
    e66a:	031b      	lsls	r3, r3, #12
    e66c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e670:	6863      	ldr	r3, [r4, #4]
    e672:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    e676:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e67a:	3304      	adds	r3, #4
    e67c:	031b      	lsls	r3, r3, #12
    e67e:	f022 0201 	bic.w	r2, r2, #1
    e682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    e686:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    e68a:	07db      	lsls	r3, r3, #31
    e68c:	d40a      	bmi.n	e6a4 <am_hal_iom_power_ctrl+0x1f8>
    e68e:	2000      	movs	r0, #0
    e690:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    e694:	bd38      	pop	{r3, r4, r5, pc}
    e696:	6840      	ldr	r0, [r0, #4]
    e698:	3002      	adds	r0, #2
    e69a:	b2c0      	uxtb	r0, r0
    e69c:	f000 fbe8 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    e6a0:	4628      	mov	r0, r5
    e6a2:	bd38      	pop	{r3, r4, r5, pc}
    e6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6a6:	b953      	cbnz	r3, e6be <am_hal_iom_power_ctrl+0x212>
    e6a8:	6863      	ldr	r3, [r4, #4]
    e6aa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6ae:	3304      	adds	r3, #4
    e6b0:	031b      	lsls	r3, r3, #12
    e6b2:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e6b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e6ba:	e883 000c 	stmia.w	r3, {r2, r3}
    e6be:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e6c2:	f001 f941 	bl	f948 <am_hal_cmdq_enable>
    e6c6:	e7e2      	b.n	e68e <am_hal_iom_power_ctrl+0x1e2>
    e6c8:	01123456 	.word	0x01123456

0000e6cc <am_hal_iom_configure>:
    e6cc:	b128      	cbz	r0, e6da <am_hal_iom_configure+0xe>
    e6ce:	6803      	ldr	r3, [r0, #0]
    e6d0:	4a8b      	ldr	r2, [pc, #556]	; (e900 <am_hal_iom_configure+0x234>)
    e6d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6d6:	4293      	cmp	r3, r2
    e6d8:	d001      	beq.n	e6de <am_hal_iom_configure+0x12>
    e6da:	2002      	movs	r0, #2
    e6dc:	4770      	bx	lr
    e6de:	b111      	cbz	r1, e6e6 <am_hal_iom_configure+0x1a>
    e6e0:	6843      	ldr	r3, [r0, #4]
    e6e2:	2b05      	cmp	r3, #5
    e6e4:	d901      	bls.n	e6ea <am_hal_iom_configure+0x1e>
    e6e6:	2006      	movs	r0, #6
    e6e8:	4770      	bx	lr
    e6ea:	78c2      	ldrb	r2, [r0, #3]
    e6ec:	0792      	lsls	r2, r2, #30
    e6ee:	d501      	bpl.n	e6f4 <am_hal_iom_configure+0x28>
    e6f0:	2007      	movs	r0, #7
    e6f2:	4770      	bx	lr
    e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6fc:	3304      	adds	r3, #4
    e6fe:	780a      	ldrb	r2, [r1, #0]
    e700:	7202      	strb	r2, [r0, #8]
    e702:	031b      	lsls	r3, r3, #12
    e704:	f241 0410 	movw	r4, #4112	; 0x1010
    e708:	b083      	sub	sp, #12
    e70a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e70e:	b942      	cbnz	r2, e722 <am_hal_iom_configure+0x56>
    e710:	f891 c008 	ldrb.w	ip, [r1, #8]
    e714:	f1bc 0f03 	cmp.w	ip, #3
    e718:	d908      	bls.n	e72c <am_hal_iom_configure+0x60>
    e71a:	2006      	movs	r0, #6
    e71c:	b003      	add	sp, #12
    e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e722:	2a01      	cmp	r2, #1
    e724:	f000 80c3 	beq.w	e8ae <am_hal_iom_configure+0x1e2>
    e728:	2005      	movs	r0, #5
    e72a:	e7f7      	b.n	e71c <am_hal_iom_configure+0x50>
    e72c:	684f      	ldr	r7, [r1, #4]
    e72e:	2f00      	cmp	r7, #0
    e730:	f000 80bb 	beq.w	e8aa <am_hal_iom_configure+0x1de>
    e734:	4e73      	ldr	r6, [pc, #460]	; (e904 <am_hal_iom_configure+0x238>)
    e736:	fbb6 f6f7 	udiv	r6, r6, r7
    e73a:	fb07 f206 	mul.w	r2, r7, r6
    e73e:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    e742:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    e746:	2a00      	cmp	r2, #0
    e748:	bf18      	it	ne
    e74a:	3601      	addne	r6, #1
    e74c:	4274      	negs	r4, r6
    e74e:	4034      	ands	r4, r6
    e750:	fab4 f484 	clz	r4, r4
    e754:	f1c4 041f 	rsb	r4, r4, #31
    e758:	2c06      	cmp	r4, #6
    e75a:	bfa8      	it	ge
    e75c:	2406      	movge	r4, #6
    e75e:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    e762:	f240 80b7 	bls.w	e8d4 <am_hal_iom_configure+0x208>
    e766:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    e76a:	4d67      	ldr	r5, [pc, #412]	; (e908 <am_hal_iom_configure+0x23c>)
    e76c:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    e770:	42aa      	cmp	r2, r5
    e772:	bf8c      	ite	hi
    e774:	f04f 0e00 	movhi.w	lr, #0
    e778:	f04f 0e01 	movls.w	lr, #1
    e77c:	ea4f 024e 	mov.w	r2, lr, lsl #1
    e780:	3201      	adds	r2, #1
    e782:	fa02 f804 	lsl.w	r8, r2, r4
    e786:	fbb6 f5f8 	udiv	r5, r6, r8
    e78a:	fb08 6815 	mls	r8, r8, r5, r6
    e78e:	f1b8 0f00 	cmp.w	r8, #0
    e792:	bf18      	it	ne
    e794:	3501      	addne	r5, #1
    e796:	fab5 f885 	clz	r8, r5
    e79a:	f1c8 081f 	rsb	r8, r8, #31
    e79e:	f1b8 0f07 	cmp.w	r8, #7
    e7a2:	f240 8094 	bls.w	e8ce <am_hal_iom_configure+0x202>
    e7a6:	3c07      	subs	r4, #7
    e7a8:	4444      	add	r4, r8
    e7aa:	f104 0901 	add.w	r9, r4, #1
    e7ae:	f1b9 0f07 	cmp.w	r9, #7
    e7b2:	d87a      	bhi.n	e8aa <am_hal_iom_configure+0x1de>
    e7b4:	f1a8 0807 	sub.w	r8, r8, #7
    e7b8:	f04f 0a01 	mov.w	sl, #1
    e7bc:	fa0a fa08 	lsl.w	sl, sl, r8
    e7c0:	f10a 3aff 	add.w	sl, sl, #4294967295
    e7c4:	ea0a 0a05 	and.w	sl, sl, r5
    e7c8:	fa25 f508 	lsr.w	r5, r5, r8
    e7cc:	f1ba 0f00 	cmp.w	sl, #0
    e7d0:	bf18      	it	ne
    e7d2:	3501      	addne	r5, #1
    e7d4:	f8df 8158 	ldr.w	r8, [pc, #344]	; e930 <am_hal_iom_configure+0x264>
    e7d8:	4547      	cmp	r7, r8
    e7da:	d87e      	bhi.n	e8da <am_hal_iom_configure+0x20e>
    e7dc:	f04f 0801 	mov.w	r8, #1
    e7e0:	fa08 f804 	lsl.w	r8, r8, r4
    e7e4:	ebb8 0806 	subs.w	r8, r8, r6
    e7e8:	bf18      	it	ne
    e7ea:	f04f 0801 	movne.w	r8, #1
    e7ee:	ea4f 066c 	mov.w	r6, ip, asr #1
    e7f2:	2e01      	cmp	r6, #1
    e7f4:	d074      	beq.n	e8e0 <am_hal_iom_configure+0x214>
    e7f6:	3d01      	subs	r5, #1
    e7f8:	086e      	lsrs	r6, r5, #1
    e7fa:	9600      	str	r6, [sp, #0]
    e7fc:	fb05 fa08 	mul.w	sl, r5, r8
    e800:	40a2      	lsls	r2, r4
    e802:	fb0a 2202 	mla	r2, sl, r2, r2
    e806:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    e80a:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    e80e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e904 <am_hal_iom_configure+0x238>
    e812:	fbb9 fbf2 	udiv	fp, r9, r2
    e816:	fb02 fa0b 	mul.w	sl, r2, fp
    e81a:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    e81e:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    e822:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    e826:	9601      	str	r6, [sp, #4]
    e828:	0852      	lsrs	r2, r2, #1
    e82a:	9e00      	ldr	r6, [sp, #0]
    e82c:	4552      	cmp	r2, sl
    e82e:	bf2c      	ite	cs
    e830:	465a      	movcs	r2, fp
    e832:	f10b 0201 	addcc.w	r2, fp, #1
    e836:	f8df b0fc 	ldr.w	fp, [pc, #252]	; e934 <am_hal_iom_configure+0x268>
    e83a:	fbb2 fafb 	udiv	sl, r2, fp
    e83e:	0436      	lsls	r6, r6, #16
    e840:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    e844:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    e848:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    e84c:	fb0b 2b1a 	mls	fp, fp, sl, r2
    e850:	432e      	orrs	r6, r5
    e852:	f1bb 0f00 	cmp.w	fp, #0
    e856:	d10a      	bne.n	e86e <am_hal_iom_configure+0x1a2>
    e858:	f1ba 0f00 	cmp.w	sl, #0
    e85c:	d007      	beq.n	e86e <am_hal_iom_configure+0x1a2>
    e85e:	f10a 35ff 	add.w	r5, sl, #4294967295
    e862:	ea15 0f0a 	tst.w	r5, sl
    e866:	d102      	bne.n	e86e <am_hal_iom_configure+0x1a2>
    e868:	9d01      	ldr	r5, [sp, #4]
    e86a:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    e86e:	2400      	movs	r4, #0
    e870:	4334      	orrs	r4, r6
    e872:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    e876:	f044 0401 	orr.w	r4, r4, #1
    e87a:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    e87e:	68cb      	ldr	r3, [r1, #12]
    e880:	690a      	ldr	r2, [r1, #16]
    e882:	60c3      	str	r3, [r0, #12]
    e884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e888:	2300      	movs	r3, #0
    e88a:	6102      	str	r2, [r0, #16]
    e88c:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    e890:	4a1c      	ldr	r2, [pc, #112]	; (e904 <am_hal_iom_configure+0x238>)
    e892:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    e896:	fbb2 f7f7 	udiv	r7, r2, r7
    e89a:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    e89e:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    e8a2:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    e8a6:	4618      	mov	r0, r3
    e8a8:	e738      	b.n	e71c <am_hal_iom_configure+0x50>
    e8aa:	2400      	movs	r4, #0
    e8ac:	e7e1      	b.n	e872 <am_hal_iom_configure+0x1a6>
    e8ae:	684f      	ldr	r7, [r1, #4]
    e8b0:	4a16      	ldr	r2, [pc, #88]	; (e90c <am_hal_iom_configure+0x240>)
    e8b2:	4297      	cmp	r7, r2
    e8b4:	d01e      	beq.n	e8f4 <am_hal_iom_configure+0x228>
    e8b6:	4a16      	ldr	r2, [pc, #88]	; (e910 <am_hal_iom_configure+0x244>)
    e8b8:	4297      	cmp	r7, r2
    e8ba:	d016      	beq.n	e8ea <am_hal_iom_configure+0x21e>
    e8bc:	4a15      	ldr	r2, [pc, #84]	; (e914 <am_hal_iom_configure+0x248>)
    e8be:	4297      	cmp	r7, r2
    e8c0:	f47f af2b 	bne.w	e71a <am_hal_iom_configure+0x4e>
    e8c4:	4a14      	ldr	r2, [pc, #80]	; (e918 <am_hal_iom_configure+0x24c>)
    e8c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e8ca:	4c14      	ldr	r4, [pc, #80]	; (e91c <am_hal_iom_configure+0x250>)
    e8cc:	e7d3      	b.n	e876 <am_hal_iom_configure+0x1aa>
    e8ce:	f104 0901 	add.w	r9, r4, #1
    e8d2:	e77f      	b.n	e7d4 <am_hal_iom_configure+0x108>
    e8d4:	f04f 0e01 	mov.w	lr, #1
    e8d8:	e750      	b.n	e77c <am_hal_iom_configure+0xb0>
    e8da:	f04f 0800 	mov.w	r8, #0
    e8de:	e786      	b.n	e7ee <am_hal_iom_configure+0x122>
    e8e0:	1eae      	subs	r6, r5, #2
    e8e2:	0876      	lsrs	r6, r6, #1
    e8e4:	9600      	str	r6, [sp, #0]
    e8e6:	3d01      	subs	r5, #1
    e8e8:	e788      	b.n	e7fc <am_hal_iom_configure+0x130>
    e8ea:	4a0d      	ldr	r2, [pc, #52]	; (e920 <am_hal_iom_configure+0x254>)
    e8ec:	4c0d      	ldr	r4, [pc, #52]	; (e924 <am_hal_iom_configure+0x258>)
    e8ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e8f2:	e7c0      	b.n	e876 <am_hal_iom_configure+0x1aa>
    e8f4:	4a0c      	ldr	r2, [pc, #48]	; (e928 <am_hal_iom_configure+0x25c>)
    e8f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e8fa:	4c0c      	ldr	r4, [pc, #48]	; (e92c <am_hal_iom_configure+0x260>)
    e8fc:	e7bb      	b.n	e876 <am_hal_iom_configure+0x1aa>
    e8fe:	bf00      	nop
    e900:	01123456 	.word	0x01123456
    e904:	02dc6c00 	.word	0x02dc6c00
    e908:	007a11ff 	.word	0x007a11ff
    e90c:	00061a80 	.word	0x00061a80
    e910:	000f4240 	.word	0x000f4240
    e914:	000186a0 	.word	0x000186a0
    e918:	0003f070 	.word	0x0003f070
    e91c:	773b1201 	.word	0x773b1201
    e920:	00213040 	.word	0x00213040
    e924:	06031301 	.word	0x06031301
    e928:	0003f270 	.word	0x0003f270
    e92c:	1d0e1201 	.word	0x1d0e1201
    e930:	00b71aff 	.word	0x00b71aff
    e934:	0003d090 	.word	0x0003d090

0000e938 <am_hal_iom_blocking_transfer>:
    e938:	b128      	cbz	r0, e946 <am_hal_iom_blocking_transfer+0xe>
    e93a:	6803      	ldr	r3, [r0, #0]
    e93c:	4ac1      	ldr	r2, [pc, #772]	; (ec44 <am_hal_iom_blocking_transfer+0x30c>)
    e93e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e942:	4293      	cmp	r3, r2
    e944:	d001      	beq.n	e94a <am_hal_iom_blocking_transfer+0x12>
    e946:	2002      	movs	r0, #2
    e948:	4770      	bx	lr
    e94a:	b159      	cbz	r1, e964 <am_hal_iom_blocking_transfer+0x2c>
    e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e950:	f891 8010 	ldrb.w	r8, [r1, #16]
    e954:	f1b8 0f01 	cmp.w	r8, #1
    e958:	b087      	sub	sp, #28
    e95a:	d905      	bls.n	e968 <am_hal_iom_blocking_transfer+0x30>
    e95c:	2007      	movs	r0, #7
    e95e:	b007      	add	sp, #28
    e960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e964:	2006      	movs	r0, #6
    e966:	4770      	bx	lr
    e968:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    e96c:	f1ba 0f00 	cmp.w	sl, #0
    e970:	d102      	bne.n	e978 <am_hal_iom_blocking_transfer+0x40>
    e972:	f881 a010 	strb.w	sl, [r1, #16]
    e976:	46d0      	mov	r8, sl
    e978:	f8d1 9004 	ldr.w	r9, [r1, #4]
    e97c:	f1b9 0f03 	cmp.w	r9, #3
    e980:	d901      	bls.n	e986 <am_hal_iom_blocking_transfer+0x4e>
    e982:	2006      	movs	r0, #6
    e984:	e7eb      	b.n	e95e <am_hal_iom_blocking_transfer+0x26>
    e986:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    e98a:	f04f 33ff 	mov.w	r3, #4294967295
    e98e:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e992:	4093      	lsls	r3, r2
    e994:	ea13 0f0b 	tst.w	r3, fp
    e998:	d1f3      	bne.n	e982 <am_hal_iom_blocking_transfer+0x4a>
    e99a:	f1ba 0f00 	cmp.w	sl, #0
    e99e:	f000 80bb 	beq.w	eb18 <am_hal_iom_blocking_transfer+0x1e0>
    e9a2:	f1b8 0f00 	cmp.w	r8, #0
    e9a6:	f000 80c7 	beq.w	eb38 <am_hal_iom_blocking_transfer+0x200>
    e9aa:	698b      	ldr	r3, [r1, #24]
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	d0e8      	beq.n	e982 <am_hal_iom_blocking_transfer+0x4a>
    e9b0:	7a03      	ldrb	r3, [r0, #8]
    e9b2:	2b01      	cmp	r3, #1
    e9b4:	f040 80b4 	bne.w	eb20 <am_hal_iom_blocking_transfer+0x1e8>
    e9b8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    e9bc:	d8e1      	bhi.n	e982 <am_hal_iom_blocking_transfer+0x4a>
    e9be:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    e9c2:	2b02      	cmp	r3, #2
    e9c4:	d0ca      	beq.n	e95c <am_hal_iom_blocking_transfer+0x24>
    e9c6:	7f0b      	ldrb	r3, [r1, #28]
    e9c8:	694f      	ldr	r7, [r1, #20]
    e9ca:	f8d1 e018 	ldr.w	lr, [r1, #24]
    e9ce:	9303      	str	r3, [sp, #12]
    e9d0:	4604      	mov	r4, r0
    e9d2:	2301      	movs	r3, #1
    e9d4:	460d      	mov	r5, r1
    e9d6:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    e9da:	6866      	ldr	r6, [r4, #4]
    e9dc:	9300      	str	r3, [sp, #0]
    e9de:	f04f 32ff 	mov.w	r2, #4294967295
    e9e2:	2300      	movs	r3, #0
    e9e4:	f104 0124 	add.w	r1, r4, #36	; 0x24
    e9e8:	4598      	cmp	r8, r3
    e9ea:	bf18      	it	ne
    e9ec:	4677      	movne	r7, lr
    e9ee:	f7ff fa57 	bl	dea0 <am_hal_flash_delay_status_check>
    e9f2:	2800      	cmp	r0, #0
    e9f4:	d1b3      	bne.n	e95e <am_hal_iom_blocking_transfer+0x26>
    e9f6:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    e9fa:	3604      	adds	r6, #4
    e9fc:	2301      	movs	r3, #1
    e9fe:	0336      	lsls	r6, r6, #12
    ea00:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    ea04:	9300      	str	r3, [sp, #0]
    ea06:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    ea0a:	9304      	str	r3, [sp, #16]
    ea0c:	4619      	mov	r1, r3
    ea0e:	2206      	movs	r2, #6
    ea10:	2304      	movs	r3, #4
    ea12:	f7ff fa45 	bl	dea0 <am_hal_flash_delay_status_check>
    ea16:	2800      	cmp	r0, #0
    ea18:	d1a1      	bne.n	e95e <am_hal_iom_blocking_transfer+0x26>
    ea1a:	f04f 33ff 	mov.w	r3, #4294967295
    ea1e:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    ea22:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    ea26:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    ea2a:	682b      	ldr	r3, [r5, #0]
    ea2c:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    ea30:	682b      	ldr	r3, [r5, #0]
    ea32:	9205      	str	r2, [sp, #20]
    ea34:	4423      	add	r3, r4
    ea36:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    ea3a:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    ea3e:	7a23      	ldrb	r3, [r4, #8]
    ea40:	b903      	cbnz	r3, ea44 <am_hal_iom_blocking_transfer+0x10c>
    ea42:	6828      	ldr	r0, [r5, #0]
    ea44:	4a80      	ldr	r2, [pc, #512]	; (ec48 <am_hal_iom_blocking_transfer+0x310>)
    ea46:	0500      	lsls	r0, r0, #20
    ea48:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    ea4c:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    ea50:	ea0a 0202 	and.w	r2, sl, r2
    ea54:	f1b8 0f01 	cmp.w	r8, #1
    ea58:	ea42 0203 	orr.w	r2, r2, r3
    ea5c:	d074      	beq.n	eb48 <am_hal_iom_blocking_transfer+0x210>
    ea5e:	f3cb 230f 	ubfx	r3, fp, #8, #16
    ea62:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    ea66:	ea4f 1149 	mov.w	r1, r9, lsl #5
    ea6a:	ea4f 600b 	mov.w	r0, fp, lsl #24
    ea6e:	f040 0001 	orr.w	r0, r0, #1
    ea72:	f001 0160 	and.w	r1, r1, #96	; 0x60
    ea76:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ea7a:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ea7e:	4301      	orrs	r1, r0
    ea80:	9803      	ldr	r0, [sp, #12]
    ea82:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ea86:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    ea8a:	2b03      	cmp	r3, #3
    ea8c:	ea42 0201 	orr.w	r2, r2, r1
    ea90:	f240 80b3 	bls.w	ebfa <am_hal_iom_blocking_transfer+0x2c2>
    ea94:	f1b8 0f00 	cmp.w	r8, #0
    ea98:	d00a      	beq.n	eab0 <am_hal_iom_blocking_transfer+0x178>
    ea9a:	4641      	mov	r1, r8
    ea9c:	f857 0b04 	ldr.w	r0, [r7], #4
    eaa0:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    eaa4:	2903      	cmp	r1, #3
    eaa6:	f1a3 0304 	sub.w	r3, r3, #4
    eaaa:	f1a1 0104 	sub.w	r1, r1, #4
    eaae:	d82e      	bhi.n	eb0e <am_hal_iom_blocking_transfer+0x1d6>
    eab0:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    eab4:	f04f 0800 	mov.w	r8, #0
    eab8:	2701      	movs	r7, #1
    eaba:	9904      	ldr	r1, [sp, #16]
    eabc:	9700      	str	r7, [sp, #0]
    eabe:	2304      	movs	r3, #4
    eac0:	2206      	movs	r2, #6
    eac2:	4862      	ldr	r0, [pc, #392]	; (ec4c <am_hal_iom_blocking_transfer+0x314>)
    eac4:	f7ff f9ec 	bl	dea0 <am_hal_flash_delay_status_check>
    eac8:	4605      	mov	r5, r0
    eaca:	b970      	cbnz	r0, eaea <am_hal_iom_blocking_transfer+0x1b2>
    eacc:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ead0:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    ead4:	d135      	bne.n	eb42 <am_hal_iom_blocking_transfer+0x20a>
    ead6:	0599      	lsls	r1, r3, #22
    ead8:	f100 80cf 	bmi.w	ec7a <am_hal_iom_blocking_transfer+0x342>
    eadc:	06da      	lsls	r2, r3, #27
    eade:	f100 80ce 	bmi.w	ec7e <am_hal_iom_blocking_transfer+0x346>
    eae2:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    eae6:	d00e      	beq.n	eb06 <am_hal_iom_blocking_transfer+0x1ce>
    eae8:	463d      	mov	r5, r7
    eaea:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    eaee:	4620      	mov	r0, r4
    eaf0:	f7ff fbcc 	bl	e28c <internal_iom_reset_on_error>
    eaf4:	f04f 33ff 	mov.w	r3, #4294967295
    eaf8:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    eafc:	9b05      	ldr	r3, [sp, #20]
    eafe:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    eb02:	4628      	mov	r0, r5
    eb04:	e72b      	b.n	e95e <am_hal_iom_blocking_transfer+0x26>
    eb06:	f1b8 0f00 	cmp.w	r8, #0
    eb0a:	d0f3      	beq.n	eaf4 <am_hal_iom_blocking_transfer+0x1bc>
    eb0c:	e7ec      	b.n	eae8 <am_hal_iom_blocking_transfer+0x1b0>
    eb0e:	2b03      	cmp	r3, #3
    eb10:	d972      	bls.n	ebf8 <am_hal_iom_blocking_transfer+0x2c0>
    eb12:	2900      	cmp	r1, #0
    eb14:	d1c2      	bne.n	ea9c <am_hal_iom_blocking_transfer+0x164>
    eb16:	e7cb      	b.n	eab0 <am_hal_iom_blocking_transfer+0x178>
    eb18:	7a03      	ldrb	r3, [r0, #8]
    eb1a:	2b01      	cmp	r3, #1
    eb1c:	f43f af4f 	beq.w	e9be <am_hal_iom_blocking_transfer+0x86>
    eb20:	2b00      	cmp	r3, #0
    eb22:	f47f af4c 	bne.w	e9be <am_hal_iom_blocking_transfer+0x86>
    eb26:	680b      	ldr	r3, [r1, #0]
    eb28:	2b03      	cmp	r3, #3
    eb2a:	f63f af2a 	bhi.w	e982 <am_hal_iom_blocking_transfer+0x4a>
    eb2e:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    eb32:	f4bf af26 	bcs.w	e982 <am_hal_iom_blocking_transfer+0x4a>
    eb36:	e742      	b.n	e9be <am_hal_iom_blocking_transfer+0x86>
    eb38:	694b      	ldr	r3, [r1, #20]
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	f47f af38 	bne.w	e9b0 <am_hal_iom_blocking_transfer+0x78>
    eb40:	e71f      	b.n	e982 <am_hal_iom_blocking_transfer+0x4a>
    eb42:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eb46:	e7d0      	b.n	eaea <am_hal_iom_blocking_transfer+0x1b2>
    eb48:	ea4f 1349 	mov.w	r3, r9, lsl #5
    eb4c:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    eb50:	ea4f 610b 	mov.w	r1, fp, lsl #24
    eb54:	9b03      	ldr	r3, [sp, #12]
    eb56:	f041 0102 	orr.w	r1, r1, #2
    eb5a:	f3cb 200f 	ubfx	r0, fp, #8, #16
    eb5e:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    eb62:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    eb66:	ea4e 0301 	orr.w	r3, lr, r1
    eb6a:	f8d5 800c 	ldr.w	r8, [r5, #12]
    eb6e:	431a      	orrs	r2, r3
    eb70:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    eb74:	2200      	movs	r2, #0
    eb76:	f1b8 0f00 	cmp.w	r8, #0
    eb7a:	d09b      	beq.n	eab4 <am_hal_iom_blocking_transfer+0x17c>
    eb7c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    eb80:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eb84:	2b03      	cmp	r3, #3
    eb86:	d81e      	bhi.n	ebc6 <am_hal_iom_blocking_transfer+0x28e>
    eb88:	4d30      	ldr	r5, [pc, #192]	; (ec4c <am_hal_iom_blocking_transfer+0x314>)
    eb8a:	e001      	b.n	eb90 <am_hal_iom_blocking_transfer+0x258>
    eb8c:	3d01      	subs	r5, #1
    eb8e:	d093      	beq.n	eab8 <am_hal_iom_blocking_transfer+0x180>
    eb90:	2001      	movs	r0, #1
    eb92:	b10a      	cbz	r2, eb98 <am_hal_iom_blocking_transfer+0x260>
    eb94:	4598      	cmp	r8, r3
    eb96:	d88f      	bhi.n	eab8 <am_hal_iom_blocking_transfer+0x180>
    eb98:	f7ff f97e 	bl	de98 <am_hal_flash_delay>
    eb9c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    eba0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    eba4:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eba8:	2b03      	cmp	r3, #3
    ebaa:	f002 0201 	and.w	r2, r2, #1
    ebae:	d9ed      	bls.n	eb8c <am_hal_iom_blocking_transfer+0x254>
    ebb0:	e009      	b.n	ebc6 <am_hal_iom_blocking_transfer+0x28e>
    ebb2:	2b03      	cmp	r3, #3
    ebb4:	6039      	str	r1, [r7, #0]
    ebb6:	f1a8 0804 	sub.w	r8, r8, #4
    ebba:	d962      	bls.n	ec82 <am_hal_iom_blocking_transfer+0x34a>
    ebbc:	f1b8 0f00 	cmp.w	r8, #0
    ebc0:	f43f af78 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ebc4:	4607      	mov	r7, r0
    ebc6:	f1b8 0f03 	cmp.w	r8, #3
    ebca:	f1a3 0304 	sub.w	r3, r3, #4
    ebce:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    ebd2:	f107 0004 	add.w	r0, r7, #4
    ebd6:	d8ec      	bhi.n	ebb2 <am_hal_iom_blocking_transfer+0x27a>
    ebd8:	f1b8 0f01 	cmp.w	r8, #1
    ebdc:	7039      	strb	r1, [r7, #0]
    ebde:	ea4f 2311 	mov.w	r3, r1, lsr #8
    ebe2:	f43f af67 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ebe6:	f1b8 0f02 	cmp.w	r8, #2
    ebea:	707b      	strb	r3, [r7, #1]
    ebec:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ebf0:	f43f af60 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ebf4:	70b9      	strb	r1, [r7, #2]
    ebf6:	e75d      	b.n	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ebf8:	4688      	mov	r8, r1
    ebfa:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ebfe:	f1b8 0f00 	cmp.w	r8, #0
    ec02:	f43f af57 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ec06:	463b      	mov	r3, r7
    ec08:	4647      	mov	r7, r8
    ec0a:	4698      	mov	r8, r3
    ec0c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ec10:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ec14:	2b03      	cmp	r3, #3
    ec16:	d81e      	bhi.n	ec56 <am_hal_iom_blocking_transfer+0x31e>
    ec18:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ec1c:	07d8      	lsls	r0, r3, #31
    ec1e:	d42a      	bmi.n	ec76 <am_hal_iom_blocking_transfer+0x33e>
    ec20:	4d0a      	ldr	r5, [pc, #40]	; (ec4c <am_hal_iom_blocking_transfer+0x314>)
    ec22:	e005      	b.n	ec30 <am_hal_iom_blocking_transfer+0x2f8>
    ec24:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ec28:	07db      	lsls	r3, r3, #31
    ec2a:	d424      	bmi.n	ec76 <am_hal_iom_blocking_transfer+0x33e>
    ec2c:	3d01      	subs	r5, #1
    ec2e:	d022      	beq.n	ec76 <am_hal_iom_blocking_transfer+0x33e>
    ec30:	2001      	movs	r0, #1
    ec32:	f7ff f931 	bl	de98 <am_hal_flash_delay>
    ec36:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ec3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ec3e:	2b03      	cmp	r3, #3
    ec40:	d9f0      	bls.n	ec24 <am_hal_iom_blocking_transfer+0x2ec>
    ec42:	e008      	b.n	ec56 <am_hal_iom_blocking_transfer+0x31e>
    ec44:	01123456 	.word	0x01123456
    ec48:	000fff00 	.word	0x000fff00
    ec4c:	0007a120 	.word	0x0007a120
    ec50:	2f00      	cmp	r7, #0
    ec52:	f43f af2f 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ec56:	f858 2b04 	ldr.w	r2, [r8], #4
    ec5a:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    ec5e:	2f03      	cmp	r7, #3
    ec60:	f1a3 0304 	sub.w	r3, r3, #4
    ec64:	f1a7 0704 	sub.w	r7, r7, #4
    ec68:	f67f af24 	bls.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ec6c:	2b03      	cmp	r3, #3
    ec6e:	d8ef      	bhi.n	ec50 <am_hal_iom_blocking_transfer+0x318>
    ec70:	2f00      	cmp	r7, #0
    ec72:	d1cb      	bne.n	ec0c <am_hal_iom_blocking_transfer+0x2d4>
    ec74:	e71e      	b.n	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ec76:	46b8      	mov	r8, r7
    ec78:	e71e      	b.n	eab8 <am_hal_iom_blocking_transfer+0x180>
    ec7a:	4d05      	ldr	r5, [pc, #20]	; (ec90 <am_hal_iom_blocking_transfer+0x358>)
    ec7c:	e735      	b.n	eaea <am_hal_iom_blocking_transfer+0x1b2>
    ec7e:	4d05      	ldr	r5, [pc, #20]	; (ec94 <am_hal_iom_blocking_transfer+0x35c>)
    ec80:	e733      	b.n	eaea <am_hal_iom_blocking_transfer+0x1b2>
    ec82:	f1b8 0f00 	cmp.w	r8, #0
    ec86:	f43f af15 	beq.w	eab4 <am_hal_iom_blocking_transfer+0x17c>
    ec8a:	4607      	mov	r7, r0
    ec8c:	e776      	b.n	eb7c <am_hal_iom_blocking_transfer+0x244>
    ec8e:	bf00      	nop
    ec90:	08000001 	.word	0x08000001
    ec94:	08000002 	.word	0x08000002

0000ec98 <am_hal_itm_disable>:
    ec98:	b510      	push	{r4, lr}
    ec9a:	4b25      	ldr	r3, [pc, #148]	; (ed30 <am_hal_itm_disable+0x98>)
    ec9c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    eca0:	b9b3      	cbnz	r3, ecd0 <am_hal_itm_disable+0x38>
    eca2:	4b24      	ldr	r3, [pc, #144]	; (ed34 <am_hal_itm_disable+0x9c>)
    eca4:	68da      	ldr	r2, [r3, #12]
    eca6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ecaa:	60da      	str	r2, [r3, #12]
    ecac:	68da      	ldr	r2, [r3, #12]
    ecae:	01d2      	lsls	r2, r2, #7
    ecb0:	d5fc      	bpl.n	ecac <am_hal_itm_disable+0x14>
    ecb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ecb6:	4920      	ldr	r1, [pc, #128]	; (ed38 <am_hal_itm_disable+0xa0>)
    ecb8:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ecbc:	4a1f      	ldr	r2, [pc, #124]	; (ed3c <am_hal_itm_disable+0xa4>)
    ecbe:	200f      	movs	r0, #15
    ecc0:	f04f 31ff 	mov.w	r1, #4294967295
    ecc4:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ecc8:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    eccc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ecd0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ecd4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ecd8:	021b      	lsls	r3, r3, #8
    ecda:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ecde:	d4f9      	bmi.n	ecd4 <am_hal_itm_disable+0x3c>
    ece0:	f240 20f7 	movw	r0, #759	; 0x2f7
    ece4:	f7ff f8d8 	bl	de98 <am_hal_flash_delay>
    ece8:	4b13      	ldr	r3, [pc, #76]	; (ed38 <am_hal_itm_disable+0xa0>)
    ecea:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ecee:	4621      	mov	r1, r4
    ecf0:	2064      	movs	r0, #100	; 0x64
    ecf2:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ecf6:	f023 0301 	bic.w	r3, r3, #1
    ecfa:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ecfe:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ed02:	4b0f      	ldr	r3, [pc, #60]	; (ed40 <am_hal_itm_disable+0xa8>)
    ed04:	4013      	ands	r3, r2
    ed06:	2b00      	cmp	r3, #0
    ed08:	d1f9      	bne.n	ecfe <am_hal_itm_disable+0x66>
    ed0a:	3801      	subs	r0, #1
    ed0c:	d1f1      	bne.n	ecf2 <am_hal_itm_disable+0x5a>
    ed0e:	4a09      	ldr	r2, [pc, #36]	; (ed34 <am_hal_itm_disable+0x9c>)
    ed10:	68d3      	ldr	r3, [r2, #12]
    ed12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ed16:	60d3      	str	r3, [r2, #12]
    ed18:	68d3      	ldr	r3, [r2, #12]
    ed1a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ed1e:	d1fb      	bne.n	ed18 <am_hal_itm_disable+0x80>
    ed20:	4a03      	ldr	r2, [pc, #12]	; (ed30 <am_hal_itm_disable+0x98>)
    ed22:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ed26:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d1fb      	bne.n	ed26 <am_hal_itm_disable+0x8e>
    ed2e:	bd10      	pop	{r4, pc}
    ed30:	40020000 	.word	0x40020000
    ed34:	e000edf0 	.word	0xe000edf0
    ed38:	c5acce55 	.word	0xc5acce55
    ed3c:	00150511 	.word	0x00150511
    ed40:	00800001 	.word	0x00800001

0000ed44 <am_hal_mcuctrl_info_get>:
    ed44:	b4f0      	push	{r4, r5, r6, r7}
    ed46:	b121      	cbz	r1, ed52 <am_hal_mcuctrl_info_get+0xe>
    ed48:	2801      	cmp	r0, #1
    ed4a:	d038      	beq.n	edbe <am_hal_mcuctrl_info_get+0x7a>
    ed4c:	d320      	bcc.n	ed90 <am_hal_mcuctrl_info_get+0x4c>
    ed4e:	2802      	cmp	r0, #2
    ed50:	d002      	beq.n	ed58 <am_hal_mcuctrl_info_get+0x14>
    ed52:	2006      	movs	r0, #6
    ed54:	bcf0      	pop	{r4, r5, r6, r7}
    ed56:	4770      	bx	lr
    ed58:	4a41      	ldr	r2, [pc, #260]	; (ee60 <am_hal_mcuctrl_info_get+0x11c>)
    ed5a:	684d      	ldr	r5, [r1, #4]
    ed5c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    ed60:	694c      	ldr	r4, [r1, #20]
    ed62:	f003 0601 	and.w	r6, r3, #1
    ed66:	f3c3 0040 	ubfx	r0, r3, #1, #1
    ed6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ed6e:	700e      	strb	r6, [r1, #0]
    ed70:	7208      	strb	r0, [r1, #8]
    ed72:	740b      	strb	r3, [r1, #16]
    ed74:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    ed78:	60cb      	str	r3, [r1, #12]
    ed7a:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    ed7e:	4328      	orrs	r0, r5
    ed80:	6048      	str	r0, [r1, #4]
    ed82:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    ed86:	4323      	orrs	r3, r4
    ed88:	2000      	movs	r0, #0
    ed8a:	614b      	str	r3, [r1, #20]
    ed8c:	bcf0      	pop	{r4, r5, r6, r7}
    ed8e:	4770      	bx	lr
    ed90:	4a33      	ldr	r2, [pc, #204]	; (ee60 <am_hal_mcuctrl_info_get+0x11c>)
    ed92:	6993      	ldr	r3, [r2, #24]
    ed94:	f3c3 1080 	ubfx	r0, r3, #6, #1
    ed98:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ed9c:	7008      	strb	r0, [r1, #0]
    ed9e:	704b      	strb	r3, [r1, #1]
    eda0:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    eda4:	f3c3 6381 	ubfx	r3, r3, #26, #2
    eda8:	710b      	strb	r3, [r1, #4]
    edaa:	6953      	ldr	r3, [r2, #20]
    edac:	f3c3 0240 	ubfx	r2, r3, #1, #1
    edb0:	f003 0301 	and.w	r3, r3, #1
    edb4:	2000      	movs	r0, #0
    edb6:	708a      	strb	r2, [r1, #2]
    edb8:	70cb      	strb	r3, [r1, #3]
    edba:	bcf0      	pop	{r4, r5, r6, r7}
    edbc:	4770      	bx	lr
    edbe:	4b28      	ldr	r3, [pc, #160]	; (ee60 <am_hal_mcuctrl_info_get+0x11c>)
    edc0:	4c28      	ldr	r4, [pc, #160]	; (ee64 <am_hal_mcuctrl_info_get+0x120>)
    edc2:	681a      	ldr	r2, [r3, #0]
    edc4:	600a      	str	r2, [r1, #0]
    edc6:	6858      	ldr	r0, [r3, #4]
    edc8:	6048      	str	r0, [r1, #4]
    edca:	6898      	ldr	r0, [r3, #8]
    edcc:	6088      	str	r0, [r1, #8]
    edce:	68d8      	ldr	r0, [r3, #12]
    edd0:	60c8      	str	r0, [r1, #12]
    edd2:	691d      	ldr	r5, [r3, #16]
    edd4:	4824      	ldr	r0, [pc, #144]	; (ee68 <am_hal_mcuctrl_info_get+0x124>)
    edd6:	610d      	str	r5, [r1, #16]
    edd8:	f3c2 5703 	ubfx	r7, r2, #20, #4
    eddc:	f3c2 4603 	ubfx	r6, r2, #16, #4
    ede0:	695d      	ldr	r5, [r3, #20]
    ede2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    ede6:	4b21      	ldr	r3, [pc, #132]	; (ee6c <am_hal_mcuctrl_info_get+0x128>)
    ede8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    edec:	6208      	str	r0, [r1, #32]
    edee:	f002 0201 	and.w	r2, r2, #1
    edf2:	614d      	str	r5, [r1, #20]
    edf4:	61cc      	str	r4, [r1, #28]
    edf6:	618a      	str	r2, [r1, #24]
    edf8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    edfc:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ee00:	b2d0      	uxtb	r0, r2
    ee02:	f004 020f 	and.w	r2, r4, #15
    ee06:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    ee0a:	624a      	str	r2, [r1, #36]	; 0x24
    ee0c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    ee10:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    ee14:	f3c2 1003 	ubfx	r0, r2, #4, #4
    ee18:	f004 020f 	and.w	r2, r4, #15
    ee1c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ee20:	628a      	str	r2, [r1, #40]	; 0x28
    ee22:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    ee26:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ee2a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ee2e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ee32:	4302      	orrs	r2, r0
    ee34:	62ca      	str	r2, [r1, #44]	; 0x2c
    ee36:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    ee3a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ee3e:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ee42:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ee46:	b2c0      	uxtb	r0, r0
    ee48:	0400      	lsls	r0, r0, #16
    ee4a:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ee4e:	b2d2      	uxtb	r2, r2
    ee50:	431a      	orrs	r2, r3
    ee52:	b2e3      	uxtb	r3, r4
    ee54:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ee58:	630b      	str	r3, [r1, #48]	; 0x30
    ee5a:	2000      	movs	r0, #0
    ee5c:	bcf0      	pop	{r4, r5, r6, r7}
    ee5e:	4770      	bx	lr
    ee60:	40020000 	.word	0x40020000
    ee64:	0000ff3c 	.word	0x0000ff3c
    ee68:	0000ff7c 	.word	0x0000ff7c
    ee6c:	f0000f00 	.word	0xf0000f00

0000ee70 <am_hal_pwrctrl_periph_enable>:
    ee70:	b570      	push	{r4, r5, r6, lr}
    ee72:	b082      	sub	sp, #8
    ee74:	4604      	mov	r4, r0
    ee76:	f7ff fa01 	bl	e27c <am_hal_interrupt_master_disable>
    ee7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ee7e:	4d0f      	ldr	r5, [pc, #60]	; (eebc <am_hal_pwrctrl_periph_enable+0x4c>)
    ee80:	4e0f      	ldr	r6, [pc, #60]	; (eec0 <am_hal_pwrctrl_periph_enable+0x50>)
    ee82:	9001      	str	r0, [sp, #4]
    ee84:	00a4      	lsls	r4, r4, #2
    ee86:	68aa      	ldr	r2, [r5, #8]
    ee88:	5933      	ldr	r3, [r6, r4]
    ee8a:	4313      	orrs	r3, r2
    ee8c:	60ab      	str	r3, [r5, #8]
    ee8e:	9801      	ldr	r0, [sp, #4]
    ee90:	4434      	add	r4, r6
    ee92:	f7ff f9f7 	bl	e284 <am_hal_interrupt_master_set>
    ee96:	2077      	movs	r0, #119	; 0x77
    ee98:	f7fe fffe 	bl	de98 <am_hal_flash_delay>
    ee9c:	69ab      	ldr	r3, [r5, #24]
    ee9e:	6864      	ldr	r4, [r4, #4]
    eea0:	4223      	tst	r3, r4
    eea2:	d103      	bne.n	eeac <am_hal_pwrctrl_periph_enable+0x3c>
    eea4:	2077      	movs	r0, #119	; 0x77
    eea6:	f7fe fff7 	bl	de98 <am_hal_flash_delay>
    eeaa:	69ab      	ldr	r3, [r5, #24]
    eeac:	4b03      	ldr	r3, [pc, #12]	; (eebc <am_hal_pwrctrl_periph_enable+0x4c>)
    eeae:	699b      	ldr	r3, [r3, #24]
    eeb0:	4223      	tst	r3, r4
    eeb2:	bf0c      	ite	eq
    eeb4:	2001      	moveq	r0, #1
    eeb6:	2000      	movne	r0, #0
    eeb8:	b002      	add	sp, #8
    eeba:	bd70      	pop	{r4, r5, r6, pc}
    eebc:	40021000 	.word	0x40021000
    eec0:	0000ffbc 	.word	0x0000ffbc

0000eec4 <am_hal_pwrctrl_periph_disable>:
    eec4:	b570      	push	{r4, r5, r6, lr}
    eec6:	b082      	sub	sp, #8
    eec8:	4604      	mov	r4, r0
    eeca:	f7ff f9d7 	bl	e27c <am_hal_interrupt_master_disable>
    eece:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eed2:	4d10      	ldr	r5, [pc, #64]	; (ef14 <am_hal_pwrctrl_periph_disable+0x50>)
    eed4:	4e10      	ldr	r6, [pc, #64]	; (ef18 <am_hal_pwrctrl_periph_disable+0x54>)
    eed6:	9001      	str	r0, [sp, #4]
    eed8:	00a4      	lsls	r4, r4, #2
    eeda:	68ab      	ldr	r3, [r5, #8]
    eedc:	5932      	ldr	r2, [r6, r4]
    eede:	ea23 0302 	bic.w	r3, r3, r2
    eee2:	60ab      	str	r3, [r5, #8]
    eee4:	9801      	ldr	r0, [sp, #4]
    eee6:	4434      	add	r4, r6
    eee8:	f7ff f9cc 	bl	e284 <am_hal_interrupt_master_set>
    eeec:	2077      	movs	r0, #119	; 0x77
    eeee:	f7fe ffd3 	bl	de98 <am_hal_flash_delay>
    eef2:	69ab      	ldr	r3, [r5, #24]
    eef4:	6864      	ldr	r4, [r4, #4]
    eef6:	4223      	tst	r3, r4
    eef8:	d003      	beq.n	ef02 <am_hal_pwrctrl_periph_disable+0x3e>
    eefa:	2077      	movs	r0, #119	; 0x77
    eefc:	f7fe ffcc 	bl	de98 <am_hal_flash_delay>
    ef00:	69ab      	ldr	r3, [r5, #24]
    ef02:	4b04      	ldr	r3, [pc, #16]	; (ef14 <am_hal_pwrctrl_periph_disable+0x50>)
    ef04:	699b      	ldr	r3, [r3, #24]
    ef06:	4223      	tst	r3, r4
    ef08:	bf14      	ite	ne
    ef0a:	2001      	movne	r0, #1
    ef0c:	2000      	moveq	r0, #0
    ef0e:	b002      	add	sp, #8
    ef10:	bd70      	pop	{r4, r5, r6, pc}
    ef12:	bf00      	nop
    ef14:	40021000 	.word	0x40021000
    ef18:	0000ffbc 	.word	0x0000ffbc

0000ef1c <am_hal_pwrctrl_low_power_init>:
    ef1c:	b530      	push	{r4, r5, lr}
    ef1e:	4b1f      	ldr	r3, [pc, #124]	; (ef9c <am_hal_pwrctrl_low_power_init+0x80>)
    ef20:	681a      	ldr	r2, [r3, #0]
    ef22:	b083      	sub	sp, #12
    ef24:	b912      	cbnz	r2, ef2c <am_hal_pwrctrl_low_power_init+0x10>
    ef26:	4a1e      	ldr	r2, [pc, #120]	; (efa0 <am_hal_pwrctrl_low_power_init+0x84>)
    ef28:	6812      	ldr	r2, [r2, #0]
    ef2a:	601a      	str	r2, [r3, #0]
    ef2c:	4c1d      	ldr	r4, [pc, #116]	; (efa4 <am_hal_pwrctrl_low_power_init+0x88>)
    ef2e:	69a3      	ldr	r3, [r4, #24]
    ef30:	05db      	lsls	r3, r3, #23
    ef32:	d502      	bpl.n	ef3a <am_hal_pwrctrl_low_power_init+0x1e>
    ef34:	2000      	movs	r0, #0
    ef36:	b003      	add	sp, #12
    ef38:	bd30      	pop	{r4, r5, pc}
    ef3a:	4d1b      	ldr	r5, [pc, #108]	; (efa8 <am_hal_pwrctrl_low_power_init+0x8c>)
    ef3c:	491b      	ldr	r1, [pc, #108]	; (efac <am_hal_pwrctrl_low_power_init+0x90>)
    ef3e:	7e2a      	ldrb	r2, [r5, #24]
    ef40:	2001      	movs	r0, #1
    ef42:	4302      	orrs	r2, r0
    ef44:	2307      	movs	r3, #7
    ef46:	762a      	strb	r2, [r5, #24]
    ef48:	9000      	str	r0, [sp, #0]
    ef4a:	461a      	mov	r2, r3
    ef4c:	f242 7010 	movw	r0, #10000	; 0x2710
    ef50:	f7fe ffa6 	bl	dea0 <am_hal_flash_delay_status_check>
    ef54:	b110      	cbz	r0, ef5c <am_hal_pwrctrl_low_power_init+0x40>
    ef56:	2004      	movs	r0, #4
    ef58:	b003      	add	sp, #12
    ef5a:	bd30      	pop	{r4, r5, pc}
    ef5c:	6823      	ldr	r3, [r4, #0]
    ef5e:	f043 0301 	orr.w	r3, r3, #1
    ef62:	6023      	str	r3, [r4, #0]
    ef64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ef66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef6a:	6263      	str	r3, [r4, #36]	; 0x24
    ef6c:	68eb      	ldr	r3, [r5, #12]
    ef6e:	b2db      	uxtb	r3, r3
    ef70:	2b11      	cmp	r3, #17
    ef72:	d1df      	bne.n	ef34 <am_hal_pwrctrl_low_power_init+0x18>
    ef74:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    ef78:	f360 5356 	bfi	r3, r0, #21, #2
    ef7c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    ef80:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    ef84:	220f      	movs	r2, #15
    ef86:	f362 138b 	bfi	r3, r2, #6, #6
    ef8a:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    ef8e:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    ef92:	f362 0305 	bfi	r3, r2, #0, #6
    ef96:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    ef9a:	e7cc      	b.n	ef36 <am_hal_pwrctrl_low_power_init+0x1a>
    ef9c:	10001170 	.word	0x10001170
    efa0:	4ffff000 	.word	0x4ffff000
    efa4:	40021000 	.word	0x40021000
    efa8:	40020000 	.word	0x40020000
    efac:	40020018 	.word	0x40020018

0000efb0 <am_hal_rtc_osc_select>:
    efb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    efb4:	2801      	cmp	r0, #1
    efb6:	68d3      	ldr	r3, [r2, #12]
    efb8:	bf0c      	ite	eq
    efba:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    efbe:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    efc2:	60d3      	str	r3, [r2, #12]
    efc4:	4770      	bx	lr
    efc6:	bf00      	nop

0000efc8 <am_hal_rtc_osc_disable>:
    efc8:	4a03      	ldr	r2, [pc, #12]	; (efd8 <am_hal_rtc_osc_disable+0x10>)
    efca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    efce:	f043 0310 	orr.w	r3, r3, #16
    efd2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    efd6:	4770      	bx	lr
    efd8:	40004200 	.word	0x40004200

0000efdc <am_hal_sysctrl_sleep>:
    efdc:	b510      	push	{r4, lr}
    efde:	b082      	sub	sp, #8
    efe0:	4604      	mov	r4, r0
    efe2:	f7ff f94b 	bl	e27c <am_hal_interrupt_master_disable>
    efe6:	4a0f      	ldr	r2, [pc, #60]	; (f024 <am_hal_sysctrl_sleep+0x48>)
    efe8:	9001      	str	r0, [sp, #4]
    efea:	b124      	cbz	r4, eff6 <am_hal_sysctrl_sleep+0x1a>
    efec:	4b0e      	ldr	r3, [pc, #56]	; (f028 <am_hal_sysctrl_sleep+0x4c>)
    efee:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    eff2:	07db      	lsls	r3, r3, #31
    eff4:	d511      	bpl.n	f01a <am_hal_sysctrl_sleep+0x3e>
    eff6:	6913      	ldr	r3, [r2, #16]
    eff8:	f023 0304 	bic.w	r3, r3, #4
    effc:	6113      	str	r3, [r2, #16]
    effe:	f3bf 8f4f 	dsb	sy
    f002:	4a0a      	ldr	r2, [pc, #40]	; (f02c <am_hal_sysctrl_sleep+0x50>)
    f004:	4b0a      	ldr	r3, [pc, #40]	; (f030 <am_hal_sysctrl_sleep+0x54>)
    f006:	6812      	ldr	r2, [r2, #0]
    f008:	601a      	str	r2, [r3, #0]
    f00a:	bf30      	wfi
    f00c:	f3bf 8f6f 	isb	sy
    f010:	9801      	ldr	r0, [sp, #4]
    f012:	f7ff f937 	bl	e284 <am_hal_interrupt_master_set>
    f016:	b002      	add	sp, #8
    f018:	bd10      	pop	{r4, pc}
    f01a:	6913      	ldr	r3, [r2, #16]
    f01c:	f043 0304 	orr.w	r3, r3, #4
    f020:	6113      	str	r3, [r2, #16]
    f022:	e7ec      	b.n	effe <am_hal_sysctrl_sleep+0x22>
    f024:	e000ed00 	.word	0xe000ed00
    f028:	40020000 	.word	0x40020000
    f02c:	5fff0000 	.word	0x5fff0000
    f030:	10001174 	.word	0x10001174

0000f034 <am_hal_uart_initialize>:
    f034:	2801      	cmp	r0, #1
    f036:	d901      	bls.n	f03c <am_hal_uart_initialize+0x8>
    f038:	2005      	movs	r0, #5
    f03a:	4770      	bx	lr
    f03c:	b169      	cbz	r1, f05a <am_hal_uart_initialize+0x26>
    f03e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f040:	2264      	movs	r2, #100	; 0x64
    f042:	4e0e      	ldr	r6, [pc, #56]	; (f07c <am_hal_uart_initialize+0x48>)
    f044:	fb02 f200 	mul.w	r2, r2, r0
    f048:	18b4      	adds	r4, r6, r2
    f04a:	4603      	mov	r3, r0
    f04c:	78e0      	ldrb	r0, [r4, #3]
    f04e:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f052:	b2fd      	uxtb	r5, r7
    f054:	b11d      	cbz	r5, f05e <am_hal_uart_initialize+0x2a>
    f056:	2007      	movs	r0, #7
    f058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f05a:	2006      	movs	r0, #6
    f05c:	4770      	bx	lr
    f05e:	f040 0001 	orr.w	r0, r0, #1
    f062:	70e0      	strb	r0, [r4, #3]
    f064:	58b0      	ldr	r0, [r6, r2]
    f066:	f8df e018 	ldr.w	lr, [pc, #24]	; f080 <am_hal_uart_initialize+0x4c>
    f06a:	f36e 0017 	bfi	r0, lr, #0, #24
    f06e:	50b0      	str	r0, [r6, r2]
    f070:	6263      	str	r3, [r4, #36]	; 0x24
    f072:	7127      	strb	r7, [r4, #4]
    f074:	6625      	str	r5, [r4, #96]	; 0x60
    f076:	4628      	mov	r0, r5
    f078:	600c      	str	r4, [r1, #0]
    f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f07c:	10004af4 	.word	0x10004af4
    f080:	00ea9e06 	.word	0x00ea9e06

0000f084 <am_hal_uart_deinitialize>:
    f084:	b128      	cbz	r0, f092 <am_hal_uart_deinitialize+0xe>
    f086:	6803      	ldr	r3, [r0, #0]
    f088:	4a07      	ldr	r2, [pc, #28]	; (f0a8 <am_hal_uart_deinitialize+0x24>)
    f08a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f08e:	4293      	cmp	r3, r2
    f090:	d001      	beq.n	f096 <am_hal_uart_deinitialize+0x12>
    f092:	2002      	movs	r0, #2
    f094:	4770      	bx	lr
    f096:	78c2      	ldrb	r2, [r0, #3]
    f098:	2300      	movs	r3, #0
    f09a:	f36f 0200 	bfc	r2, #0, #1
    f09e:	70c2      	strb	r2, [r0, #3]
    f0a0:	6243      	str	r3, [r0, #36]	; 0x24
    f0a2:	7103      	strb	r3, [r0, #4]
    f0a4:	4618      	mov	r0, r3
    f0a6:	4770      	bx	lr
    f0a8:	01ea9e06 	.word	0x01ea9e06

0000f0ac <am_hal_uart_power_control>:
    f0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f0b0:	6804      	ldr	r4, [r0, #0]
    f0b2:	4b36      	ldr	r3, [pc, #216]	; (f18c <am_hal_uart_power_control+0xe0>)
    f0b4:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f0b8:	429c      	cmp	r4, r3
    f0ba:	b083      	sub	sp, #12
    f0bc:	d003      	beq.n	f0c6 <am_hal_uart_power_control+0x1a>
    f0be:	2002      	movs	r0, #2
    f0c0:	b003      	add	sp, #12
    f0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f0c6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f0c8:	4605      	mov	r5, r0
    f0ca:	f107 0008 	add.w	r0, r7, #8
    f0ce:	4691      	mov	r9, r2
    f0d0:	460e      	mov	r6, r1
    f0d2:	fa5f f880 	uxtb.w	r8, r0
    f0d6:	b181      	cbz	r1, f0fa <am_hal_uart_power_control+0x4e>
    f0d8:	2902      	cmp	r1, #2
    f0da:	d80c      	bhi.n	f0f6 <am_hal_uart_power_control+0x4a>
    f0dc:	b992      	cbnz	r2, f104 <am_hal_uart_power_control+0x58>
    f0de:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f0e2:	371c      	adds	r7, #28
    f0e4:	033f      	lsls	r7, r7, #12
    f0e6:	f04f 33ff 	mov.w	r3, #4294967295
    f0ea:	647b      	str	r3, [r7, #68]	; 0x44
    f0ec:	4640      	mov	r0, r8
    f0ee:	f7ff fee9 	bl	eec4 <am_hal_pwrctrl_periph_disable>
    f0f2:	2000      	movs	r0, #0
    f0f4:	e7e4      	b.n	f0c0 <am_hal_uart_power_control+0x14>
    f0f6:	2006      	movs	r0, #6
    f0f8:	e7e2      	b.n	f0c0 <am_hal_uart_power_control+0x14>
    f0fa:	b322      	cbz	r2, f146 <am_hal_uart_power_control+0x9a>
    f0fc:	792b      	ldrb	r3, [r5, #4]
    f0fe:	bb3b      	cbnz	r3, f150 <am_hal_uart_power_control+0xa4>
    f100:	2007      	movs	r0, #7
    f102:	e7dd      	b.n	f0c0 <am_hal_uart_power_control+0x14>
    f104:	f7ff f8ba 	bl	e27c <am_hal_interrupt_master_disable>
    f108:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f10c:	331c      	adds	r3, #28
    f10e:	031b      	lsls	r3, r3, #12
    f110:	9001      	str	r0, [sp, #4]
    f112:	6a1a      	ldr	r2, [r3, #32]
    f114:	60aa      	str	r2, [r5, #8]
    f116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f118:	60ea      	str	r2, [r5, #12]
    f11a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f11c:	612a      	str	r2, [r5, #16]
    f11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f120:	616a      	str	r2, [r5, #20]
    f122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f124:	61aa      	str	r2, [r5, #24]
    f126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f128:	61ea      	str	r2, [r5, #28]
    f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f12c:	622b      	str	r3, [r5, #32]
    f12e:	2301      	movs	r3, #1
    f130:	712b      	strb	r3, [r5, #4]
    f132:	9801      	ldr	r0, [sp, #4]
    f134:	f7ff f8a6 	bl	e284 <am_hal_interrupt_master_set>
    f138:	682b      	ldr	r3, [r5, #0]
    f13a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f13e:	42a3      	cmp	r3, r4
    f140:	d1d4      	bne.n	f0ec <am_hal_uart_power_control+0x40>
    f142:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f144:	e7cb      	b.n	f0de <am_hal_uart_power_control+0x32>
    f146:	4640      	mov	r0, r8
    f148:	f7ff fe92 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    f14c:	4648      	mov	r0, r9
    f14e:	e7b7      	b.n	f0c0 <am_hal_uart_power_control+0x14>
    f150:	4640      	mov	r0, r8
    f152:	f7ff fe8d 	bl	ee70 <am_hal_pwrctrl_periph_enable>
    f156:	f7ff f891 	bl	e27c <am_hal_interrupt_master_disable>
    f15a:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f15e:	331c      	adds	r3, #28
    f160:	031b      	lsls	r3, r3, #12
    f162:	68aa      	ldr	r2, [r5, #8]
    f164:	9000      	str	r0, [sp, #0]
    f166:	621a      	str	r2, [r3, #32]
    f168:	68ea      	ldr	r2, [r5, #12]
    f16a:	625a      	str	r2, [r3, #36]	; 0x24
    f16c:	692a      	ldr	r2, [r5, #16]
    f16e:	629a      	str	r2, [r3, #40]	; 0x28
    f170:	696a      	ldr	r2, [r5, #20]
    f172:	62da      	str	r2, [r3, #44]	; 0x2c
    f174:	69aa      	ldr	r2, [r5, #24]
    f176:	631a      	str	r2, [r3, #48]	; 0x30
    f178:	69ea      	ldr	r2, [r5, #28]
    f17a:	635a      	str	r2, [r3, #52]	; 0x34
    f17c:	6a2a      	ldr	r2, [r5, #32]
    f17e:	639a      	str	r2, [r3, #56]	; 0x38
    f180:	9800      	ldr	r0, [sp, #0]
    f182:	712e      	strb	r6, [r5, #4]
    f184:	f7ff f87e 	bl	e284 <am_hal_interrupt_master_set>
    f188:	4630      	mov	r0, r6
    f18a:	e799      	b.n	f0c0 <am_hal_uart_power_control+0x14>
    f18c:	01ea9e06 	.word	0x01ea9e06

0000f190 <am_hal_uart_configure>:
    f190:	6803      	ldr	r3, [r0, #0]
    f192:	4a7a      	ldr	r2, [pc, #488]	; (f37c <am_hal_uart_configure+0x1ec>)
    f194:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f198:	4293      	cmp	r3, r2
    f19a:	d001      	beq.n	f1a0 <am_hal_uart_configure+0x10>
    f19c:	2002      	movs	r0, #2
    f19e:	4770      	bx	lr
    f1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f1a6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f1aa:	351c      	adds	r5, #28
    f1ac:	032d      	lsls	r5, r5, #12
    f1ae:	2700      	movs	r7, #0
    f1b0:	b084      	sub	sp, #16
    f1b2:	632f      	str	r7, [r5, #48]	; 0x30
    f1b4:	460e      	mov	r6, r1
    f1b6:	4604      	mov	r4, r0
    f1b8:	f7ff f860 	bl	e27c <am_hal_interrupt_master_disable>
    f1bc:	9001      	str	r0, [sp, #4]
    f1be:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1c0:	f043 0308 	orr.w	r3, r3, #8
    f1c4:	862b      	strh	r3, [r5, #48]	; 0x30
    f1c6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1c8:	2201      	movs	r2, #1
    f1ca:	f362 1306 	bfi	r3, r2, #4, #3
    f1ce:	862b      	strh	r3, [r5, #48]	; 0x30
    f1d0:	9801      	ldr	r0, [sp, #4]
    f1d2:	f7ff f857 	bl	e284 <am_hal_interrupt_master_set>
    f1d6:	f7ff f851 	bl	e27c <am_hal_interrupt_master_disable>
    f1da:	9002      	str	r0, [sp, #8]
    f1dc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1de:	f367 0300 	bfi	r3, r7, #0, #1
    f1e2:	862b      	strh	r3, [r5, #48]	; 0x30
    f1e4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1e6:	f367 2349 	bfi	r3, r7, #9, #1
    f1ea:	862b      	strh	r3, [r5, #48]	; 0x30
    f1ec:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1ee:	f367 2308 	bfi	r3, r7, #8, #1
    f1f2:	862b      	strh	r3, [r5, #48]	; 0x30
    f1f4:	9802      	ldr	r0, [sp, #8]
    f1f6:	f7ff f845 	bl	e284 <am_hal_interrupt_master_set>
    f1fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f1fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f200:	3b01      	subs	r3, #1
    f202:	2b03      	cmp	r3, #3
    f204:	d854      	bhi.n	f2b0 <am_hal_uart_configure+0x120>
    f206:	e8df f003 	tbb	[pc, r3]
    f20a:	020e      	.short	0x020e
    f20c:	1114      	.short	0x1114
    f20e:	495c      	ldr	r1, [pc, #368]	; (f380 <am_hal_uart_configure+0x1f0>)
    f210:	485c      	ldr	r0, [pc, #368]	; (f384 <am_hal_uart_configure+0x1f4>)
    f212:	6832      	ldr	r2, [r6, #0]
    f214:	0112      	lsls	r2, r2, #4
    f216:	fbb0 f3f2 	udiv	r3, r0, r2
    f21a:	b96b      	cbnz	r3, f238 <am_hal_uart_configure+0xa8>
    f21c:	485a      	ldr	r0, [pc, #360]	; (f388 <am_hal_uart_configure+0x1f8>)
    f21e:	6623      	str	r3, [r4, #96]	; 0x60
    f220:	b004      	add	sp, #16
    f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f226:	4959      	ldr	r1, [pc, #356]	; (f38c <am_hal_uart_configure+0x1fc>)
    f228:	4859      	ldr	r0, [pc, #356]	; (f390 <am_hal_uart_configure+0x200>)
    f22a:	e7f2      	b.n	f212 <am_hal_uart_configure+0x82>
    f22c:	4959      	ldr	r1, [pc, #356]	; (f394 <am_hal_uart_configure+0x204>)
    f22e:	485a      	ldr	r0, [pc, #360]	; (f398 <am_hal_uart_configure+0x208>)
    f230:	e7ef      	b.n	f212 <am_hal_uart_configure+0x82>
    f232:	495a      	ldr	r1, [pc, #360]	; (f39c <am_hal_uart_configure+0x20c>)
    f234:	485a      	ldr	r0, [pc, #360]	; (f3a0 <am_hal_uart_configure+0x210>)
    f236:	e7ec      	b.n	f212 <am_hal_uart_configure+0x82>
    f238:	fbb1 f2f2 	udiv	r2, r1, r2
    f23c:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f240:	626b      	str	r3, [r5, #36]	; 0x24
    f242:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    f246:	626b      	str	r3, [r5, #36]	; 0x24
    f248:	fbb0 f0f1 	udiv	r0, r0, r1
    f24c:	62aa      	str	r2, [r5, #40]	; 0x28
    f24e:	6620      	str	r0, [r4, #96]	; 0x60
    f250:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f252:	f36f 338e 	bfc	r3, #14, #1
    f256:	862b      	strh	r3, [r5, #48]	; 0x30
    f258:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f25a:	f36f 33cf 	bfc	r3, #15, #1
    f25e:	862b      	strh	r3, [r5, #48]	; 0x30
    f260:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f262:	6933      	ldr	r3, [r6, #16]
    f264:	4313      	orrs	r3, r2
    f266:	632b      	str	r3, [r5, #48]	; 0x30
    f268:	6973      	ldr	r3, [r6, #20]
    f26a:	636b      	str	r3, [r5, #52]	; 0x34
    f26c:	6871      	ldr	r1, [r6, #4]
    f26e:	68b3      	ldr	r3, [r6, #8]
    f270:	68f2      	ldr	r2, [r6, #12]
    f272:	430b      	orrs	r3, r1
    f274:	f043 0310 	orr.w	r3, r3, #16
    f278:	4313      	orrs	r3, r2
    f27a:	62eb      	str	r3, [r5, #44]	; 0x2c
    f27c:	f7fe fffe 	bl	e27c <am_hal_interrupt_master_disable>
    f280:	9003      	str	r0, [sp, #12]
    f282:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f284:	f043 0301 	orr.w	r3, r3, #1
    f288:	862b      	strh	r3, [r5, #48]	; 0x30
    f28a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f28c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f290:	862b      	strh	r3, [r5, #48]	; 0x30
    f292:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f298:	862b      	strh	r3, [r5, #48]	; 0x30
    f29a:	9803      	ldr	r0, [sp, #12]
    f29c:	f7fe fff2 	bl	e284 <am_hal_interrupt_master_set>
    f2a0:	6825      	ldr	r5, [r4, #0]
    f2a2:	4b36      	ldr	r3, [pc, #216]	; (f37c <am_hal_uart_configure+0x1ec>)
    f2a4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f2a8:	429d      	cmp	r5, r3
    f2aa:	d005      	beq.n	f2b8 <am_hal_uart_configure+0x128>
    f2ac:	2000      	movs	r0, #0
    f2ae:	e7b7      	b.n	f220 <am_hal_uart_configure+0x90>
    f2b0:	2300      	movs	r3, #0
    f2b2:	6623      	str	r3, [r4, #96]	; 0x60
    f2b4:	483b      	ldr	r0, [pc, #236]	; (f3a4 <am_hal_uart_configure+0x214>)
    f2b6:	e7b3      	b.n	f220 <am_hal_uart_configure+0x90>
    f2b8:	69b1      	ldr	r1, [r6, #24]
    f2ba:	6a37      	ldr	r7, [r6, #32]
    f2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    f2c0:	b109      	cbz	r1, f2c6 <am_hal_uart_configure+0x136>
    f2c2:	69f3      	ldr	r3, [r6, #28]
    f2c4:	bb3b      	cbnz	r3, f316 <am_hal_uart_configure+0x186>
    f2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2c8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f2cc:	f103 021c 	add.w	r2, r3, #28
    f2d0:	0312      	lsls	r2, r2, #12
    f2d2:	2100      	movs	r1, #0
    f2d4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    f2d8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f2da:	f021 0120 	bic.w	r1, r1, #32
    f2de:	6391      	str	r1, [r2, #56]	; 0x38
    f2e0:	b1b7      	cbz	r7, f310 <am_hal_uart_configure+0x180>
    f2e2:	f1b8 0f00 	cmp.w	r8, #0
    f2e6:	d12e      	bne.n	f346 <am_hal_uart_configure+0x1b6>
    f2e8:	6823      	ldr	r3, [r4, #0]
    f2ea:	4a24      	ldr	r2, [pc, #144]	; (f37c <am_hal_uart_configure+0x1ec>)
    f2ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2f0:	2100      	movs	r1, #0
    f2f2:	4293      	cmp	r3, r2
    f2f4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    f2f8:	d1d8      	bne.n	f2ac <am_hal_uart_configure+0x11c>
    f2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2fc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f300:	331c      	adds	r3, #28
    f302:	031b      	lsls	r3, r3, #12
    f304:	2000      	movs	r0, #0
    f306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f308:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f30c:	639a      	str	r2, [r3, #56]	; 0x38
    f30e:	e787      	b.n	f220 <am_hal_uart_configure+0x90>
    f310:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f314:	e7f4      	b.n	f300 <am_hal_uart_configure+0x170>
    f316:	2201      	movs	r2, #1
    f318:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f31c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f320:	f000 fb32 	bl	f988 <am_hal_queue_init>
    f324:	6823      	ldr	r3, [r4, #0]
    f326:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f32a:	42ab      	cmp	r3, r5
    f32c:	d1be      	bne.n	f2ac <am_hal_uart_configure+0x11c>
    f32e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f330:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f334:	331c      	adds	r3, #28
    f336:	031b      	lsls	r3, r3, #12
    f338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f33a:	f042 0220 	orr.w	r2, r2, #32
    f33e:	639a      	str	r2, [r3, #56]	; 0x38
    f340:	2f00      	cmp	r7, #0
    f342:	d1ce      	bne.n	f2e2 <am_hal_uart_configure+0x152>
    f344:	e7d0      	b.n	f2e8 <am_hal_uart_configure+0x158>
    f346:	2201      	movs	r2, #1
    f348:	4643      	mov	r3, r8
    f34a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f34e:	4639      	mov	r1, r7
    f350:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f354:	f000 fb18 	bl	f988 <am_hal_queue_init>
    f358:	6823      	ldr	r3, [r4, #0]
    f35a:	4a08      	ldr	r2, [pc, #32]	; (f37c <am_hal_uart_configure+0x1ec>)
    f35c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f360:	4293      	cmp	r3, r2
    f362:	d1a3      	bne.n	f2ac <am_hal_uart_configure+0x11c>
    f364:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f366:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f36a:	331c      	adds	r3, #28
    f36c:	031b      	lsls	r3, r3, #12
    f36e:	2000      	movs	r0, #0
    f370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f372:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f376:	639a      	str	r2, [r3, #56]	; 0x38
    f378:	e752      	b.n	f220 <am_hal_uart_configure+0x90>
    f37a:	bf00      	nop
    f37c:	01ea9e06 	.word	0x01ea9e06
    f380:	2dc6c000 	.word	0x2dc6c000
    f384:	00b71b00 	.word	0x00b71b00
    f388:	08000003 	.word	0x08000003
    f38c:	5b8d8000 	.word	0x5b8d8000
    f390:	016e3600 	.word	0x016e3600
    f394:	0b71b000 	.word	0x0b71b000
    f398:	002dc6c0 	.word	0x002dc6c0
    f39c:	16e36000 	.word	0x16e36000
    f3a0:	005b8d80 	.word	0x005b8d80
    f3a4:	08000002 	.word	0x08000002

0000f3a8 <am_hal_uart_transfer>:
    f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3ac:	680f      	ldr	r7, [r1, #0]
    f3ae:	b091      	sub	sp, #68	; 0x44
    f3b0:	4605      	mov	r5, r0
    f3b2:	b13f      	cbz	r7, f3c4 <am_hal_uart_transfer+0x1c>
    f3b4:	2f01      	cmp	r7, #1
    f3b6:	bf18      	it	ne
    f3b8:	2707      	movne	r7, #7
    f3ba:	d024      	beq.n	f406 <am_hal_uart_transfer+0x5e>
    f3bc:	4638      	mov	r0, r7
    f3be:	b011      	add	sp, #68	; 0x44
    f3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f3c8:	690b      	ldr	r3, [r1, #16]
    f3ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f3ce:	688e      	ldr	r6, [r1, #8]
    f3d0:	9300      	str	r3, [sp, #0]
    f3d2:	f1b9 0f00 	cmp.w	r9, #0
    f3d6:	d031      	beq.n	f43c <am_hal_uart_transfer+0x94>
    f3d8:	2e00      	cmp	r6, #0
    f3da:	f000 819c 	beq.w	f716 <am_hal_uart_transfer+0x36e>
    f3de:	2800      	cmp	r0, #0
    f3e0:	f000 8097 	beq.w	f512 <am_hal_uart_transfer+0x16a>
    f3e4:	6803      	ldr	r3, [r0, #0]
    f3e6:	4aa9      	ldr	r2, [pc, #676]	; (f68c <am_hal_uart_transfer+0x2e4>)
    f3e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3ec:	4293      	cmp	r3, r2
    f3ee:	f000 8092 	beq.w	f516 <am_hal_uart_transfer+0x16e>
    f3f2:	46b8      	mov	r8, r7
    f3f4:	9b00      	ldr	r3, [sp, #0]
    f3f6:	b10b      	cbz	r3, f3fc <am_hal_uart_transfer+0x54>
    f3f8:	f8c3 8000 	str.w	r8, [r3]
    f3fc:	2702      	movs	r7, #2
    f3fe:	4638      	mov	r0, r7
    f400:	b011      	add	sp, #68	; 0x44
    f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f406:	1d0b      	adds	r3, r1, #4
    f408:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f40c:	f1b9 0f00 	cmp.w	r9, #0
    f410:	d043      	beq.n	f49a <am_hal_uart_transfer+0xf2>
    f412:	2f00      	cmp	r7, #0
    f414:	f000 8185 	beq.w	f722 <am_hal_uart_transfer+0x37a>
    f418:	2800      	cmp	r0, #0
    f41a:	f000 80eb 	beq.w	f5f4 <am_hal_uart_transfer+0x24c>
    f41e:	6802      	ldr	r2, [r0, #0]
    f420:	499a      	ldr	r1, [pc, #616]	; (f68c <am_hal_uart_transfer+0x2e4>)
    f422:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f426:	428a      	cmp	r2, r1
    f428:	f000 80e7 	beq.w	f5fa <am_hal_uart_transfer+0x252>
    f42c:	2600      	movs	r6, #0
    f42e:	2702      	movs	r7, #2
    f430:	f1bb 0f00 	cmp.w	fp, #0
    f434:	d0c2      	beq.n	f3bc <am_hal_uart_transfer+0x14>
    f436:	f8cb 6000 	str.w	r6, [fp]
    f43a:	e7bf      	b.n	f3bc <am_hal_uart_transfer+0x14>
    f43c:	2800      	cmp	r0, #0
    f43e:	d0dd      	beq.n	f3fc <am_hal_uart_transfer+0x54>
    f440:	6803      	ldr	r3, [r0, #0]
    f442:	4a92      	ldr	r2, [pc, #584]	; (f68c <am_hal_uart_transfer+0x2e4>)
    f444:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f448:	4293      	cmp	r3, r2
    f44a:	d1d7      	bne.n	f3fc <am_hal_uart_transfer+0x54>
    f44c:	9b00      	ldr	r3, [sp, #0]
    f44e:	b10b      	cbz	r3, f454 <am_hal_uart_transfer+0xac>
    f450:	f8c3 9000 	str.w	r9, [r3]
    f454:	b1fe      	cbz	r6, f496 <am_hal_uart_transfer+0xee>
    f456:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f45a:	2b00      	cmp	r3, #0
    f45c:	f040 8165 	bne.w	f72a <am_hal_uart_transfer+0x382>
    f460:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f462:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f466:	311c      	adds	r1, #28
    f468:	0309      	lsls	r1, r1, #12
    f46a:	698a      	ldr	r2, [r1, #24]
    f46c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f470:	2a00      	cmp	r2, #0
    f472:	f040 818d 	bne.w	f790 <am_hal_uart_transfer+0x3e8>
    f476:	f10a 33ff 	add.w	r3, sl, #4294967295
    f47a:	e003      	b.n	f484 <am_hal_uart_transfer+0xdc>
    f47c:	6988      	ldr	r0, [r1, #24]
    f47e:	0680      	lsls	r0, r0, #26
    f480:	f100 8151 	bmi.w	f726 <am_hal_uart_transfer+0x37e>
    f484:	3201      	adds	r2, #1
    f486:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f48a:	6008      	str	r0, [r1, #0]
    f48c:	4296      	cmp	r6, r2
    f48e:	d1f5      	bne.n	f47c <am_hal_uart_transfer+0xd4>
    f490:	9b00      	ldr	r3, [sp, #0]
    f492:	b103      	cbz	r3, f496 <am_hal_uart_transfer+0xee>
    f494:	601e      	str	r6, [r3, #0]
    f496:	2700      	movs	r7, #0
    f498:	e790      	b.n	f3bc <am_hal_uart_transfer+0x14>
    f49a:	2800      	cmp	r0, #0
    f49c:	d0ae      	beq.n	f3fc <am_hal_uart_transfer+0x54>
    f49e:	6802      	ldr	r2, [r0, #0]
    f4a0:	497a      	ldr	r1, [pc, #488]	; (f68c <am_hal_uart_transfer+0x2e4>)
    f4a2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f4a6:	428a      	cmp	r2, r1
    f4a8:	d1a8      	bne.n	f3fc <am_hal_uart_transfer+0x54>
    f4aa:	f1bb 0f00 	cmp.w	fp, #0
    f4ae:	d001      	beq.n	f4b4 <am_hal_uart_transfer+0x10c>
    f4b0:	f8cb 9000 	str.w	r9, [fp]
    f4b4:	2f00      	cmp	r7, #0
    f4b6:	d0ee      	beq.n	f496 <am_hal_uart_transfer+0xee>
    f4b8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    f4bc:	2c00      	cmp	r4, #0
    f4be:	f040 816c 	bne.w	f79a <am_hal_uart_transfer+0x3f2>
    f4c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f4c4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f4c8:	321c      	adds	r2, #28
    f4ca:	0312      	lsls	r2, r2, #12
    f4cc:	6990      	ldr	r0, [r2, #24]
    f4ce:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f4d2:	2800      	cmp	r0, #0
    f4d4:	f040 819d 	bne.w	f812 <am_hal_uart_transfer+0x46a>
    f4d8:	6811      	ldr	r1, [r2, #0]
    f4da:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    f4de:	bf08      	it	eq
    f4e0:	f103 33ff 	addeq.w	r3, r3, #4294967295
    f4e4:	d008      	beq.n	f4f8 <am_hal_uart_transfer+0x150>
    f4e6:	e190      	b.n	f80a <am_hal_uart_transfer+0x462>
    f4e8:	6991      	ldr	r1, [r2, #24]
    f4ea:	06c8      	lsls	r0, r1, #27
    f4ec:	d409      	bmi.n	f502 <am_hal_uart_transfer+0x15a>
    f4ee:	6811      	ldr	r1, [r2, #0]
    f4f0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f4f4:	f040 814e 	bne.w	f794 <am_hal_uart_transfer+0x3ec>
    f4f8:	3401      	adds	r4, #1
    f4fa:	42a7      	cmp	r7, r4
    f4fc:	f803 1f01 	strb.w	r1, [r3, #1]!
    f500:	d1f2      	bne.n	f4e8 <am_hal_uart_transfer+0x140>
    f502:	2700      	movs	r7, #0
    f504:	f1bb 0f00 	cmp.w	fp, #0
    f508:	f43f af58 	beq.w	f3bc <am_hal_uart_transfer+0x14>
    f50c:	f8cb 4000 	str.w	r4, [fp]
    f510:	e754      	b.n	f3bc <am_hal_uart_transfer+0x14>
    f512:	4680      	mov	r8, r0
    f514:	e76e      	b.n	f3f4 <am_hal_uart_transfer+0x4c>
    f516:	9301      	str	r3, [sp, #4]
    f518:	4651      	mov	r1, sl
    f51a:	46bb      	mov	fp, r7
    f51c:	46b8      	mov	r8, r7
    f51e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f522:	b9f2      	cbnz	r2, f562 <am_hal_uart_transfer+0x1ba>
    f524:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f526:	b19e      	cbz	r6, f550 <am_hal_uart_transfer+0x1a8>
    f528:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f52c:	321c      	adds	r2, #28
    f52e:	0312      	lsls	r2, r2, #12
    f530:	3901      	subs	r1, #1
    f532:	6994      	ldr	r4, [r2, #24]
    f534:	f3c4 1440 	ubfx	r4, r4, #5, #1
    f538:	b11c      	cbz	r4, f542 <am_hal_uart_transfer+0x19a>
    f53a:	e047      	b.n	f5cc <am_hal_uart_transfer+0x224>
    f53c:	6993      	ldr	r3, [r2, #24]
    f53e:	069b      	lsls	r3, r3, #26
    f540:	d441      	bmi.n	f5c6 <am_hal_uart_transfer+0x21e>
    f542:	3401      	adds	r4, #1
    f544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    f548:	6013      	str	r3, [r2, #0]
    f54a:	42b4      	cmp	r4, r6
    f54c:	d1f6      	bne.n	f53c <am_hal_uart_transfer+0x194>
    f54e:	44a0      	add	r8, r4
    f550:	9b00      	ldr	r3, [sp, #0]
    f552:	2b00      	cmp	r3, #0
    f554:	d09f      	beq.n	f496 <am_hal_uart_transfer+0xee>
    f556:	4638      	mov	r0, r7
    f558:	f8c3 8000 	str.w	r8, [r3]
    f55c:	b011      	add	sp, #68	; 0x44
    f55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f562:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f564:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    f566:	1b14      	subs	r4, r2, r4
    f568:	42b4      	cmp	r4, r6
    f56a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    f56e:	bf28      	it	cs
    f570:	4634      	movcs	r4, r6
    f572:	4622      	mov	r2, r4
    f574:	4618      	mov	r0, r3
    f576:	9302      	str	r3, [sp, #8]
    f578:	f000 fa12 	bl	f9a0 <am_hal_queue_item_add>
    f57c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f57e:	9303      	str	r3, [sp, #12]
    f580:	f7fe fe7c 	bl	e27c <am_hal_interrupt_master_disable>
    f584:	9b03      	ldr	r3, [sp, #12]
    f586:	9008      	str	r0, [sp, #32]
    f588:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f58c:	331c      	adds	r3, #28
    f58e:	031b      	lsls	r3, r3, #12
    f590:	9303      	str	r3, [sp, #12]
    f592:	e00d      	b.n	f5b0 <am_hal_uart_transfer+0x208>
    f594:	f000 fa3c 	bl	fa10 <am_hal_queue_item_get>
    f598:	b190      	cbz	r0, f5c0 <am_hal_uart_transfer+0x218>
    f59a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f59c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f5a0:	331c      	adds	r3, #28
    f5a2:	031b      	lsls	r3, r3, #12
    f5a4:	699a      	ldr	r2, [r3, #24]
    f5a6:	0692      	lsls	r2, r2, #26
    f5a8:	bf5c      	itt	pl
    f5aa:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    f5ae:	601a      	strpl	r2, [r3, #0]
    f5b0:	9b03      	ldr	r3, [sp, #12]
    f5b2:	9802      	ldr	r0, [sp, #8]
    f5b4:	699b      	ldr	r3, [r3, #24]
    f5b6:	069b      	lsls	r3, r3, #26
    f5b8:	f04f 0201 	mov.w	r2, #1
    f5bc:	a907      	add	r1, sp, #28
    f5be:	d5e9      	bpl.n	f594 <am_hal_uart_transfer+0x1ec>
    f5c0:	9808      	ldr	r0, [sp, #32]
    f5c2:	f7fe fe5f 	bl	e284 <am_hal_interrupt_master_set>
    f5c6:	1b36      	subs	r6, r6, r4
    f5c8:	44a0      	add	r8, r4
    f5ca:	d0c1      	beq.n	f550 <am_hal_uart_transfer+0x1a8>
    f5cc:	2001      	movs	r0, #1
    f5ce:	f7fe fc63 	bl	de98 <am_hal_flash_delay>
    f5d2:	f1b9 3fff 	cmp.w	r9, #4294967295
    f5d6:	d001      	beq.n	f5dc <am_hal_uart_transfer+0x234>
    f5d8:	f10b 0b01 	add.w	fp, fp, #1
    f5dc:	45d9      	cmp	r9, fp
    f5de:	d9b7      	bls.n	f550 <am_hal_uart_transfer+0x1a8>
    f5e0:	682a      	ldr	r2, [r5, #0]
    f5e2:	9b01      	ldr	r3, [sp, #4]
    f5e4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f5e8:	429a      	cmp	r2, r3
    f5ea:	eb0a 0108 	add.w	r1, sl, r8
    f5ee:	f47f af01 	bne.w	f3f4 <am_hal_uart_transfer+0x4c>
    f5f2:	e794      	b.n	f51e <am_hal_uart_transfer+0x176>
    f5f4:	4606      	mov	r6, r0
    f5f6:	2702      	movs	r7, #2
    f5f8:	e71a      	b.n	f430 <am_hal_uart_transfer+0x88>
    f5fa:	9200      	str	r2, [sp, #0]
    f5fc:	f100 0248 	add.w	r2, r0, #72	; 0x48
    f600:	f04f 0a00 	mov.w	sl, #0
    f604:	9202      	str	r2, [sp, #8]
    f606:	465a      	mov	r2, fp
    f608:	4698      	mov	r8, r3
    f60a:	469b      	mov	fp, r3
    f60c:	4656      	mov	r6, sl
    f60e:	4613      	mov	r3, r2
    f610:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    f614:	2a00      	cmp	r2, #0
    f616:	d152      	bne.n	f6be <am_hal_uart_transfer+0x316>
    f618:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f61a:	b3a7      	cbz	r7, f686 <am_hal_uart_transfer+0x2de>
    f61c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f620:	311c      	adds	r1, #28
    f622:	0309      	lsls	r1, r1, #12
    f624:	698a      	ldr	r2, [r1, #24]
    f626:	06d0      	lsls	r0, r2, #27
    f628:	d432      	bmi.n	f690 <am_hal_uart_transfer+0x2e8>
    f62a:	680a      	ldr	r2, [r1, #0]
    f62c:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    f630:	f040 80aa 	bne.w	f788 <am_hal_uart_transfer+0x3e0>
    f634:	f108 38ff 	add.w	r8, r8, #4294967295
    f638:	e006      	b.n	f648 <am_hal_uart_transfer+0x2a0>
    f63a:	698a      	ldr	r2, [r1, #24]
    f63c:	06d2      	lsls	r2, r2, #27
    f63e:	d41f      	bmi.n	f680 <am_hal_uart_transfer+0x2d8>
    f640:	680a      	ldr	r2, [r1, #0]
    f642:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f646:	d161      	bne.n	f70c <am_hal_uart_transfer+0x364>
    f648:	3401      	adds	r4, #1
    f64a:	42bc      	cmp	r4, r7
    f64c:	f808 2f01 	strb.w	r2, [r8, #1]!
    f650:	d1f3      	bne.n	f63a <am_hal_uart_transfer+0x292>
    f652:	469b      	mov	fp, r3
    f654:	4426      	add	r6, r4
    f656:	f1bb 0f00 	cmp.w	fp, #0
    f65a:	f43f af1c 	beq.w	f496 <am_hal_uart_transfer+0xee>
    f65e:	f8cb 6000 	str.w	r6, [fp]
    f662:	2700      	movs	r7, #0
    f664:	e6aa      	b.n	f3bc <am_hal_uart_transfer+0x14>
    f666:	9807      	ldr	r0, [sp, #28]
    f668:	f7fe fe0c 	bl	e284 <am_hal_interrupt_master_set>
    f66c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f66e:	9802      	ldr	r0, [sp, #8]
    f670:	42bc      	cmp	r4, r7
    f672:	bf28      	it	cs
    f674:	463c      	movcs	r4, r7
    f676:	4641      	mov	r1, r8
    f678:	4622      	mov	r2, r4
    f67a:	f000 f9c9 	bl	fa10 <am_hal_queue_item_get>
    f67e:	9b01      	ldr	r3, [sp, #4]
    f680:	1b3f      	subs	r7, r7, r4
    f682:	4426      	add	r6, r4
    f684:	d104      	bne.n	f690 <am_hal_uart_transfer+0x2e8>
    f686:	469b      	mov	fp, r3
    f688:	e7e5      	b.n	f656 <am_hal_uart_transfer+0x2ae>
    f68a:	bf00      	nop
    f68c:	01ea9e06 	.word	0x01ea9e06
    f690:	2001      	movs	r0, #1
    f692:	9301      	str	r3, [sp, #4]
    f694:	f7fe fc00 	bl	de98 <am_hal_flash_delay>
    f698:	f1b9 3fff 	cmp.w	r9, #4294967295
    f69c:	9b01      	ldr	r3, [sp, #4]
    f69e:	d001      	beq.n	f6a4 <am_hal_uart_transfer+0x2fc>
    f6a0:	f10a 0a01 	add.w	sl, sl, #1
    f6a4:	45d1      	cmp	r9, sl
    f6a6:	d9ee      	bls.n	f686 <am_hal_uart_transfer+0x2de>
    f6a8:	682a      	ldr	r2, [r5, #0]
    f6aa:	9900      	ldr	r1, [sp, #0]
    f6ac:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f6b0:	428a      	cmp	r2, r1
    f6b2:	eb0b 0806 	add.w	r8, fp, r6
    f6b6:	d0ab      	beq.n	f610 <am_hal_uart_transfer+0x268>
    f6b8:	469b      	mov	fp, r3
    f6ba:	2702      	movs	r7, #2
    f6bc:	e6b8      	b.n	f430 <am_hal_uart_transfer+0x88>
    f6be:	9301      	str	r3, [sp, #4]
    f6c0:	f7fe fddc 	bl	e27c <am_hal_interrupt_master_disable>
    f6c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f6c6:	9007      	str	r0, [sp, #28]
    f6c8:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    f6cc:	301c      	adds	r0, #28
    f6ce:	9b01      	ldr	r3, [sp, #4]
    f6d0:	0300      	lsls	r0, r0, #12
    f6d2:	ac08      	add	r4, sp, #32
    f6d4:	2200      	movs	r2, #0
    f6d6:	6981      	ldr	r1, [r0, #24]
    f6d8:	06c9      	lsls	r1, r1, #27
    f6da:	d409      	bmi.n	f6f0 <am_hal_uart_transfer+0x348>
    f6dc:	6801      	ldr	r1, [r0, #0]
    f6de:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f6e2:	f102 0201 	add.w	r2, r2, #1
    f6e6:	d118      	bne.n	f71a <am_hal_uart_transfer+0x372>
    f6e8:	2a20      	cmp	r2, #32
    f6ea:	f804 1b01 	strb.w	r1, [r4], #1
    f6ee:	d1f2      	bne.n	f6d6 <am_hal_uart_transfer+0x32e>
    f6f0:	a908      	add	r1, sp, #32
    f6f2:	9802      	ldr	r0, [sp, #8]
    f6f4:	9301      	str	r3, [sp, #4]
    f6f6:	f000 f953 	bl	f9a0 <am_hal_queue_item_add>
    f6fa:	9b01      	ldr	r3, [sp, #4]
    f6fc:	2800      	cmp	r0, #0
    f6fe:	d1b2      	bne.n	f666 <am_hal_uart_transfer+0x2be>
    f700:	4f45      	ldr	r7, [pc, #276]	; (f818 <am_hal_uart_transfer+0x470>)
    f702:	469b      	mov	fp, r3
    f704:	9807      	ldr	r0, [sp, #28]
    f706:	f7fe fdbd 	bl	e284 <am_hal_interrupt_master_set>
    f70a:	e691      	b.n	f430 <am_hal_uart_transfer+0x88>
    f70c:	469b      	mov	fp, r3
    f70e:	4426      	add	r6, r4
    f710:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f714:	e68c      	b.n	f430 <am_hal_uart_transfer+0x88>
    f716:	46b8      	mov	r8, r7
    f718:	e71a      	b.n	f550 <am_hal_uart_transfer+0x1a8>
    f71a:	469b      	mov	fp, r3
    f71c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f720:	e7f0      	b.n	f704 <am_hal_uart_transfer+0x35c>
    f722:	463e      	mov	r6, r7
    f724:	e797      	b.n	f656 <am_hal_uart_transfer+0x2ae>
    f726:	4616      	mov	r6, r2
    f728:	e6b2      	b.n	f490 <am_hal_uart_transfer+0xe8>
    f72a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f72c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f72e:	1a9b      	subs	r3, r3, r2
    f730:	429e      	cmp	r6, r3
    f732:	bf28      	it	cs
    f734:	461e      	movcs	r6, r3
    f736:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    f73a:	4651      	mov	r1, sl
    f73c:	4632      	mov	r2, r6
    f73e:	4620      	mov	r0, r4
    f740:	f000 f92e 	bl	f9a0 <am_hal_queue_item_add>
    f744:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f746:	f7fe fd99 	bl	e27c <am_hal_interrupt_master_disable>
    f74a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f74e:	371c      	adds	r7, #28
    f750:	033f      	lsls	r7, r7, #12
    f752:	9005      	str	r0, [sp, #20]
    f754:	e00d      	b.n	f772 <am_hal_uart_transfer+0x3ca>
    f756:	f000 f95b 	bl	fa10 <am_hal_queue_item_get>
    f75a:	b188      	cbz	r0, f780 <am_hal_uart_transfer+0x3d8>
    f75c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f75e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f762:	331c      	adds	r3, #28
    f764:	031b      	lsls	r3, r3, #12
    f766:	699a      	ldr	r2, [r3, #24]
    f768:	0692      	lsls	r2, r2, #26
    f76a:	bf5c      	itt	pl
    f76c:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    f770:	601a      	strpl	r2, [r3, #0]
    f772:	69bb      	ldr	r3, [r7, #24]
    f774:	069b      	lsls	r3, r3, #26
    f776:	f04f 0201 	mov.w	r2, #1
    f77a:	a908      	add	r1, sp, #32
    f77c:	4620      	mov	r0, r4
    f77e:	d5ea      	bpl.n	f756 <am_hal_uart_transfer+0x3ae>
    f780:	9805      	ldr	r0, [sp, #20]
    f782:	f7fe fd7f 	bl	e284 <am_hal_interrupt_master_set>
    f786:	e683      	b.n	f490 <am_hal_uart_transfer+0xe8>
    f788:	469b      	mov	fp, r3
    f78a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f78e:	e64f      	b.n	f430 <am_hal_uart_transfer+0x88>
    f790:	461e      	mov	r6, r3
    f792:	e67d      	b.n	f490 <am_hal_uart_transfer+0xe8>
    f794:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f798:	e6b4      	b.n	f504 <am_hal_uart_transfer+0x15c>
    f79a:	9300      	str	r3, [sp, #0]
    f79c:	f7fe fd6e 	bl	e27c <am_hal_interrupt_master_disable>
    f7a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f7a2:	9006      	str	r0, [sp, #24]
    f7a4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f7a8:	321c      	adds	r2, #28
    f7aa:	0311      	lsls	r1, r2, #12
    f7ac:	a808      	add	r0, sp, #32
    f7ae:	2200      	movs	r2, #0
    f7b0:	9b00      	ldr	r3, [sp, #0]
    f7b2:	e009      	b.n	f7c8 <am_hal_uart_transfer+0x420>
    f7b4:	680c      	ldr	r4, [r1, #0]
    f7b6:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    f7ba:	f102 0201 	add.w	r2, r2, #1
    f7be:	d121      	bne.n	f804 <am_hal_uart_transfer+0x45c>
    f7c0:	2a20      	cmp	r2, #32
    f7c2:	f800 4b01 	strb.w	r4, [r0], #1
    f7c6:	d002      	beq.n	f7ce <am_hal_uart_transfer+0x426>
    f7c8:	698c      	ldr	r4, [r1, #24]
    f7ca:	06e4      	lsls	r4, r4, #27
    f7cc:	d5f2      	bpl.n	f7b4 <am_hal_uart_transfer+0x40c>
    f7ce:	f105 0648 	add.w	r6, r5, #72	; 0x48
    f7d2:	a908      	add	r1, sp, #32
    f7d4:	4630      	mov	r0, r6
    f7d6:	9300      	str	r3, [sp, #0]
    f7d8:	f000 f8e2 	bl	f9a0 <am_hal_queue_item_add>
    f7dc:	b920      	cbnz	r0, f7e8 <am_hal_uart_transfer+0x440>
    f7de:	4f0e      	ldr	r7, [pc, #56]	; (f818 <am_hal_uart_transfer+0x470>)
    f7e0:	9806      	ldr	r0, [sp, #24]
    f7e2:	f7fe fd4f 	bl	e284 <am_hal_interrupt_master_set>
    f7e6:	e5e9      	b.n	f3bc <am_hal_uart_transfer+0x14>
    f7e8:	9806      	ldr	r0, [sp, #24]
    f7ea:	f7fe fd4b 	bl	e284 <am_hal_interrupt_master_set>
    f7ee:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f7f0:	9b00      	ldr	r3, [sp, #0]
    f7f2:	42bc      	cmp	r4, r7
    f7f4:	bf28      	it	cs
    f7f6:	463c      	movcs	r4, r7
    f7f8:	4619      	mov	r1, r3
    f7fa:	4630      	mov	r0, r6
    f7fc:	4622      	mov	r2, r4
    f7fe:	f000 f907 	bl	fa10 <am_hal_queue_item_get>
    f802:	e67e      	b.n	f502 <am_hal_uart_transfer+0x15a>
    f804:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f808:	e7ea      	b.n	f7e0 <am_hal_uart_transfer+0x438>
    f80a:	4604      	mov	r4, r0
    f80c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f810:	e678      	b.n	f504 <am_hal_uart_transfer+0x15c>
    f812:	4627      	mov	r7, r4
    f814:	e676      	b.n	f504 <am_hal_uart_transfer+0x15c>
    f816:	bf00      	nop
    f818:	08000001 	.word	0x08000001

0000f81c <am_hal_uart_tx_flush>:
    f81c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f820:	b570      	push	{r4, r5, r6, lr}
    f822:	4604      	mov	r4, r0
    f824:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f826:	b183      	cbz	r3, f84a <am_hal_uart_tx_flush+0x2e>
    f828:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f82a:	b173      	cbz	r3, f84a <am_hal_uart_tx_flush+0x2e>
    f82c:	4e13      	ldr	r6, [pc, #76]	; (f87c <am_hal_uart_tx_flush+0x60>)
    f82e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f830:	fbb6 f0f0 	udiv	r0, r6, r0
    f834:	2802      	cmp	r0, #2
    f836:	ea4f 1000 	mov.w	r0, r0, lsl #4
    f83a:	bf8c      	ite	hi
    f83c:	3829      	subhi	r0, #41	; 0x29
    f83e:	2001      	movls	r0, #1
    f840:	f7fe fb2a 	bl	de98 <am_hal_flash_delay>
    f844:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f846:	2b00      	cmp	r3, #0
    f848:	d1f1      	bne.n	f82e <am_hal_uart_tx_flush+0x12>
    f84a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f84e:	351c      	adds	r5, #28
    f850:	032d      	lsls	r5, r5, #12
    f852:	69ab      	ldr	r3, [r5, #24]
    f854:	071a      	lsls	r2, r3, #28
    f856:	d50e      	bpl.n	f876 <am_hal_uart_tx_flush+0x5a>
    f858:	4e08      	ldr	r6, [pc, #32]	; (f87c <am_hal_uart_tx_flush+0x60>)
    f85a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f85c:	fbb6 f0f0 	udiv	r0, r6, r0
    f860:	2802      	cmp	r0, #2
    f862:	ea4f 1000 	mov.w	r0, r0, lsl #4
    f866:	bf8c      	ite	hi
    f868:	3829      	subhi	r0, #41	; 0x29
    f86a:	2001      	movls	r0, #1
    f86c:	f7fe fb14 	bl	de98 <am_hal_flash_delay>
    f870:	69ab      	ldr	r3, [r5, #24]
    f872:	071b      	lsls	r3, r3, #28
    f874:	d4f1      	bmi.n	f85a <am_hal_uart_tx_flush+0x3e>
    f876:	2000      	movs	r0, #0
    f878:	bd70      	pop	{r4, r5, r6, pc}
    f87a:	bf00      	nop
    f87c:	00b71b00 	.word	0x00b71b00

0000f880 <am_hal_cmdq_init>:
    f880:	2807      	cmp	r0, #7
    f882:	d901      	bls.n	f888 <am_hal_cmdq_init+0x8>
    f884:	2005      	movs	r0, #5
    f886:	4770      	bx	lr
    f888:	b1c9      	cbz	r1, f8be <am_hal_cmdq_init+0x3e>
    f88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f88e:	684c      	ldr	r4, [r1, #4]
    f890:	b194      	cbz	r4, f8b8 <am_hal_cmdq_init+0x38>
    f892:	b18a      	cbz	r2, f8b8 <am_hal_cmdq_init+0x38>
    f894:	680e      	ldr	r6, [r1, #0]
    f896:	2e01      	cmp	r6, #1
    f898:	d90e      	bls.n	f8b8 <am_hal_cmdq_init+0x38>
    f89a:	272c      	movs	r7, #44	; 0x2c
    f89c:	f8df c09c 	ldr.w	ip, [pc, #156]	; f93c <am_hal_cmdq_init+0xbc>
    f8a0:	fb07 f700 	mul.w	r7, r7, r0
    f8a4:	eb0c 0507 	add.w	r5, ip, r7
    f8a8:	f895 e003 	ldrb.w	lr, [r5, #3]
    f8ac:	f01e 0301 	ands.w	r3, lr, #1
    f8b0:	d007      	beq.n	f8c2 <am_hal_cmdq_init+0x42>
    f8b2:	2007      	movs	r0, #7
    f8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8b8:	2006      	movs	r0, #6
    f8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8be:	2006      	movs	r0, #6
    f8c0:	4770      	bx	lr
    f8c2:	f04e 0e01 	orr.w	lr, lr, #1
    f8c6:	00f6      	lsls	r6, r6, #3
    f8c8:	f363 0e41 	bfi	lr, r3, #1, #1
    f8cc:	f885 e003 	strb.w	lr, [r5, #3]
    f8d0:	eb06 0804 	add.w	r8, r6, r4
    f8d4:	f8df e068 	ldr.w	lr, [pc, #104]	; f940 <am_hal_cmdq_init+0xc0>
    f8d8:	f8c5 8008 	str.w	r8, [r5, #8]
    f8dc:	606c      	str	r4, [r5, #4]
    f8de:	60ec      	str	r4, [r5, #12]
    f8e0:	616c      	str	r4, [r5, #20]
    f8e2:	612c      	str	r4, [r5, #16]
    f8e4:	61ae      	str	r6, [r5, #24]
    f8e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f8ea:	f85c 6007 	ldr.w	r6, [ip, r7]
    f8ee:	f8df 8054 	ldr.w	r8, [pc, #84]	; f944 <am_hal_cmdq_init+0xc4>
    f8f2:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    f8f6:	f368 0617 	bfi	r6, r8, #0, #24
    f8fa:	f8d0 e008 	ldr.w	lr, [r0, #8]
    f8fe:	f84c 6007 	str.w	r6, [ip, r7]
    f902:	6268      	str	r0, [r5, #36]	; 0x24
    f904:	61eb      	str	r3, [r5, #28]
    f906:	622b      	str	r3, [r5, #32]
    f908:	f8ce 3000 	str.w	r3, [lr]
    f90c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f90e:	7a09      	ldrb	r1, [r1, #8]
    f910:	68c0      	ldr	r0, [r0, #12]
    f912:	6003      	str	r3, [r0, #0]
    f914:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f916:	6906      	ldr	r6, [r0, #16]
    f918:	6940      	ldr	r0, [r0, #20]
    f91a:	6837      	ldr	r7, [r6, #0]
    f91c:	4338      	orrs	r0, r7
    f91e:	6030      	str	r0, [r6, #0]
    f920:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f922:	6840      	ldr	r0, [r0, #4]
    f924:	6004      	str	r4, [r0, #0]
    f926:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f928:	0049      	lsls	r1, r1, #1
    f92a:	6804      	ldr	r4, [r0, #0]
    f92c:	f001 0102 	and.w	r1, r1, #2
    f930:	6021      	str	r1, [r4, #0]
    f932:	4618      	mov	r0, r3
    f934:	6015      	str	r5, [r2, #0]
    f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f93a:	bf00      	nop
    f93c:	10001178 	.word	0x10001178
    f940:	00010070 	.word	0x00010070
    f944:	00cdcdcd 	.word	0x00cdcdcd

0000f948 <am_hal_cmdq_enable>:
    f948:	4603      	mov	r3, r0
    f94a:	b128      	cbz	r0, f958 <am_hal_cmdq_enable+0x10>
    f94c:	6802      	ldr	r2, [r0, #0]
    f94e:	490d      	ldr	r1, [pc, #52]	; (f984 <am_hal_cmdq_enable+0x3c>)
    f950:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f954:	428a      	cmp	r2, r1
    f956:	d001      	beq.n	f95c <am_hal_cmdq_enable+0x14>
    f958:	2002      	movs	r0, #2
    f95a:	4770      	bx	lr
    f95c:	78c2      	ldrb	r2, [r0, #3]
    f95e:	f002 0202 	and.w	r2, r2, #2
    f962:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f966:	b952      	cbnz	r2, f97e <am_hal_cmdq_enable+0x36>
    f968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f96a:	6811      	ldr	r1, [r2, #0]
    f96c:	680a      	ldr	r2, [r1, #0]
    f96e:	f042 0201 	orr.w	r2, r2, #1
    f972:	600a      	str	r2, [r1, #0]
    f974:	78da      	ldrb	r2, [r3, #3]
    f976:	f042 0202 	orr.w	r2, r2, #2
    f97a:	70da      	strb	r2, [r3, #3]
    f97c:	4770      	bx	lr
    f97e:	2000      	movs	r0, #0
    f980:	4770      	bx	lr
    f982:	bf00      	nop
    f984:	01cdcdcd 	.word	0x01cdcdcd

0000f988 <am_hal_queue_init>:
    f988:	b410      	push	{r4}
    f98a:	2400      	movs	r4, #0
    f98c:	6004      	str	r4, [r0, #0]
    f98e:	6044      	str	r4, [r0, #4]
    f990:	6084      	str	r4, [r0, #8]
    f992:	60c3      	str	r3, [r0, #12]
    f994:	6102      	str	r2, [r0, #16]
    f996:	6141      	str	r1, [r0, #20]
    f998:	f85d 4b04 	ldr.w	r4, [sp], #4
    f99c:	4770      	bx	lr
    f99e:	bf00      	nop

0000f9a0 <am_hal_queue_item_add>:
    f9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9a2:	4604      	mov	r4, r0
    f9a4:	6906      	ldr	r6, [r0, #16]
    f9a6:	b083      	sub	sp, #12
    f9a8:	fb06 f602 	mul.w	r6, r6, r2
    f9ac:	460d      	mov	r5, r1
    f9ae:	f7fe fc65 	bl	e27c <am_hal_interrupt_master_disable>
    f9b2:	68e7      	ldr	r7, [r4, #12]
    f9b4:	68a2      	ldr	r2, [r4, #8]
    f9b6:	9001      	str	r0, [sp, #4]
    f9b8:	1abb      	subs	r3, r7, r2
    f9ba:	429e      	cmp	r6, r3
    f9bc:	d826      	bhi.n	fa0c <am_hal_queue_item_add+0x6c>
    f9be:	b196      	cbz	r6, f9e6 <am_hal_queue_item_add+0x46>
    f9c0:	6823      	ldr	r3, [r4, #0]
    f9c2:	4629      	mov	r1, r5
    f9c4:	b1c5      	cbz	r5, f9f8 <am_hal_queue_item_add+0x58>
    f9c6:	19af      	adds	r7, r5, r6
    f9c8:	6962      	ldr	r2, [r4, #20]
    f9ca:	f811 0b01 	ldrb.w	r0, [r1], #1
    f9ce:	54d0      	strb	r0, [r2, r3]
    f9d0:	6823      	ldr	r3, [r4, #0]
    f9d2:	68e5      	ldr	r5, [r4, #12]
    f9d4:	3301      	adds	r3, #1
    f9d6:	42b9      	cmp	r1, r7
    f9d8:	fbb3 f0f5 	udiv	r0, r3, r5
    f9dc:	fb05 3310 	mls	r3, r5, r0, r3
    f9e0:	6023      	str	r3, [r4, #0]
    f9e2:	d1f1      	bne.n	f9c8 <am_hal_queue_item_add+0x28>
    f9e4:	68a2      	ldr	r2, [r4, #8]
    f9e6:	4432      	add	r2, r6
    f9e8:	60a2      	str	r2, [r4, #8]
    f9ea:	2401      	movs	r4, #1
    f9ec:	9801      	ldr	r0, [sp, #4]
    f9ee:	f7fe fc49 	bl	e284 <am_hal_interrupt_master_set>
    f9f2:	4620      	mov	r0, r4
    f9f4:	b003      	add	sp, #12
    f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9f8:	3101      	adds	r1, #1
    f9fa:	3301      	adds	r3, #1
    f9fc:	428e      	cmp	r6, r1
    f9fe:	fbb3 f0f7 	udiv	r0, r3, r7
    fa02:	fb07 3310 	mls	r3, r7, r0, r3
    fa06:	d1f7      	bne.n	f9f8 <am_hal_queue_item_add+0x58>
    fa08:	6023      	str	r3, [r4, #0]
    fa0a:	e7ec      	b.n	f9e6 <am_hal_queue_item_add+0x46>
    fa0c:	2400      	movs	r4, #0
    fa0e:	e7ed      	b.n	f9ec <am_hal_queue_item_add+0x4c>

0000fa10 <am_hal_queue_item_get>:
    fa10:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa12:	4604      	mov	r4, r0
    fa14:	6906      	ldr	r6, [r0, #16]
    fa16:	b083      	sub	sp, #12
    fa18:	fb06 f602 	mul.w	r6, r6, r2
    fa1c:	460d      	mov	r5, r1
    fa1e:	f7fe fc2d 	bl	e27c <am_hal_interrupt_master_disable>
    fa22:	68a2      	ldr	r2, [r4, #8]
    fa24:	9001      	str	r0, [sp, #4]
    fa26:	4296      	cmp	r6, r2
    fa28:	d81c      	bhi.n	fa64 <am_hal_queue_item_get+0x54>
    fa2a:	b196      	cbz	r6, fa52 <am_hal_queue_item_get+0x42>
    fa2c:	6863      	ldr	r3, [r4, #4]
    fa2e:	b1dd      	cbz	r5, fa68 <am_hal_queue_item_get+0x58>
    fa30:	4629      	mov	r1, r5
    fa32:	19af      	adds	r7, r5, r6
    fa34:	6962      	ldr	r2, [r4, #20]
    fa36:	5cd3      	ldrb	r3, [r2, r3]
    fa38:	f801 3b01 	strb.w	r3, [r1], #1
    fa3c:	6863      	ldr	r3, [r4, #4]
    fa3e:	68e5      	ldr	r5, [r4, #12]
    fa40:	3301      	adds	r3, #1
    fa42:	428f      	cmp	r7, r1
    fa44:	fbb3 f0f5 	udiv	r0, r3, r5
    fa48:	fb05 3310 	mls	r3, r5, r0, r3
    fa4c:	6063      	str	r3, [r4, #4]
    fa4e:	d1f1      	bne.n	fa34 <am_hal_queue_item_get+0x24>
    fa50:	68a2      	ldr	r2, [r4, #8]
    fa52:	1b92      	subs	r2, r2, r6
    fa54:	60a2      	str	r2, [r4, #8]
    fa56:	2401      	movs	r4, #1
    fa58:	9801      	ldr	r0, [sp, #4]
    fa5a:	f7fe fc13 	bl	e284 <am_hal_interrupt_master_set>
    fa5e:	4620      	mov	r0, r4
    fa60:	b003      	add	sp, #12
    fa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa64:	2400      	movs	r4, #0
    fa66:	e7f7      	b.n	fa58 <am_hal_queue_item_get+0x48>
    fa68:	68e0      	ldr	r0, [r4, #12]
    fa6a:	4629      	mov	r1, r5
    fa6c:	3101      	adds	r1, #1
    fa6e:	3301      	adds	r3, #1
    fa70:	428e      	cmp	r6, r1
    fa72:	fbb3 f5f0 	udiv	r5, r3, r0
    fa76:	fb00 3315 	mls	r3, r0, r5, r3
    fa7a:	d1f7      	bne.n	fa6c <am_hal_queue_item_get+0x5c>
    fa7c:	6063      	str	r3, [r4, #4]
    fa7e:	e7e8      	b.n	fa52 <am_hal_queue_item_get+0x42>
    fa80:	72617053 	.word	0x72617053
    fa84:	6e75466b 	.word	0x6e75466b
    fa88:	67644520 	.word	0x67644520
    fa8c:	6f422065 	.word	0x6f422065
    fa90:	20647261 	.word	0x20647261
    fa94:	74736554 	.word	0x74736554
    fa98:	0000000a 	.word	0x0000000a
    fa9c:	303a3331 	.word	0x303a3331
    faa0:	33313a32 	.word	0x33313a32
    faa4:	00000000 	.word	0x00000000
    faa8:	20626546 	.word	0x20626546
    faac:	32203232 	.word	0x32203232
    fab0:	00393130 	.word	0x00393130
    fab4:	706d6f43 	.word	0x706d6f43
    fab8:	64656c69 	.word	0x64656c69
    fabc:	206e6f20 	.word	0x206e6f20
    fac0:	202c7325 	.word	0x202c7325
    fac4:	0a0a7325 	.word	0x0a0a7325
    fac8:	00000000 	.word	0x00000000
    facc:	72617053 	.word	0x72617053
    fad0:	6e75466b 	.word	0x6e75466b
    fad4:	6e655420 	.word	0x6e655420
    fad8:	66726f73 	.word	0x66726f73
    fadc:	20776f6c 	.word	0x20776f6c
    fae0:	75626544 	.word	0x75626544
    fae4:	754f2067 	.word	0x754f2067
    fae8:	74757074 	.word	0x74757074
    faec:	41552820 	.word	0x41552820
    faf0:	0d295452 	.word	0x0d295452
    faf4:	0000000a 	.word	0x0000000a
    faf8:	6c6c6548 	.word	0x6c6c6548
    fafc:	55202c6f 	.word	0x55202c6f
    fb00:	21545241 	.word	0x21545241
    fb04:	00000a0d 	.word	0x00000a0d
    fb08:	65636341 	.word	0x65636341
    fb0c:	6f72656c 	.word	0x6f72656c
    fb10:	6574656d 	.word	0x6574656d
    fb14:	6e692072 	.word	0x6e692072
    fb18:	72207469 	.word	0x72207469
    fb1c:	72757465 	.word	0x72757465
    fb20:	2064656e 	.word	0x2064656e
    fb24:	0d783825 	.word	0x0d783825
    fb28:	0000000a 	.word	0x0000000a
    fb2c:	0a0d6425 	.word	0x0a0d6425
    fb30:	00000000 	.word	0x00000000
    fb34:	0a0a0a0a 	.word	0x0a0a0a0a
    fb38:	0a0a0a0a 	.word	0x0a0a0a0a
    fb3c:	0a0a0a0a 	.word	0x0a0a0a0a
    fb40:	0a0a0a0a 	.word	0x0a0a0a0a
    fb44:	00000a0a 	.word	0x00000a0a
    fb48:	6f727245 	.word	0x6f727245
    fb4c:	65722072 	.word	0x65722072
    fb50:	6e696461 	.word	0x6e696461
    fb54:	44412067 	.word	0x44412067
    fb58:	6e692043 	.word	0x6e692043
    fb5c:	72726574 	.word	0x72726574
    fb60:	20747075 	.word	0x20747075
    fb64:	74617473 	.word	0x74617473
    fb68:	000a7375 	.word	0x000a7375
    fb6c:	6f727245 	.word	0x6f727245
    fb70:	6c632072 	.word	0x6c632072
    fb74:	69726165 	.word	0x69726165
    fb78:	4120676e 	.word	0x4120676e
    fb7c:	69204344 	.word	0x69204344
    fb80:	7265746e 	.word	0x7265746e
    fb84:	74707572 	.word	0x74707572
    fb88:	61747320 	.word	0x61747320
    fb8c:	0a737574 	.word	0x0a737574
    fb90:	00000000 	.word	0x00000000
    fb94:	6f727245 	.word	0x6f727245
    fb98:	202d2072 	.word	0x202d2072
    fb9c:	20434441 	.word	0x20434441
    fba0:	706d6173 	.word	0x706d6173
    fba4:	7220656c 	.word	0x7220656c
    fba8:	20646165 	.word	0x20646165
    fbac:	6d6f7266 	.word	0x6d6f7266
    fbb0:	46494620 	.word	0x46494620
    fbb4:	6166204f 	.word	0x6166204f
    fbb8:	64656c69 	.word	0x64656c69
    fbbc:	00000a2e 	.word	0x00000a2e
    fbc0:	6f727245 	.word	0x6f727245
    fbc4:	202d2072 	.word	0x202d2072
    fbc8:	61736964 	.word	0x61736964
    fbcc:	20656c62 	.word	0x20656c62
    fbd0:	20434441 	.word	0x20434441
    fbd4:	6c696166 	.word	0x6c696166
    fbd8:	0a2e6465 	.word	0x0a2e6465
    fbdc:	00000000 	.word	0x00000000
    fbe0:	6f727245 	.word	0x6f727245
    fbe4:	202d2072 	.word	0x202d2072
    fbe8:	61736964 	.word	0x61736964
    fbec:	6e696c62 	.word	0x6e696c62
    fbf0:	68742067 	.word	0x68742067
    fbf4:	44412065 	.word	0x44412065
    fbf8:	6f702043 	.word	0x6f702043
    fbfc:	20726577 	.word	0x20726577
    fc00:	616d6f64 	.word	0x616d6f64
    fc04:	66206e69 	.word	0x66206e69
    fc08:	656c6961 	.word	0x656c6961
    fc0c:	000a2e64 	.word	0x000a2e64
    fc10:	6f727245 	.word	0x6f727245
    fc14:	202d2072 	.word	0x202d2072
    fc18:	75746572 	.word	0x75746572
    fc1c:	6f206e72 	.word	0x6f206e72
    fc20:	68742066 	.word	0x68742066
    fc24:	44412065 	.word	0x44412065
    fc28:	6e692043 	.word	0x6e692043
    fc2c:	6e617473 	.word	0x6e617473
    fc30:	66206563 	.word	0x66206563
    fc34:	656c6961 	.word	0x656c6961
    fc38:	000a2e64 	.word	0x000a2e64
    fc3c:	6f727245 	.word	0x6f727245
    fc40:	202d2072 	.word	0x202d2072
    fc44:	65736572 	.word	0x65736572
    fc48:	74617672 	.word	0x74617672
    fc4c:	206e6f69 	.word	0x206e6f69
    fc50:	7420666f 	.word	0x7420666f
    fc54:	41206568 	.word	0x41206568
    fc58:	69204344 	.word	0x69204344
    fc5c:	6174736e 	.word	0x6174736e
    fc60:	2065636e 	.word	0x2065636e
    fc64:	6c696166 	.word	0x6c696166
    fc68:	0a2e6465 	.word	0x0a2e6465
    fc6c:	00000000 	.word	0x00000000
    fc70:	6f727245 	.word	0x6f727245
    fc74:	202d2072 	.word	0x202d2072
    fc78:	20434441 	.word	0x20434441
    fc7c:	65776f70 	.word	0x65776f70
    fc80:	6e6f2072 	.word	0x6e6f2072
    fc84:	69616620 	.word	0x69616620
    fc88:	2e64656c 	.word	0x2e64656c
    fc8c:	0000000a 	.word	0x0000000a
    fc90:	6f727245 	.word	0x6f727245
    fc94:	202d2072 	.word	0x202d2072
    fc98:	666e6f63 	.word	0x666e6f63
    fc9c:	72756769 	.word	0x72756769
    fca0:	20676e69 	.word	0x20676e69
    fca4:	20434441 	.word	0x20434441
    fca8:	6c696166 	.word	0x6c696166
    fcac:	0a2e6465 	.word	0x0a2e6465
    fcb0:	00000000 	.word	0x00000000
    fcb4:	6f727245 	.word	0x6f727245
    fcb8:	202d2072 	.word	0x202d2072
    fcbc:	666e6f63 	.word	0x666e6f63
    fcc0:	72756769 	.word	0x72756769
    fcc4:	20676e69 	.word	0x20676e69
    fcc8:	20434441 	.word	0x20434441
    fccc:	746f6c53 	.word	0x746f6c53
    fcd0:	66203020 	.word	0x66203020
    fcd4:	656c6961 	.word	0x656c6961
    fcd8:	000a2e64 	.word	0x000a2e64
    fcdc:	6f727245 	.word	0x6f727245
    fce0:	202d2072 	.word	0x202d2072
    fce4:	62616e65 	.word	0x62616e65
    fce8:	676e696c 	.word	0x676e696c
    fcec:	43444120 	.word	0x43444120
    fcf0:	69616620 	.word	0x69616620
    fcf4:	2e64656c 	.word	0x2e64656c
    fcf8:	0000000a 	.word	0x0000000a

0000fcfc <g_AM_PIN_11_ADCSE2>:
    fcfc:	00000000 616f6857 2820696d 756f6873     ....Whoami (shou
    fd0c:	6220646c 78302065 3a293333 25783020     ld be 0x33): 0x%
    fd1c:	000a7832 52206f4e 75622058 72656666     2x..No RX buffer
    fd2c:	6f727020 65646976 00000a64 646e6553      provided...Send
    fd3c:	72726520 6425203a 0000000a 65636552      err: %d....Rece
    fd4c:	20657669 3a727265 0a642520 00000000     ive err: %d.....
    fd5c:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
    fd6c:	65646976 00000a64 646e6553 72726520     vided...Send err
    fd7c:	68702820 20657361 203a2931 000a6425      (phase 1): %d..

0000fd8c <g_sBspUartConfig>:
    fd8c:	0001c200 00000060 00000000 00000000     ....`...........
    fd9c:	00000000 00000012 00000000 00000000     ................
	...

0000fdb4 <g_AM_BSP_GPIO_COM_UART_RX>:
    fdb4:	00000000                                ....

0000fdb8 <g_AM_BSP_GPIO_COM_UART_TX>:
    fdb8:	00000000                                ....

0000fdbc <g_AM_BSP_GPIO_IOM4_SCL>:
    fdbc:	00040b44                                D...

0000fdc0 <g_AM_BSP_GPIO_IOM4_SDA>:
    fdc0:	00040b44                                D...

0000fdc4 <am_hal_cachectrl_defaults>:
    fdc4:	00000308                                ....

0000fdc8 <g_AM_HAL_GPIO_INPUT>:
    fdc8:	00001003                                ....

0000fdcc <g_ui8Bit76Capabilities>:
    fdcc:	02800101 80010180 80800101 80808080     ................
    fddc:	80808080 80808008 01800180 80808080     ................
    fdec:	80808080 01800402 01010401 80808080     ................
    fdfc:	00000101                                ....

0000fe00 <g_ui8NCEtable>:
    fe00:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    fe10:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    fe20:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    fe30:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    fe40:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    fe50:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    fe60:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    fe70:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    fe80:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    fe90:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    fea0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    feb0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    fec0:	32221202 43231303                       .."2..#C

0000fec8 <g_ui8Inpen>:
    fec8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    fed8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    fee8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    fef8:	00003130                                01..

0000fefc <g_AM_HAL_GPIO_DISABLE>:
    fefc:	00000003                                ....

0000ff00 <g_AM_HAL_GPIO_OUTPUT>:
    ff00:	00000403                                ....

0000ff04 <g_ui8nCEpins>:
    ff04:	02070707 00080802 01020202 01010101     ................
    ff14:	01010101 01010101 01010101 01010101     ................
    ff24:	01010101 08010101 01010008 01010101     ................
    ff34:	00000101                                ....

0000ff38 <g_AM_HAL_GPIO_OUTPUT_12>:
    ff38:	00000703                                ....

0000ff3c <g_am_hal_mcuctrl_flash_size>:
    ff3c:	00004000 00008000 00010000 00020000     .@..............
    ff4c:	00040000 00080000 00100000 00200000     .............. .
	...

0000ff7c <g_am_hal_mcuctrl_sram_size>:
    ff7c:	00004000 00008000 00010000 00020000     .@..............
    ff8c:	00040000 00080000 00100000 00060000     ................
	...

0000ffbc <am_hal_pwrctrl_peripheral_control>:
	...
    ffc8:	00000001 00000004 00000004 00000002     ................
    ffd8:	00000008 00000008 00000004 00000008     ................
    ffe8:	00000008 00000008 00000008 00000008     ................
    fff8:	00000010 00000010 00000010 00000020     ............ ...
   10008:	00000010 00000010 00000040 00000010     ........@.......
   10018:	00000010 00000080 00000004 00000004     ................
   10028:	00000100 00000004 00000004 00000200     ................
   10038:	00000020 00000020 00000400 00000004      ... ...........
   10048:	00000004 00000800 00000040 00000040     ........@...@...
   10058:	00001000 00000080 00000080 00002000     ............. ..
   10068:	00000100 00000100                       ........

00010070 <gAmHalCmdQReg>:
   10070:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10080:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10090:	00000004 00000002 50005294 50005298     .........R.P.R.P
   100a0:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   100b0:	5000529c 00000001 00000004 00000002     .R.P............
   100c0:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   100d0:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   100e0:	00000004 00000002 50007294 50007298     .........r.P.r.P
   100f0:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10100:	5000729c 00000001 00000004 00000002     .r.P............
   10110:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10120:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10130:	00000004 00000002 50009294 50009298     ...........P...P
   10140:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10150:	5000929c 00000001 00000004 00000002     ...P............
   10160:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10170:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10180:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10190:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   101a0:	5000c250 00000001 00000004 00000002     P..P............
